{"version":3,"sources":["types/index.ts","utils/index.ts","components/Tag/tag.tsx","components/HomeItem/homeItem.tsx","assets/homeItemCovers/Sort.jpg","assets/homeItemCovers/Stack.jpg","assets/homeItemCovers/Queue.jpg","assets/homeItemCovers/BinarySearchTree.jpg","assets/homeItemCovers/BinaryHeap.jpg","pages/Home/config.ts","pages/Home/home.tsx","components/Console/console.tsx","configs/page/defaultConfig.ts","components/Cube3d/cube3d.tsx","pages/Sort/config.ts","pages/Sort/SortCube3d/sortCube3d.tsx","components/Scene3d/scene3d.tsx","utils/array.ts","pages/Sort/utils.ts","pages/Sort/store.ts","pages/Sort/sort.tsx","pages/BinaryHeap/config.ts","utils/binaryTree.ts","utils/math.ts","pages/BinaryHeap/utils.ts","pages/BinaryHeap/store.ts","components/Line3d/line3d.tsx","components/Sphere3d/sphere3d.tsx","pages/BinaryHeap/BinaryHeapSphere3d/binaryHeapSphere3d.tsx","pages/BinaryHeap/binaryHeap.tsx","pages/Queue/QueueCube3d/queueCube3d.tsx","pages/Queue/config.ts","pages/Queue/utils.ts","pages/Queue/store.ts","pages/Queue/queue.tsx","pages/Stack/StackCube3d/stackCube3d.tsx","pages/Stack/config.ts","pages/Stack/utils.ts","pages/Stack/store.ts","pages/Stack/stack.tsx","pages/BinarySearchTree/config.ts","pages/BinarySearchTree/utils.ts","pages/BinarySearchTree/store.ts","pages/BinarySearchTree/BSTSphere3d/bstSphere3d.tsx","pages/BinarySearchTree/binarySearchTree.tsx","pages/HashTable/config.ts","pages/HashTable/hashTable.tsx","pages/Graph/graph.tsx","configs/router/config.ts","configs/router/index.tsx","App.tsx","index.tsx"],"names":["DataStrucTypes","OpeDetailTypes","ActionTypes","isNum","value","isNaN","swap","arr","i1","i2","temp","excuteSeq","seq","speed","dispatch","Promise","resolve","type","Loading","forEach","event","i","setTimeout","e","length","CancelLoading","randomNum","range","Math","random","toFixed","randomArr","valueRange","includes","push","useHover","useState","setValue","ref","useRef","handleMouseOver","handleMouseOut","useEffect","node","current","addEventListener","removeEventListener","MainTags","Tag","props","main","color","HomeItem","title","src","tags","onClick","hoverRef","isHover","scale","useSpring","config","stiff","div","className","style","hoverable","cover","alt","Meta","description","map","tagName","homeItemsConfig","SortPic","Sort","StackPic","Stack","QueuePic","Queue","BinaryHeap","BinarySearchTree","Home","history","useHistory","open","setOpen","handleClick","root","LinkedList","HashTable","AVLTree","RedBlackTree","BTree","BPlusTree","Graph","from","size","opacity","to","row","gutter","xs","sm","md","col","j","lg","xl","width","height","Item","Console","SubMenu","children","operation","displayer","drawerHeight","showSilider","radioGroup","addConfig","deleteConfig","searchConfig","spinning","onSliderChange","onAdd","onDelete","onSearch","onRenderChange","onRender","hoverLeftRef","isLeftHover","hoverRenderRef","isRenderHover","isUnfold","setIsUnfold","addValue","setAddValue","indexRange","addIndex","setAddIndex","deleteValue","setDeleteValue","deleteIndex","setDeleteIndex","searchValue","setSearchValue","searchIndex","setSearchIndex","renderValue","setRenderValue","radioActived","setRadioActived","displayConRef","leftOpacity","renderOpacity","gentle","scrollTop","scrollHeight","mode","theme","inlineCollapsed","selectable","display","icon","MenuUnfoldOutlined","visible","placement","mask","onClose","defaultValue","min","onChange","tip","indicator","LoadingOutlined","fontSize","spin","num","isRadioOneNum","Group","getDefaultRadio","target","radioName","hasIndex","max","index","hasValue","bordered","trim","defaultProps","defaultGeoColor","defaultColor","activeColor","hoverColor","lockColor","Cube3d","forwardRef","args","position","isActive","isLock","colorConfig","disappear","setIsHover","isClick","setIsClick","meshRef","reverse","default","wobbly","mesh","Text","RoundedBox","onPointerOver","onPointerOut","meshPhongMaterial","transparent","geoBaseDistance","geoNumRange","geoValueRange","geoBasePosY","cameraPosZ","animationSpeed","SortCube3d","sortIndexes","sortIndex","startPosX","restProps","getPosX","oldPosX","targetPosX","useFrame","delta","abs","x","translateX","React","memo","SceneLoader","progress","useProgress","onLoaded","Html","center","marginTop","Scene3d","cameraRef","PerspectiveCamera","makeDefault","intensity","fallback","OrbitControls","maxDistance","Environment","background","files","path","judgeSorted","initCubes","values","getStartPosX","arrLen","initSeq","Disappear","Generate","payload","Appear","quickSortSeq","l","r","sortSeq","Lock","Active","Deactive","Swap","SwapDone","initState","cubes","loading","disappearAll","opeDetails","reducer","state","action","Default","item","sortDone","UnLock","index1","index2","newCubes","curSortIndex","newSortIndexes","newValues","newOpeDetail","indexes","curValues","newSortIndex","SortDone","Move","oldIndexes","targetIndexes","findIndex","splice","Delete","AddDone","newEle","targetIndex","newCube","pop","Add","DeleteDone","Step","useReducer","isSceneLoaded","setIsSceneLoaded","handleRandom","onBack","replace","window","location","reload","_","fillOpacity","message","warning","addEleSeq","deleteEleSeq","parseRes","substring","split","test","parseValue","Array","isArray","BarChartOutlined","backup","bubbleSortSeq","indexOfMax","selectSortSeq","sequence","direction","toString","DotChartOutlined","maxDeepth","cdnOfNodes","getSubTree","binaryTree","indexOfNode","queue","subTree","lChildV","getLChildValue","rChildV","getRChildValue","dir","shift","formatSpheres","spheres","sphere","formatBinaryTree","treeToString","initSpheres","indexDisappear","getFatherIndex","floor","getChildrenIndexes","undefined","setLChild","lChild","Error","setRChild","rChild","getDeepthByNodeIndex","base","truth","log","judgeNode","childNum","preOrderSeq","inOrderSeq","postOrderSeq","randomBh","nodeNumsRange","nodeValueRange","binaryHeap","nodeV","nodeIndex","fatherIndex","addToBh","geometries","newGeo","cur","ActiveLeft","activeLeft","ActiveRight","activeRight","Line3d","points","hidden","lineWidth","Line","Sphere3d","BinaryHeapSphere3d","lChildPos","rChildPos","oldPosY","targetPosY","deltaX","deltaY","y","translateY","hasLChild","hasRChild","Fragment","addSeq","QueueCube3d","key","uuidv4","Enqueue","enqueueValue","Dequeue","dequeueValue","enqueueSeq","dequeueSeq","StackCube3d","Pop","popValue","PopDone","Push","pushValue","startPosY","pushSeq","popSeq","addToBST","bst","indexOfRoot","randomBST","cache","fill","addNodeSeq","deleteNodeSeq","childIndex","searchSeq","deleteType","newSpheres","newBst","isLeft","newSphere","newSperes","console","fatherValue","newNode","StartPreorder","PreOrderDetails","StartInOrder","InOrderDetails","StartPostOrder","PostOrderDetails","BSTSphere3d","preOrderRes","inOrderRes","events","postOrderRes","goBack","randomDone","RandomDone","Random","routers","page","RouterView","component","Content","Header","Footer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e293396.chunk.js","sourcesContent":["import React from \"react\";\n\n\n/** 520 ~ 120\n \n\n\n */\n\n/** 遍历细节数组，分发任务的间隔时间 */\n// export const DISPATCH_INTERVAL = 320;\n\nexport interface IBaseProps {\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nexport interface IBaseState {\n    loading: boolean;\n    disappearAll: boolean;\n    opeDetails: { type: OpeDetailTypes, payload?: any }[]\n}\n\n/** 主页的item类型 */\nexport enum DataStrucTypes {\n    Sort,\n    LinkedList,\n    Queue,\n    Stack,\n    HashTable,\n    BinarySearchTree,\n    BinaryHeap,\n    AVLTree,\n    BTree,\n    BPlusTree,\n    RedBlackTree,\n    Graph\n}\n\n/** 每个立方体页面的配置 */\nexport interface IPageConfig {\n    /** 设置几何体之间的水平距离 */\n    geoBaseDistance: number;\n    /** 设置几何体出现的数量范围 */\n    geoNumRange: Range;\n    /** 设置几何体取值范围 */\n    geoValueRange: Range;\n    /** 设置动画的播放速度 */\n    animationSpeed: number;\n    /** 设置页面几何体的基础y坐标 */\n    geoBasePosY: number;\n    /** 设置摄像机的z坐标 */\n    cameraPosZ?: number;\n    /** 设置几何体的颜色 */\n    colorConfig?: IColorConfig;\n}\n\nexport interface ISpherePageConfig extends IPageConfig {\n    /** 设置树的最大层数 */\n    maxDeepth: number;\n}\n\n/** 3d几何体通用配置 */\nexport interface IGeometryProps {\n    ref?: any;\n    /** 构造参数 */\n    args?: any;\n    /** 取值 */\n    value: number | null;\n    /** 是否消失 */\n    disappear?: boolean;\n    /** 颜色配置 */\n    colorConfig?: IColorConfig\n    /** 位置 */\n    position?: any;\n    /** 是否激活 */\n    isActive?: boolean;\n    /** 是否锁定 */\n    isLock?: boolean;\n}\n\n/** 控制台操作细节类型 */\nexport enum OpeDetailTypes {\n    Swap = '交换',\n    Add = '新增元素',\n    Delete = '删除元素',\n    HeadInsert = '头部插入',\n    TailInsert = '尾部插入',\n    Pop = '弹栈',\n    Push = '压栈',\n    Enqueue = '入队',\n    Dequeue = '出队',\n    PreOrderDetails = '前序遍历',\n    InOrderDetails = '中序遍历',\n    PostOrderDetails = '后序遍历',\n    Default = '数据源'\n}\n\n\nexport type IReducer<T> = (state: T, action: IAction) => T;\n\nexport interface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nexport type SeqType = IAction[][];\n\nexport enum ActionTypes {\n    Pop,\n    PopDone,\n    Push,\n    PushDone,\n    Active,\n    ActiveLeft,\n    ActiveRight,\n    Deactive,\n    Swap,\n    SwapDone,\n    Lock,\n    UnLock,\n    SortDone,\n    RandomDone,\n    Random,\n    Add,\n    AddDone,\n    Delete,\n    DeleteDone,\n    Search,\n    Move,\n    Enqueue,\n    Dequeue,\n    DequeueDone,\n    Disappear,\n    Appear,\n    HeadInsert,\n    TailInsert,\n    ShowArrow,\n    MoveDown,\n    MoveTop,\n    StartPreorder,\n    StartInOrder,\n    StartPostOrder,\n    Generate,\n    Loading,\n    CancelLoading,\n}\n\nexport interface IColorConfig {\n    /** 默认颜色 */\n    defaultColor?: string;\n    /** hover颜色 */\n    hoverColor?: string;\n    /** active颜色 */\n    activeColor?: string;\n    /** lock颜色 */\n    lockColor?: string;\n}\n\n\nexport type Points = [number, number, number][];\nexport type Range = [number, number];\n","import { useEffect, useRef, useState } from \"react\"\nimport { ActionTypes, IAction, Range, SeqType } from \"../types\";\n\n/** 判断一个值是否是数字 */\nexport function isNum(value: any) {\n    return typeof value === 'number' && !isNaN(value);\n}\n\n/** 交换数组两个元素 */\nexport function swap<T>(arr: T[], i1: number, i2: number) {\n    const temp = arr[i1];\n    arr[i1] = arr[i2];\n    arr[i2] = temp;\n}\n\n/** 执行动画细节数组 */\nexport function excuteSeq(seq: SeqType, speed: number, dispatch: React.Dispatch<IAction>) {\n    return new Promise((resolve) => {\n        dispatch({ type: ActionTypes.Loading })\n        seq.forEach((event, i) => {\n            setTimeout(() => {\n                event.forEach((e) => { dispatch(e) })\n                if (i === seq.length - 1) {\n                    resolve('Seq has been excuted.')\n                    dispatch({ type: ActionTypes.CancelLoading })\n                }\n            }, i * speed)\n        })\n    })\n}\n\n/** 随机生成一个 start ~ end 的整数 */\nexport function randomNum(range: Range): number {\n    return +(Math.random() * (range[1] - range[0]) + range[0]).toFixed(0);\n}\n\n/** 随机生成指定长度且无重复的数组 */\nexport function randomArr(length: number, valueRange: Range): number[] {\n    const arr: number[] = [];\n    for (let i = 0; i < length; i++) {\n        let value = randomNum(valueRange);\n        while (arr.includes(value)) {\n            value = randomNum(valueRange);\n        }\n        arr.push(value);\n    }\n    return arr;\n}\n\n/** 判断某个元素是否 hover */\nexport function useHover() {\n    const [value, setValue] = useState(false);\n    const ref = useRef<any>();\n    const handleMouseOver = () => setValue(true);\n    const handleMouseOut = () => setValue(false);\n    useEffect(\n        () => {\n            const node = ref.current;\n            if (node) {\n                node.addEventListener(\"mouseover\", handleMouseOver);\n                node.addEventListener(\"mouseout\", handleMouseOut);\n                return () => {\n                    node.removeEventListener(\"mouseover\", handleMouseOver);\n                    node.removeEventListener(\"mouseout\", handleMouseOut);\n                };\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [ref.current] // Recall only if ref changes\n    );\n    return [ref, value];\n}","import { Tag as AntdTag } from 'antd'\nimport { IBaseProps } from '../../types';\nimport './tag.scss'\n\nexport type TagType = '删除' | '添加' | '大顶堆' | '数组' | 'avl树' | 'B+树' | 'B树' | '二叉搜索树' | '图论' | '哈希表' | '二叉堆' | '链表' | '队列' | '红黑树' | '栈' | '排序' | '冒泡' | '快排' | '插入' | '选择' | '归并' | '遍历' | '压栈' | '弹栈' | '入队' | '出队' | '搜索' | '二分'\nexport const MainTags: TagType[] = ['数组', '哈希表', '图论', '栈', '红黑树', '队列', '链表', '二叉堆', 'avl树', '二叉搜索树', 'B+树', 'B树']\n\ninterface ITagsProps extends IBaseProps {\n    /** 标签组类型 */\n    type: TagType\n    /** 颜色 */\n    // color?: 'geekblue' | 'orange'\n    /** 主tag */\n    main?: boolean;\n}\n\nconst Tag: React.FC<ITagsProps> = (props) => {\n    const { type, main } = props;\n    return (\n        <AntdTag color={main ? 'orange' : 'geekblue'}>\n            {type}\n        </AntdTag>\n    )\n}\n\nexport default Tag;","import { useSpring, animated, config } from '@react-spring/web'\nimport { Card } from 'antd'\nimport { DataStrucTypes, IBaseProps } from '../../types'\nimport { useHover } from '../../utils'\nimport './homeItem.scss'\nimport Tag, { MainTags, TagType } from '../Tag/tag'\n\nexport interface IHomeItemProps extends IBaseProps {\n    /** 数据结构类型 */\n    type: DataStrucTypes;\n    /** 卡片标题 */\n    title?: string;\n    /** 图片资源 */\n    src?: string;\n    /** 标签 */\n    tags?: TagType[];\n    /** 点击事件 */\n    onClick?: (type: DataStrucTypes) => void;\n}\n\nconst HomeItem: React.FC<IHomeItemProps> = (props) => {\n    const { title, src, tags, type, onClick } = props;\n    const [hoverRef, isHover] = useHover();\n\n    const { scale } = useSpring({\n        scale: (\n            isHover ? 1.05 : 1\n        ),\n        config: config.stiff\n    });\n\n    return (\n        <animated.div\n            ref={hoverRef as any}\n            className='homeItem'\n            style={{ scale }}\n        >\n            <Card\n                hoverable\n                cover={<img src={src} alt='pic' />}\n                onClick={() => { setTimeout(() => { onClick?.(type) }, 250) }}\n            >\n                <Card.Meta\n                    title={title}\n                    description={tags?.map((tagName: TagType, i) => (\n                        <Tag key={i} main={MainTags.includes(tagName)} type={tagName} />\n                    ))}\n                />\n            </Card>\n        </animated.div>\n\n    )\n}\n\nexport default HomeItem;","export default __webpack_public_path__ + \"static/media/Sort.af83f2f6.jpg\";","export default __webpack_public_path__ + \"static/media/Stack.83affc03.jpg\";","export default __webpack_public_path__ + \"static/media/Queue.5d3f80d2.jpg\";","export default __webpack_public_path__ + \"static/media/BinarySearchTree.0ea5af15.jpg\";","export default __webpack_public_path__ + \"static/media/BinaryHeap.8cc118e6.jpg\";","import { IHomeItemProps } from \"../../components/HomeItem/homeItem\";\nimport { DataStrucTypes } from \"../../types\";\nimport SortPic from '../../assets/homeItemCovers/Sort.jpg';\nimport StackPic from '../../assets/homeItemCovers/Stack.jpg';\n// import LinkedListPic from '../../assets/homeItemCovers/LinkedList.jpg';\nimport QueuePic from '../../assets/homeItemCovers/Queue.jpg';\nimport BinarySearchTree from '../../assets/homeItemCovers/BinarySearchTree.jpg';\nimport BinaryHeap from '../../assets/homeItemCovers/BinaryHeap.jpg'\n\n/** home 的 item 数据配置 */\nexport const homeItemsConfig: Omit<IHomeItemProps, 'onClick'>[][] = [\n    // 第一排\n    [\n        {\n            src: SortPic,\n            tags: ['数组', '冒泡', '选择', '快排'],\n            title: '排序',\n            type: DataStrucTypes.Sort\n        },\n        // {\n        //     src: LinkedListPic,\n        //     tag: <Tags type={DataStrucTypes.LinkedList} />,\n        //     title: '链表',\n        //     type: DataStrucTypes.LinkedList\n        // },\n        {\n            src: StackPic,\n            tags: ['栈', '压栈', '弹栈'],\n            title: '栈',\n            type: DataStrucTypes.Stack\n        },\n        {\n            src: QueuePic,\n            tags: ['队列', '入队', '出队'],\n            title: '队列',\n            type: DataStrucTypes.Queue\n        },\n        {\n            src: BinaryHeap,\n            tags: ['二叉堆', '大顶堆'],\n            title: '二叉堆',\n            type: DataStrucTypes.BinaryHeap\n        },\n\n    ],\n    [\n        {\n            src: BinarySearchTree,\n            tags: ['二叉搜索树', '遍历', '搜索'],\n            title: '二叉搜索树',\n            type: DataStrucTypes.BinarySearchTree\n        },\n        // {\n        //     src: Pic,\n        //     tags: ['哈希表'],\n        //     title: '哈希表',\n        //     type: DataStrucTypes.HashTable\n        // },\n        // {\n        //     src: Pic,\n        //     tags: ['图论'],\n        //     title: '图结构',\n        //     type: DataStrucTypes.Graph\n        // },\n    ]\n    // 第二排\n    // [\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.AVLTree} />,\n    //         title: 'AVL树',\n    //         type: DataStrucTypes.AVLTree\n    //     },\n    // ],\n    // // 第三排\n    // [\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.RedBlackTree} />,\n    //         title: '红黑树',\n    //         type: DataStrucTypes.RedBlackTree\n    //     },\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.BTree} />,\n    //         title: 'B树',\n    //         type: DataStrucTypes.BTree\n    //     },\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.BPlusTree} />,\n    //         title: 'B+树',\n    //         type: DataStrucTypes.BPlusTree\n    //     },\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.Graph} />,\n    //         title: '图结构',\n    //         type: DataStrucTypes.Graph\n    //     },\n\n    // ],\n];","import { useState } from 'react'\nimport { Col, Row } from 'antd';\nimport { useHistory } from 'react-router';\nimport { useSpring, animated, config, useSpringRef, useTransition, useChain } from '@react-spring/web'\nimport HomeItem from '../../components/HomeItem/homeItem';\nimport { DataStrucTypes } from '../../types';\nimport { homeItemsConfig } from './config';\nimport { root } from '../../configs/router/config'\nimport './home.scss'\nimport { Link } from 'react-router-dom';\n\n\nconst Home = () => {\n    const history = useHistory();\n    const [open, setOpen] = useState(false)\n\n    // const springApi = useSpringRef()\n    // const { size, ...rest } = useSpring({\n    //     ref: springApi,\n    //     config: config.stiff,\n    //     from: { size: '20%', opacity: 0 },\n    //     to: {\n    //         size: open ? '20' : '100%',\n    //         opacity: open ? 0 : 1,\n    //     },\n    // })\n\n    // const transApi = useSpringRef()\n    // const transition = useTransition(open ? data : [], {\n    //     ref: transApi,\n    //     trail: 400 / 12,\n    //     from: { opacity: 0, scale: 0 },\n    //     enter: { opacity: 1, scale: 1 },\n    //     leave: { opacity: 0, scale: 0 },\n    // })\n\n    // // This will orchestrate the two animations above, comment the last arg and it creates a sequence\n    // useChain(open ? [transApi, springApi] : [springApi, transApi], [\n    //     0,\n    //     open ? 0.1 : 0.6,\n    // ])\n\n\n    const handleClick = (type: DataStrucTypes) => {\n        switch (type) {\n            case DataStrucTypes.Sort:\n                return history.push(root + '/sort');\n            case DataStrucTypes.LinkedList:\n                return history.push(root + '/linkedList')\n            case DataStrucTypes.Stack:\n                return history.push(root + '/stack')\n            case DataStrucTypes.Queue:\n                return history.push(root + '/queue')\n            case DataStrucTypes.HashTable:\n                return history.push(root + '/hashTable')\n            case DataStrucTypes.BinarySearchTree:\n                return history.push(root + '/binarySearchTree')\n            case DataStrucTypes.BinaryHeap:\n                return history.push(root + '/binaryHeap')\n            case DataStrucTypes.AVLTree:\n                return history.push(root + '/avlTree')\n            case DataStrucTypes.RedBlackTree:\n                return history.push(root + '/redBlackTree')\n            case DataStrucTypes.BTree:\n                return history.push(root + '/bTree')\n            case DataStrucTypes.BPlusTree:\n                return history.push(root + '/bPlusTree')\n            case DataStrucTypes.Graph:\n                return history.push(root + '/graph')\n        }\n    }\n    const { size, opacity } = useSpring({\n        from: {\n            size: '20%',\n            opacity: '0',\n        },\n        to: {\n            size: open ? '20%' : '100%',\n            opacity: open ? '0' : '1',\n        },\n        config: config.stiff\n    })\n    return (\n        <div className='home-warp'>\n            {homeItemsConfig.map((row, i) => (\n                <Row gutter={{ xs: 8, sm: 16, md: 24 }} key={i + '&'}>\n                    {row.map((col, j) => (\n                        <Col xs={12} sm={12} md={6} lg={6} xl={6} key={i + '&' + j}>\n                            {/* <Link to={root + '/sort/023012423'}> */}\n                            <animated.div\n                                className='homeItem-warp'\n                                style={{ width: size, height: size, opacity }}\n                                onClick={() => setOpen(true)}\n                            >\n\n                                <HomeItem\n                                    src={col.src}\n                                    tags={col.tags}\n                                    title={col.title}\n                                    type={col.type}\n                                    onClick={handleClick}\n                                />\n                            </animated.div>\n                            {/* </Link> */}\n                        </Col>\n                    ))}\n                </Row>\n            ))\n            }\n        </div >\n    )\n}\n\nexport default Home;","import React, { useEffect, useRef, useState } from \"react\";\nimport { Menu, InputNumber, Button, Drawer, Slider, Radio, Divider, Spin, Input } from \"antd\";\nimport { LoadingOutlined, MenuUnfoldOutlined } from '@ant-design/icons';\nimport { randomNum, useHover } from \"../../utils\";\nimport { IBaseProps, Range } from \"../../types\";\nimport { animated, config, useSpring } from \"@react-spring/web\";\nimport './console.scss'\n\nconst { Item, SubMenu } = Menu;\n\ninterface radioConfig {\n    /** 是否具有序号输入框 */\n    hasIndex?: boolean;\n    /** 是否具有数值输入框 */\n    hasValue?: boolean;\n    /** index取值范围 */\n    indexRange?: Range;\n    /** value取值范围 */\n    valueRange?: Range;\n    /** radioName 同时对应 buttonName */\n    radioName?: string;\n}\n\ninterface IConsoleProps extends IBaseProps {\n    /** 分别表示是否添加、删除、查找 */\n    radioGroup: [0 | 1, 0 | 1, 0 | 1];\n    /** 控制台左边的操作界面 */\n    operation: React.ReactNode;\n    /** 控制台右边的显示器 */\n    displayer: React.ReactNode;\n    /** drawer的高度 */\n    drawerHeight?: number;\n    /** 是否有silider */\n    showSilider?: boolean;\n    /** 添加元素输入框配置 */\n    addConfig?: radioConfig;\n    /** 删除元素输入框配置 */\n    deleteConfig?: radioConfig;\n    /** 查找元素输入框配置 */\n    searchConfig?: radioConfig;\n    /** 操作是否正在执行 */\n    spinning?: boolean;\n    /** slider变化时的回调 */\n    onSliderChange?: (value: number) => void;\n    /** 点击添加时的回调 */\n    onAdd?: (value: number, index: number) => void;\n    /** 点击删除时的回调 */\n    onDelete?: (value: number, index: number) => void;\n    /** 点击搜索时的回调 */\n    onSearch?: (value: number, index: number) => void;\n    /** 渲染器输入框变化时的回调 */\n    onRenderChange?: (value: string) => void;\n    /** 点击渲染按钮时的回调 */\n    onRender?: (value: string) => void;\n}\n\nconst Console: React.FC<IConsoleProps> = (props) => {\n\n    const {\n        children,\n        style,\n        operation,\n        displayer,\n        drawerHeight,\n        showSilider,\n        radioGroup,\n        addConfig,\n        deleteConfig,\n        searchConfig,\n        spinning,\n        onSliderChange,\n        onAdd,\n        onDelete,\n        onSearch,\n        onRenderChange,\n        onRender,\n    } = props;\n\n    const [hoverLeftRef, isLeftHover] = useHover();\n    const [hoverRenderRef, isRenderHover] = useHover();\n\n    const [isUnfold, setIsUnfold] = useState(false);\n\n    const [addValue, setAddValue] = useState(randomNum(addConfig?.valueRange || [3, 37]));\n    const [addIndex, setAddIndex] = useState(randomNum(addConfig?.indexRange || [0, 3]));\n\n    const [deleteValue, setDeleteValue] = useState(randomNum(deleteConfig?.valueRange || [3, 37]));\n    const [deleteIndex, setDeleteIndex] = useState(randomNum(deleteConfig?.indexRange || [0, 3]));\n\n    const [searchValue, setSearchValue] = useState(randomNum(searchConfig?.valueRange || [3, 37]));\n    const [searchIndex, setSearchIndex] = useState(randomNum(searchConfig?.indexRange || [0, 3]));\n\n    const [renderValue, setRenderValue] = useState('');\n\n    // 被激活的 radio\n    const [radioActived, setRadioActived] = useState(0);\n\n    const displayConRef = useRef<HTMLDivElement>();\n    const { leftOpacity, renderOpacity } = useSpring({\n        leftOpacity: isLeftHover ? 0.7 : 0.2,\n        renderOpacity: isRenderHover ? 0.7 : 0.2,\n        config: config.gentle\n    })\n\n    /** 当 displayer 里面的内容变多的时候，始终保持其滚动条位于底部 */\n    useEffect(() => {\n        if (displayConRef.current) displayConRef.current.scrollTop = displayConRef.current.scrollHeight;\n    }, [displayConRef.current?.scrollHeight])\n\n    const getDefaultRadio = (radioGroup: any[]) => {\n        for (let i = 0; i <= radioGroup.length - 1; i++) {\n            if (radioGroup[i] === 1) {\n                return i;\n            }\n        }\n    }\n\n    /** 统计radioGroup中取值为1的个数是否为1 */\n    const isRadioOneNum = (radioGroup: any[]) => {\n        let num = 0;\n        if (radioGroup[0] === 1) num++;\n        if (radioGroup[1] === 1) num++;\n        if (radioGroup[2] === 1) num++\n\n        if (num === 1) return true;\n        return false;\n    }\n\n    return (\n        <>\n            <animated.div\n                className='console-left'\n                ref={hoverLeftRef as any}\n                style={{ ...style, opacity: leftOpacity }}\n            >\n                {/* 左侧栏 */}\n                <Menu\n                    className='console'\n                    mode=\"inline\"\n                    theme=\"dark\"\n                    inlineCollapsed={true}\n                    selectable={false}\n                    style={{ display: isUnfold ? 'none' : 'inline-block' }}\n                >\n                    <Item\n                        icon={<MenuUnfoldOutlined />}\n                        key='item0'\n                        onClick={() => {\n                            setIsUnfold(true);\n                        }}\n                    >\n                        展开操作台\n                </Item>\n                    {children}\n                </Menu>\n\n                {/* 抽屉 */}\n                <Drawer\n                    className='console-drawer'\n                    title='操作台'\n                    height={drawerHeight}\n                    visible={isUnfold}\n                    placement='bottom'\n                    mask={false}\n                    onClose={() => { setIsUnfold(false) }}\n                >\n\n                    <div className='operation'>\n                        {showSilider &&\n                            <div className='slider-warp'>\n                                动画速度：\n                            <Slider\n                                    className='slider'\n                                    defaultValue={80}\n                                    min={40}\n                                    onChange={(value: number) => onSliderChange?.(value)}\n                                />\n                            </div>\n                        }\n\n\n                        <Spin\n                            tip='操作执行中...'\n                            spinning={spinning}\n                            indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n                        >\n                            <div className='operation-main'>\n                                {/* 显示操作按钮 */}\n                                {operation}\n\n                                {/* 显示添加、删除 */}\n                                <div className='input-group'>\n                                    {\n                                        !(isRadioOneNum(radioGroup)) ?\n                                        <Radio.Group\n                                            className='radio-group'\n                                            defaultValue={getDefaultRadio(radioGroup)}\n                                            onChange={(e) => setRadioActived(e.target.value)}\n                                        >\n\n                                            {\n                                                radioGroup.map((value, i) => {\n                                                    if (value === 1 && i === 0) return <Radio key={i} value={i}>{addConfig?.radioName}</Radio>\n                                                    else if (value === 1 && i === 1) return <Radio key={i} value={i}>{deleteConfig?.radioName}</Radio>\n                                                    else if (value === 1 && i === 2) return <Radio key={i} value={i}>{searchConfig?.radioName}</Radio>\n                                                    else return <></>\n                                                })\n                                            }\n                                        </Radio.Group>\n                                        : <div className='radio-empty'></div>\n                                    }\n\n                                    <div className='label-group'>\n                                        {\n                                            radioActived === 0 ?\n                                                <>\n                                                    {\n                                                        addConfig?.hasIndex &&\n                                                        (<label>\n                                                            <span className='label-name'>序号:</span>\n                                                            <InputNumber\n                                                                min={(addConfig?.indexRange as unknown as number[])[0]}\n                                                                max={(addConfig?.indexRange as unknown as number[])[1]}\n                                                                value={addIndex}\n                                                                onChange={(index) => {\n                                                                    setAddIndex(index)\n                                                                }}\n                                                            />\n                                                        </label>)\n                                                    }\n                                                    {\n                                                        addConfig?.hasValue &&\n                                                        (<label>\n                                                            <span className='label-name'>数值:</span>\n                                                            <InputNumber\n                                                                min={(addConfig?.valueRange as unknown as number[])[0]}\n                                                                max={(addConfig?.valueRange as unknown as number[])[1]}\n                                                                value={addValue}\n                                                                onChange={(value) => {\n                                                                    setAddValue(value)\n                                                                }}\n                                                            />\n                                                        </label>)\n                                                    }\n                                                    <Button type='primary' onClick={() => onAdd?.(addIndex, addValue)}>{addConfig?.radioName}</Button>\n                                                </> :\n                                                radioActived === 1 ?\n                                                    <>\n                                                        {\n                                                            deleteConfig?.hasIndex &&\n                                                            (<label>\n                                                                <span className='label-name'>序号:</span>\n                                                                <InputNumber\n                                                                    min={(deleteConfig?.indexRange as unknown as number[])[0]}\n                                                                    max={(deleteConfig?.indexRange as unknown as number[])[1]}\n                                                                    value={deleteIndex}\n                                                                    onChange={(index) => {\n                                                                        setDeleteIndex(index);\n                                                                    }}\n                                                                />\n                                                            </label>)\n                                                        }\n                                                        {\n                                                            deleteConfig?.hasValue &&\n                                                            (<label>\n                                                                <span className='label-name'>数值:</span>\n                                                                <InputNumber\n                                                                    min={(deleteConfig?.valueRange as unknown as number[])[0]}\n                                                                    max={(deleteConfig?.valueRange as unknown as number[])[1]}\n                                                                    value={deleteValue}\n                                                                    onChange={(value) => {\n                                                                        setDeleteValue(value)\n                                                                    }}\n                                                                />\n                                                            </label>)\n                                                        }\n                                                        <Button type='primary' onClick={() => onDelete?.(deleteIndex, deleteValue)}>{deleteConfig?.radioName}</Button>\n                                                    </> :\n                                                    <>\n                                                        {\n                                                            searchConfig?.hasIndex &&\n                                                            (<label>\n                                                                <span className='label-name'>序号:</span>\n                                                                <InputNumber\n                                                                    min={(searchConfig?.indexRange as unknown as number[])[0]}\n                                                                    max={(searchConfig?.indexRange as unknown as number[])[1]}\n                                                                    value={searchIndex}\n                                                                    onChange={(index) => {\n                                                                        setSearchIndex(index);\n                                                                    }}\n                                                                />\n                                                            </label>)\n                                                        }\n                                                        {\n                                                            searchConfig?.hasValue &&\n                                                            (<label>\n                                                                <span className='label-name'>数值:</span>\n                                                                <InputNumber\n                                                                    min={(searchConfig.valueRange as unknown as number[])?.[0]}\n                                                                    max={(searchConfig.valueRange as unknown as number[])?.[1]}\n                                                                    value={searchValue}\n                                                                    onChange={(value) => {\n                                                                        setSearchValue(value);\n                                                                    }}\n                                                                />\n                                                            </label>)\n                                                        }\n                                                        <Button type='primary' onClick={() => onSearch?.(searchIndex, searchValue)}>{searchConfig?.radioName}</Button>\n                                                    </>\n                                        }\n                                    </div>\n                                </div>\n                            </div>\n                        </Spin>\n\n                    </div>\n\n                    <Divider\n                        className='divider'\n                        type='vertical'\n                    />\n\n                    <div className='displayer'>\n                        <div className='content' ref={displayConRef as any}>\n                            {displayer}\n                        </div>\n                    </div>\n                </Drawer>\n            </animated.div>\n            <animated.div\n                className='console-render'\n                ref={hoverRenderRef as any}\n                style={{ ...style, opacity: renderOpacity }}\n            >\n                <Input\n                    bordered={false}\n                    onChange={(e) => {\n                        setRenderValue(e.target.value.trim());\n                        onRenderChange?.(e.target.value.trim());\n                    }}\n                />\n                <Button type='primary' onClick={() => { onRender?.(renderValue) }}>渲染</Button>\n            </animated.div>\n        </>\n    )\n}\n\nConsole.defaultProps = {\n    showSilider: true,\n    radioGroup: [1, 1, 1],\n    addConfig: {\n        hasIndex: true,\n        hasValue: true,\n        indexRange: [0, 10],\n        valueRange: [3, 37],\n        radioName: '添加'\n    },\n    deleteConfig: {\n        hasIndex: true,\n        hasValue: true,\n        indexRange: [0, 10],\n        valueRange: [3, 37],\n        radioName: '删除'\n    },\n    searchConfig: {\n        hasIndex: true,\n        hasValue: true,\n        indexRange: [0, 10],\n        valueRange: [3, 37],\n        radioName: '查找'\n    },\n    spinning: false\n}\n\nexport { Item, SubMenu };\nexport default Console;\n\n\n\n\n","import { IColorConfig } from \"../../types\";\n\n/**\n * 该文件用于配置某些组件的默认 props\n */\n\nexport const defaultGeoColor: IColorConfig = {\n    defaultColor: 'wheat',\n    activeColor: 'orange',\n    hoverColor: 'skyblue',\n    lockColor: '#8076a3'\n}\n","import { useEffect, useRef, useState, forwardRef } from \"react\";\nimport { RoundedBox, Text } from \"@react-three/drei\";\nimport { animated, config, useSpring } from \"@react-spring/three\";\nimport { IGeometryProps } from \"../../types\";\nimport { defaultGeoColor } from \"../../configs/page/defaultConfig\";\n\nexport interface ICube3dProps extends IGeometryProps { }\n\nconst Cube3d: React.FC<ICube3dProps> = forwardRef<any, ICube3dProps>((props, ref) => {\n    const {\n        args,\n        position,\n        isActive,\n        isLock,\n        value,\n        colorConfig,\n        disappear\n    } = props;\n\n    const [isHover, setIsHover] = useState(false)\n    const [isClick, setIsClick] = useState(false)\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    /** 配置扩缩动画效果 */\n    const { scale } = useSpring({\n        reverse: disappear,\n        from: { scale: 0 },\n        to: { scale: isClick ? 1.10 : 1 },\n        config: disappear ? config.default : config.wobbly\n    })\n\n    /** 配置颜色过渡效果 */\n    const { color } = useSpring({\n        color: (\n            isClick ? colorConfig?.activeColor :\n                isHover ? colorConfig?.hoverColor :\n                    isLock ? colorConfig?.lockColor : colorConfig?.defaultColor\n        )\n    })\n\n    /** 扫描数组的时候，如果改变了 active 属性，则给它设置一个点击效果 */\n    useEffect(() => {\n        isActive ? setIsClick(true) : setIsClick(false);\n    }, [isActive])\n\n\n    return (\n        <animated.mesh\n            scale={scale}\n            position={position}\n            ref={ref}\n        >\n            <Text\n                fontSize={0.5}\n                color='black'\n            >\n                {value}\n            </Text>\n            <RoundedBox\n                args={args}\n                ref={meshRef}\n                onClick={() => setIsClick(!isClick)}\n                onPointerOver={() => setIsHover(true)}\n                onPointerOut={() => setIsHover(false)}\n            >\n                <animated.meshPhongMaterial\n                    color={color}\n                    opacity={0.5}\n                    transparent={true}\n                />\n            </RoundedBox>\n        </animated.mesh>\n    )\n})\n\nCube3d.defaultProps = {\n    colorConfig: defaultGeoColor\n}\n\nexport default Cube3d;","import { IPageConfig } from \"../../types\";\n\nlet config: IPageConfig = {\n    geoBaseDistance: 2,\n    geoNumRange: [3, 7],\n    geoValueRange: [3, 37],\n    geoBasePosY: 0,\n    cameraPosZ: 19,\n    animationSpeed: 800,\n}\n\n\nexport default config;","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useFrame } from '@react-three/fiber'\nimport Cube3d, { ICube3dProps } from '../../../components/Cube3d/cube3d';\nimport config from '../config'\n\ninterface ISortCube3dProps extends ICube3dProps {\n    sortIndexes: number[];\n    sortIndex: number;\n    startPosX: any;\n}\n\nconst SortCube3d: React.FC<ISortCube3dProps> = (props) => {\n\n    const {\n        sortIndexes,\n        sortIndex,\n        startPosX,\n        value,\n        ...restProps\n    } = props;\n\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    /** 根据传入的排序下标，获取到 cube 所在的 X 坐标 */\n    const getPosX = (sortIndex: number) => startPosX + (sortIndex * config.geoBaseDistance);\n\n    /** 移动元素时，获取其起始位置 */\n    const getOrginPosX = () => {\n        return getPosX(sortIndex);\n    }\n\n    /** 移动元素时，获取其目标位置 */\n    const getTargetPosX = () => {\n        return getPosX(sortIndexes[sortIndexes.length - 1]);\n    }\n\n    const oldPosX = getOrginPosX();\n    const targetPosX = getTargetPosX();\n\n\n    useFrame(() => {\n\n        const delta = Math.abs(oldPosX - targetPosX) / (config.animationSpeed / 20);\n\n        // 如果当前 sortIndex 需要改变\n        if (delta) {\n\n            // mesh 需要往右移\n            if (oldPosX - targetPosX < 0 && meshRef.current.position.x < targetPosX) {\n                meshRef.current.translateX(delta);\n                if (meshRef.current.position.x >= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n\n            // mesh 需要往左移\n            else if (oldPosX - targetPosX > 0 && meshRef.current.position.x > targetPosX) {\n                meshRef.current.translateX(-delta);\n                if (meshRef.current.position.x <= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n        }\n    })\n\n    return (\n        <Cube3d\n            args={[1, value ? value * 0.2 : 0, 1]}\n            value={value}\n            ref={meshRef}\n            {...restProps}\n        />\n    )\n}\n\nSortCube3d.defaultProps = {\n    colorConfig: {\n        defaultColor: 'wheat',\n        activeColor: 'orange',\n        hoverColor: 'skyblue',\n        lockColor: '#8076a3'\n    }\n}\n\nexport default React.memo(SortCube3d);","import * as THREE from 'three'\nimport { Spin } from 'antd';\nimport { Canvas } from '@react-three/fiber';\nimport { Suspense, useEffect, useRef } from 'react';\nimport { Environment, Html, OrbitControls, PerspectiveCamera, useProgress } from \"@react-three/drei\";\nimport './scene3d.scss'\n\nfunction SceneLoader(props: any) {\n    const { progress } = useProgress();\n    const { onLoaded } = props;\n    useEffect(() => {\n        if (progress === 100) {\n            onLoaded?.();\n        }\n    }, [progress])\n\n    return (\n        <Html center style={{ marginTop: '200px' }}>\n            <Spin size='large' />\n        </Html>\n    );\n}\n\ninterface IScene3dProps {\n    /** 场景加载完毕后的回调 */\n    onLoaded?: () => void;\n    /** 设置相机的z坐标 */\n    cameraPosZ?: number;\n}\n\nconst Scene3d: React.FC<IScene3dProps> = (props) => {\n    const {\n        children,\n        cameraPosZ,\n        onLoaded\n    } = props;\n\n    const cameraRef = useRef<THREE.PerspectiveCamera>(null!);\n\n    // useEffect(() => {\n    //     cameraRef.current?.lookAt(new THREE.Vector3(10, 10, 1))\n    // })\n\n\n    // const [cameraPos, setCameraPos] = useState<THREE.Vector3>(new THREE.Vector3(0, 0, 5));\n\n    // const upDate = () => {\n    //     // console.log(123);\n    //     // return new THREE.Camera()\n    // }\n\n\n    // const handleKeyDown = (ev: KeyboardEvent) => {\n    //     // const delta = new THREE.Clock(true).getDelta();\n    //     const moveDistance = 1;\n    //     switch (ev.key) {\n    //         case 'w':\n    //             // setCameraPos((pre) => (new THREE.Vector3(pre.x, pre.y, pre.z - moveDistance)));\n    //             break;\n    //         case 'a':\n    //             setCameraPos((pre) => (new THREE.Vector3(pre.x - moveDistance, pre.y, pre.z)));\n    //             break;\n    //         case 'd':\n    //             setCameraPos((pre) => (new THREE.Vector3(pre.x + moveDistance, pre.y, pre.z)));\n    //             break;\n    //         case 's':\n    //             setCameraPos((pre) => (new THREE.Vector3(pre.x, pre.y, pre.z + moveDistance)));\n\n    //             break;\n    //     }\n    // }\n\n    // useEffect(() => {\n    //     document.addEventListener('keydown', handleKeyDown);\n    //     return () => {\n    //         document.removeEventListener('keydown', handleKeyDown);\n    //     }\n    // }, [])\n\n\n\n    // useEffect(() => {\n    //     if (cameraRef.current) {\n    //         cameraRef.current.lookAt(new THREE.Vector3(0, -10, 16))\n    //     }\n    //     // console.log(cameraRef.current);\n    //     // cameraRef.current?.lookAt(new THREE.Vector3(0, -10, 16))\n    // })\n\n\n    return (\n        <div className='scene3d-warp'>\n            <Canvas>\n                <PerspectiveCamera\n                    ref={cameraRef}\n                    makeDefault\n                    position={[0, 0, cameraPosZ as number]}\n                />\n                <ambientLight intensity={0.3} />\n                <directionalLight color=\"white\" position={[1, 1, 1]} />\n\n                <Suspense fallback={<SceneLoader onLoaded={onLoaded} />}>\n                    {/** <Reflector\n                    resolution={1024}\n                    args={[10, 10]}\n                    mirror={0.75}\n                    // mixBlur={mixBlur || 0}\n                    mixStrength={1}\n                    rotation={[-Math.PI / 2, 0, Math.PI / 2]}\n                    minDepthThreshold={0.8}\n                    maxDepthThreshold={1.2}\n                    // depthScale={depthScale || 0}\n                    depthToBlurRatioBias={0.2}\n                    debug={0}\n                    // distortion={distortion || 0}\n                    // distortionMap={distortionMap}\n                >\n                    \n                    {(Material, props) => (\n                        <Material\n                            color=\"#ddd\"\n                            metalness={0}\n                            // roughnessMap={roughness}\n                            roughness={1}\n                            // normalMap={normal}\n                            // normalScale={_normalScale}\n                            {...props}\n                        />\n                    )}\n                </Reflector> */}\n                    {/** <TransformControls> */}\n                    {children}\n                    {/** </TransformControls> */}\n\n\n                    <OrbitControls\n                        maxDistance={30}\n                    />\n                    <Environment\n                        // preset='night'  \n\n                        background\n                        files={['ev.jpg', 'ev.jpg', 'ev.jpg', 'ev.jpg', 'ev.jpg', 'ev.jpg']}\n                        path='./'\n                    />\n                </Suspense>\n            </Canvas>\n        </div>\n\n    )\n}\n\nScene3d.defaultProps = {\n    cameraPosZ: 16\n}\n\nexport default Scene3d;","export const judgeSorted = (arr: number[]) => {\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] > arr[i + 1]) return false\n    }\n    return true\n}","import { ISortCube } from \"./store\";\nimport { ActionTypes, SeqType } from \"../../types\";\nimport config from './config'\nimport { judgeSorted } from \"../../utils/array\";\n\n/** 初始化 cubes */\nexport function initCubes(values: number[]): ISortCube[] {\n    return values.map((value, index) => ({\n        value,\n        isActive: false,\n        isLock: false,\n        disappear: false,\n        sortIndexes: [index],\n        sortIndex: index\n    }));\n}\n\n/** 根据数组长度，计算出第一个 cube 的 position 的 x 坐标 */\nexport function getStartPosX(arrLen: number): number {\n    return -(arrLen - 1) * config.geoBaseDistance / 2;\n}\n\n/** input输入的value解析为数组，如果输入的不合法则返回 undefined */\nexport function parseValue(value: string) {\n    // 去掉前后括，然后按照逗号划分，再转换成数字数组\n    let parseRes = value.substring(1, value.length - 1).split(/[,，]/g).map(item => +item);\n    // console.log(parseRes);\n\n    // 1. 格式不正确：不是类似 [x,xx,x] 这样的格式\n    // 2. 元素取值不能是小数 [1.2,3.2,3]\n    // 3. 元素不能为空 []\n\n    if (/\\[\\s*\\]/g.test(value)) return '数据不能为空'\n    return parseRes;\n}\n\n/** 返回初始化数组的细节 */\nexport function initSeq(values: number[]): SeqType {\n    const seq = [];\n    seq.push([{ type: ActionTypes.Disappear }])\n    seq.push([\n        { type: ActionTypes.Generate, payload: values },\n        { type: ActionTypes.Appear }])\n    return seq;\n}\n\n/** 返回向数组插值时，数组位移的细节 */\nexport function addEleSeq(arr: number[], newEle: number, targetIndex: number): SeqType {\n    // 记录动画细节\n    const seq = [];\n\n    if (targetIndex === arr.length) {\n        // 单独处理尾部添加\n\n        // 在 targetIndex 处添加元素\n        seq.push([{\n            type: ActionTypes.AddDone,\n            payload: {\n                newEle,\n                targetIndex\n            }\n        }]);\n\n    } else {\n        // 记录待位移的元素下标\n        const oldIndexes: number[] = [];\n        arr.forEach((_, i) => { i >= targetIndex && oldIndexes.push(i) });\n\n        // 记录位移元素的目标下标\n        const targetIndexes: number[] = [];\n        oldIndexes.forEach((value) => { targetIndexes.push(value + 1) });\n\n        // 先激活需要位移的元素\n        seq.push([{ type: ActionTypes.Active, payload: oldIndexes }]);\n\n        // 开始位移，并扩容出现新的下标\n        seq.push([{\n            type: ActionTypes.Move,\n            payload: {\n                oldIndexes,\n                targetIndexes\n            }\n        }]);\n\n        // 取消激活\n        seq.push([{ type: ActionTypes.Deactive, payload: targetIndexes }])\n\n        // 在 targetIndex 处添加元素\n        seq.push([{\n            type: ActionTypes.AddDone,\n            payload: {\n                newEle,\n                targetIndex\n            }\n        }]);\n    }\n\n    return seq;\n}\n\n/** 返回向数组删除元素时，数组位移的细节 */\nexport function deleteEleSeq(arr: number[], targetIndex: number): SeqType {\n\n    // 记录动画细节\n    const seq = [];\n\n    // 记录待位移的元素下标\n    const oldIndexes: number[] = [];\n    arr.forEach((_, i) => { i >= targetIndex && oldIndexes.push(i) });\n\n    // 记录位移元素的目标下标\n    const targetIndexes: number[] = [];\n    oldIndexes.forEach((value) => { targetIndexes.push(value - 1) });\n\n    // 先删除 targetIndex 位置的元素\n    seq.push([{ type: ActionTypes.Delete, payload: targetIndex }]);\n\n    // 激活需要位移的元素\n    seq.push([{ type: ActionTypes.Active, payload: oldIndexes }]);\n\n    // 开始位移，同时缩容\n    seq.push([{\n        type: ActionTypes.Move,\n        payload: {\n            oldIndexes,\n            targetIndexes\n        }\n    }]);\n\n    // 取消激活\n    seq.push([{ type: ActionTypes.Deactive, payload: targetIndexes }])\n\n    // 删除完毕，修改内部的 sortIndex\n    seq.push([{ type: ActionTypes.DeleteDone, payload: targetIndex }])\n\n    return seq;\n}\n\n/** 返回冒泡排序细节 */\nexport function bubbleSortSeq(arr: number[]): SeqType {\n    if (judgeSorted(arr)) return [[{ type: ActionTypes.Lock }]];\n    let backup = [...arr];\n    let sortSeq = [];\n    for (let i = backup.length - 1; i >= 0; i--) {\n        for (let j = 0; j < i; j++) {\n            sortSeq.push([{ type: ActionTypes.Active, payload: [j, j + 1] }]);\n            if (backup[j] > backup[j + 1]) {\n                let temp = backup[j];\n                backup[j] = backup[j + 1];\n                backup[j + 1] = temp;\n                sortSeq.push([{ type: ActionTypes.Swap, payload: [j, j + 1] }]);\n                sortSeq.push([{ type: ActionTypes.SwapDone, payload: [j, j + 1] }]);\n            }\n            sortSeq.push([{ type: ActionTypes.Deactive, payload: [j, j + 1] }])\n        }\n        sortSeq.push([{ type: ActionTypes.Lock, payload: [i] }]);\n    }\n    sortSeq.push([{ type: ActionTypes.SortDone }])\n    return sortSeq;\n}\n\n/** 返回选择排序细节 */\nexport function selectSortSeq(arr: number[]): SeqType {\n    if (judgeSorted(arr)) return [[{ type: ActionTypes.Lock }]];\n\n    let backup = [...arr];\n    let sortSeq = [];\n    for (let i = backup.length - 1; i >= 0; i--) {\n        let max = -Infinity;\n        let indexOfMax = -1;\n        for (let j = 0; j <= i; j++) {\n            sortSeq.push([{ type: ActionTypes.Active, payload: [j] }]);\n            if (backup[j] > max) {\n                sortSeq.push([{ type: ActionTypes.UnLock, payload: [indexOfMax] }])\n                max = backup[j];\n                indexOfMax = j;\n                sortSeq.push([{ type: ActionTypes.Lock, payload: [j] }])\n            }\n            sortSeq.push([{ type: ActionTypes.Deactive, payload: [j] }]);\n        }\n        sortSeq.push([{ type: ActionTypes.Lock, payload: [indexOfMax] }])\n        let temp = backup[i];\n        backup[i] = max;\n        backup[indexOfMax] = temp;\n        sortSeq.push([{ type: ActionTypes.Swap, payload: [indexOfMax, i] }])\n        sortSeq.push([{ type: ActionTypes.SwapDone, payload: [indexOfMax, i] }]);\n    }\n    sortSeq.push([{ type: ActionTypes.SortDone }]);\n    return sortSeq\n}\n\n/** 返回归并排序细节 */\nexport function mergeSortSeq(arr: number[], l: number, r: number, seq: SeqType) {\n    if (judgeSorted(arr)) return seq.push([{ type: ActionTypes.Lock }]);\n\n    if (l >= r) return;\n    let tmp = [...arr];\n\n    let mid = l + r >> 1;\n    mergeSortSeq(arr, l, mid, seq);\n    mergeSortSeq(arr, mid + 1, r, seq);\n\n    let k = 0, i = l, j = mid + 1;\n    while (i <= mid && j <= r) {\n        if (arr[i] <= arr[j]) {\n            seq.push([{ type: ActionTypes.Swap, payload: [k, i] }])\n            seq.push([{ type: ActionTypes.SwapDone, payload: [k, i] }])\n            tmp[k++] = arr[i++];\n            \n        }\n        else {\n            seq.push([{ type: ActionTypes.Swap, payload: [k, i] }])\n            seq.push([{ type: ActionTypes.SwapDone, payload: [k, i] }])\n            tmp[k++] = arr[j++];\n        }\n    }\n\n    while (i <= mid) {\n        seq.push([{ type: ActionTypes.Swap, payload: [k, i] }])\n        seq.push([{ type: ActionTypes.SwapDone, payload: [k, i] }])\n        tmp[k++] = arr[i++];\n    }\n    while (j <= r) {\n        seq.push([{ type: ActionTypes.Swap, payload: [k, i] }])\n        seq.push([{ type: ActionTypes.SwapDone, payload: [k, i] }])\n        tmp[k++] = arr[j++];\n    }\n\n    // for (i = l, j = 0; i <= r; i++, j++) arr[i] = tmp[j];\n\n}\n\n/** 返回快速排序细节 */\nexport function quickSortSeq(arr: number[], l: number, r: number, sortSeq: SeqType) {\n    if (judgeSorted(arr)) return sortSeq.push([{ type: ActionTypes.Lock }]);\n    if (l >= r) return;\n\n    let i = l - 1, j = r + 1, x = arr[l + r >> 1];\n    while (i < j) {\n        do {\n            i++;\n            sortSeq.push([{ type: ActionTypes.Active, payload: [i] }]);\n            sortSeq.push([{ type: ActionTypes.Deactive, payload: [i] }]);\n        } while (arr[i] < x);\n        // sortSeq.push({ type: ActionTypes.Lock, payload: [i] });\n\n        do {\n            j--;\n            sortSeq.push([{ type: ActionTypes.Active, payload: [j] }]);\n            sortSeq.push([{ type: ActionTypes.Deactive, payload: [j] }]);\n        } while (arr[j] > x);\n        // sortSeq.push({ type: ActionTypes.Lock, payload: [j] });\n\n        if (i < j) {\n            sortSeq.push([{ type: ActionTypes.Swap, payload: [i, j] }])\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            sortSeq.push([{ type: ActionTypes.SwapDone, payload: [i, j] }]);\n        }\n    }\n    quickSortSeq(arr, l, j, sortSeq);\n    quickSortSeq(arr, j + 1, r, sortSeq);\n}\n\n\n\n","import { ActionTypes, IBaseState, IReducer, OpeDetailTypes } from \"../../types\";\nimport { randomArr, randomNum } from \"../../utils\";\nimport { getStartPosX, initCubes } from \"./utils\";\nimport config from './config'\nimport { ICube3dProps } from \"../../components/Cube3d/cube3d\";\n\nexport interface ISortCube extends ICube3dProps {\n    // 记录 cube 将要经历或者已经历过的下标\n    sortIndexes: number[];\n    // 记录 cube 当前页面中正处于的下标\n    sortIndex: number;\n}\n\nexport interface IState extends IBaseState {\n    // 用来表示数组中各值的实时位置\n    values: number[];\n    // 用来表示每个 cube 的属性，其元素位置无意义，其中 sortIndex 才是对应的 values 的下标\n    cubes: ISortCube[];\n    // 第一个cube的起始x坐标\n    startPosX: number;\n}\n\nexport const initState: IState = {\n    values: randomArr(randomNum(config.geoNumRange), config.geoValueRange),\n    cubes: [],\n    loading: false,\n    disappearAll: false,\n    startPosX: 0,\n    opeDetails: []\n}\n\nexport const reducer: IReducer<IState> = (state = initState, action) => {\n\n    const { type, payload } = action;\n\n    switch (type) {\n\n        case ActionTypes.Loading:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case ActionTypes.CancelLoading:\n            return {\n                ...state,\n                loading: false\n            }\n\n        case ActionTypes.Generate: {\n            return {\n                ...state,\n                values: payload,\n                cubes: initCubes(payload),\n                startPosX: getStartPosX(payload.length),\n                opeDetails: [{ type: OpeDetailTypes.Default, payload }]\n            }\n        }\n\n        case ActionTypes.Appear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, disappear: false })),\n                    disappearAll: false,\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Disappear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, disappear: true })),\n                    disappearAll: true\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Active:\n            return {\n                ...state,\n                cubes: state.cubes.map(\n                    (item) => (payload?.includes(item.sortIndexes[item.sortIndexes.length - 1]) ? { ...item, isActive: true } : { ...item })\n                ),\n                sortDone: false\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n                cubes: state.cubes.map(\n                    (item) => payload?.includes(item.sortIndexes[item.sortIndexes.length - 1]) ? { ...item, isActive: false } : { ...item }\n                )\n            }\n\n        case ActionTypes.Lock: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, isLock: true }))\n                }\n            } else {\n                return {\n                    ...state,\n                    cubes: state.cubes.map(\n                        (item) => payload?.includes(item.sortIndexes[item.sortIndexes.length - 1]) ? { ...item, isLock: true } : { ...item }\n                    )\n                }\n            }\n        }\n\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n                cubes: state.cubes.map(\n                    (item) => payload?.includes(item.sortIndexes[item.sortIndexes.length - 1]) ? { ...item, isLock: false } : { ...item }\n                )\n            }\n\n        case ActionTypes.Swap: {\n\n            // 取出需要交换的两个下标\n            let index1 = (payload as number[])[0];\n            let index2 = (payload as number[])[1];\n\n            // 向 cube 对应的 sortIndexes 中 push 新的下标\n            const newCubes: ISortCube[] = state.cubes.map((item) => {\n                const curSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                if (curSortIndex === index1) {\n                    const newSortIndexes = [...item.sortIndexes, index2]\n                    return { ...item, sortIndexes: newSortIndexes }\n                } else if (curSortIndex === index2) {\n                    const newSortIndexes = [...item.sortIndexes, index1]\n                    return { ...item, sortIndexes: newSortIndexes }\n                }\n                return { ...item };\n            })\n\n            // 交换 values 的值\n            let newValues = [...state.values];\n            let temp = newValues[index1];\n            newValues[index1] = newValues[index2];\n            newValues[index2] = temp;\n\n            const newOpeDetail = {\n                type: OpeDetailTypes.Swap,\n                payload: {\n                    indexes: [index1, index2],\n                    curValues: [...newValues]\n                }\n            }\n\n            return {\n                ...state,\n                cubes: newCubes,\n                opeDetails: [...state.opeDetails, newOpeDetail],\n                values: newValues\n            }\n        }\n\n        case ActionTypes.SwapDone: {\n\n            // 交换完毕后，将对应的cube的sortIndex改为最新的sortIndex\n            const newCubes: ISortCube[] = state.cubes.map((item) => {\n                const newSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                if (item.sortIndex !== newSortIndex) return { ...item, sortIndex: newSortIndex }\n                return { ...item }\n            })\n\n            return {\n                ...state,\n                cubes: newCubes,\n            }\n        }\n\n        case ActionTypes.SortDone:\n            return {\n                ...state,\n                sortDone: true\n            }\n\n        case ActionTypes.Move: {\n            const { oldIndexes, targetIndexes }: { oldIndexes: number[], targetIndexes: number[] } = payload;\n            // 把包含在 oldIndexes 中的 sortIndex 找出来\n            const newCubes = state.cubes.map((item) => {\n                // 看 sortIndex 在 oldIndexes 中处于哪个位置，也对应 targetIndexes 的位置\n                let i = oldIndexes.findIndex((value) => value === item.sortIndex);\n                // 如果找到了，则往 sortIndexes 中添加 targetIndexes[i]\n                if (i >= 0) {\n                    return {\n                        ...item,\n                        sortIndexes: [...item.sortIndexes, targetIndexes[i]]\n                    }\n                }\n                return { ...item }\n            })\n\n\n            let newValues: number[] = [...state.values];\n\n            let newOpeDetail;\n\n            // 判断是扩容还是缩容\n            if (targetIndexes[0] > oldIndexes[0]) {\n                // 扩容下标\n                newValues.push(-1);\n            } else {\n                // 缩容下标\n                newValues.splice(oldIndexes[0], 1);\n                newOpeDetail = { type: OpeDetailTypes.Delete, payload: { index: oldIndexes[0], value: state.values[oldIndexes[0]], curValues: [...newValues] } }\n            }\n\n            return {\n                ...state,\n                cubes: newCubes,\n                values: newValues,\n                opeDetails: newOpeDetail ? [...state.opeDetails, newOpeDetail] : [...state.opeDetails]\n            }\n        }\n\n        case ActionTypes.AddDone: {\n            const { newEle, targetIndex } = payload;\n\n            // 生成新 cube\n            const newCube: ISortCube = {\n                sortIndex: targetIndex,\n                sortIndexes: [targetIndex],\n                value: newEle\n            }\n\n            // 更新 cube 的 sortIndex 到最新\n            let newCubes = state.cubes.map((item, i) => {\n                const curSortIndex = item.sortIndex;\n                const newSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                if (curSortIndex !== newSortIndex) {\n                    return { ...item, sortIndex: newSortIndex };\n                }\n                return { ...item };\n            })\n\n            // 添加新 cube\n            newCubes.push(newCube);\n\n            // 更新 values\n            let newValues = [...state.values];\n            newValues.splice(targetIndex, 0, newEle);\n            if (targetIndex !== state.values.length) newValues.pop();\n\n            const newOpeDetail = { type: OpeDetailTypes.Add, payload: { index: targetIndex, value: newEle, curValues: [...newValues] } }\n\n            return {\n                ...state,\n                cubes: newCubes,\n                values: newValues,\n                opeDetails: [...state.opeDetails, newOpeDetail]\n            }\n        }\n\n        case ActionTypes.Delete: {\n            const newCubes = state.cubes.map((item) => item.sortIndex === payload ? { ...item, disappear: true } : { ...item });\n\n            return {\n                ...state,\n                cubes: newCubes\n            }\n        }\n\n        case ActionTypes.DeleteDone: {\n\n            let newCubes = [...state.cubes];\n\n            // 先把删除的元素真正意义上从 cubes 中删除\n            newCubes.splice(payload, 1);\n\n            // 更新 cube 的 sortIndex 到最新\n            newCubes = state.cubes.map((item) => {\n                const curSortIndex = item.sortIndex;\n                const newSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                if (curSortIndex !== newSortIndex) {\n                    return { ...item, sortIndex: newSortIndex };\n                }\n                return { ...item };\n            })\n\n            return {\n                ...state,\n                cubes: newCubes\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n","import { useEffect, useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, PageHeader, Steps, message } from 'antd';\nimport { BarChartOutlined, DotChartOutlined } from '@ant-design/icons';\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport SortCube3d from './SortCube3d/sortCube3d';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { addEleSeq, bubbleSortSeq, deleteEleSeq, getStartPosX, initCubes, parseValue, quickSortSeq, initSeq, selectSortSeq, mergeSortSeq } from './utils';\nimport { OpeDetailTypes, IReducer, SeqType } from '../../types';\nimport { initState, IState, reducer } from './store';\nimport config from './config'\nimport { root } from '../../configs/router/config';\nimport { excuteSeq, randomArr, randomNum } from '../../utils';\n\nconst { Step } = Steps;\n\nconst Sort = () => {\n    const history = useHistory();\n\n    const [state, dispatch] = useReducer<IReducer<IState>, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n            cubes: initCubes(state.values),\n            startPosX: getStartPosX(state.values.length),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: initState.values }]\n        }\n    })\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 渲染器生成数组 */\n    const handleRender = (value: string) => {\n        const parseRes = parseValue(value);\n        if (Array.isArray(parseRes)) {\n            let sequence = initSeq(parseRes);\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n        } else {\n            message.warning(parseRes)\n        }\n    }\n\n    /** 随机生成数组 */\n    const handleRandom = () => {\n        let sequence = initSeq(randomArr(randomNum(config.geoNumRange), config.geoValueRange));\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 处理冒泡排序 */\n    const handleBubbleSort = () => {\n        let sequence = bubbleSortSeq(state.values);\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 处理选择排序 */\n    const handleSelectSort = () => {\n        let sequence = selectSortSeq(state.values);\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 处理快速排序 */\n    const handleQuickSort = () => {\n        let sequence: any[] = [];\n        quickSortSeq([...state.values], 0, state.values.length - 1, sequence);\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 处理添加元素 */\n    const handleAddEle = (index: number, value: number) => {\n\n        if (state.values.length < config.geoNumRange[1] + 3) {\n            if (index > state.values.length || index < 0) {\n                message.warning('输入的序号不合法')\n            } else {\n                const sequence = addEleSeq(state.values, value, index);\n                excuteSeq(sequence, config.animationSpeed, dispatch);\n            }\n\n        } else {\n            message.warning(`添加失败，数组最大容量为${config.geoNumRange[1] + 3}`)\n        }\n    }\n\n    /** 处理删除元素 */\n    const handleDeleteEle = (index: number, value: number) => {\n        if (state.values.length > 0) {\n            if (index > state.values.length - 1 || index < 0) {\n                message.warning('输入的序号不合法')\n            } else {\n                const sequence = deleteEleSeq(state.values, index);\n                excuteSeq(sequence, config.animationSpeed, dispatch);\n            }\n        } else {\n            message.warning('删除失败，当前数组为空')\n        }\n    }\n\n    const handleMergeSort = () => {\n        const arr = [3, 2, 1];\n        const seq: SeqType = [];\n        mergeSortSeq(arr, 0, arr.length - 1, seq);\n        excuteSeq(seq, config.animationSpeed, dispatch)\n        // console.log(arr);\n    }\n\n    /** 处理动画速度改变 */\n    const handleSliderChange = (x: number) => {\n        config.animationSpeed = -7.95 * x + 1000\n    }\n\n\n\n    return (\n        <div className='sort-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace(root)\n                    window.location.reload();\n                }}\n                title='排序'\n            />\n            <div className='main'>\n                <Scene3d\n                    onLoaded={handleSceneLoaded}\n                    cameraPosZ={config.cameraPosZ}\n                >\n                    {\n                        state.cubes.map((item, index) => (\n                            <SortCube3d\n                                key={index + '@'}\n                                sortIndexes={item.sortIndexes}\n                                sortIndex={item.sortIndex}\n                                value={item.value}\n                                startPosX={state.startPosX}\n                                isActive={item.isActive}\n                                isLock={item.isLock}\n                                // 由于 cube 的重心决定其位置，那么高度变化会导致其底部覆盖掉下面的 text，所以要改变其重心位置\n                                position={[state.startPosX + (item.sortIndex * config.geoBaseDistance), ((item.value as number) * 0.2) / 2 + config.geoBasePosY, 0]}\n                                disappear={item.disappear}\n                            />\n                        ))\n                    }\n                    {\n                        state.values.map((_, index) => (\n                            <Text\n                                key={index + '*'}\n                                fillOpacity={state.disappearAll ? 0 : 1}\n                                color='black'\n                                fontSize={0.5}\n                                position={[state.startPosX + (index * config.geoBaseDistance), -1 + config.geoBasePosY, 0]}\n                            >\n                                {index}\n                            </Text>\n                        ))\n                    }\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'flex' : 'none' }}\n                    radioGroup={[1, 1, 0]}\n                    addConfig={{\n                        hasIndex: true,\n                        hasValue: true,\n                        indexRange: [0, state.values.length],\n                        valueRange: config.geoValueRange,\n                        radioName: '添加'\n                    }}\n                    deleteConfig={{\n                        hasIndex: true,\n                        hasValue: false,\n                        indexRange: [0, state.values.length - 1],\n                        radioName: '删除'\n                    }}\n                    onSliderChange={handleSliderChange}\n                    onAdd={handleAddEle}\n                    onDelete={handleDeleteEle}\n                    spinning={state.loading}\n                    onRender={handleRender}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handleBubbleSort}>冒泡排序</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handleSelectSort}>选择排序</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handleQuickSort}>快速排序</Button>\n\n                            </div>\n                            {/* <div className='row'> */}\n                                {/* <Button icon={<BarChartOutlined />} onClick={handleMergeSort}>归并排序</Button> */}\n                            {/* </div> */}\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.Swap:\n                                        return (\n                                            <Step\n                                                key={i + 'step'}\n                                                title={`交换元素: i1=${payload.indexes[0]}, i2=${payload.indexes[1]}`}\n                                                description={`当前数组: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Add:\n                                        return (\n                                            <Step\n                                                key={i + 'step'}\n                                                title={`新增元素: i=${payload.index}, v=${payload.value}`}\n                                                description={`当前数组: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Delete:\n                                        return (\n                                            <Step\n                                                key={i + 'step'}\n                                                title={`删除元素: i=${payload.index}, v=${payload.value}`}\n                                                description={`当前数组: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n                                    default:\n                                        return (\n                                            <Step\n                                                key={i + 'step'}\n                                                title={`当前数组: [${payload.toString()}]`}\n                                            />\n                                        )\n                                }\n                            })}\n\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    {/* <SubMenu\n                        key='item2'\n                        icon={<BarChartOutlined />}\n                        title='排序'\n                    >\n                        <Item onClick={handleBubbleSort}>冒泡排序</Item>\n                        <Item onClick={handleSelectSort}>选择排序</Item>\n                        <Item>插入排序</Item>\n                        <Item onClick={handleQuickSort}>快速排序</Item>\n                        <Item>归并排序</Item>\n                    </SubMenu> */}\n                </Console>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Sort;","import { ISpherePageConfig } from \"../../types\";\nimport { Points } from \"../../types\";\n\nlet config: ISpherePageConfig = {\n    geoBaseDistance: 2,\n    geoNumRange: [5, 10],\n    geoValueRange: [10, 70],\n    geoBasePosY: 3,\n    cameraPosZ: 21,\n    animationSpeed: 400,\n    maxDeepth: 3\n}\n\n/** 满二叉树的各点坐标 */\nexport const cdnOfNodes: Points = [\n    // 第一排\n    [0, 5 + config.geoBasePosY, 0],\n    // 第二排\n    [-4, 2 + config.geoBasePosY, 0], [4, 2 + config.geoBasePosY, 0],\n    // 第三排\n    [-6, -1 + config.geoBasePosY, 0], [-2, -1 + config.geoBasePosY, 0], [2, -1 + config.geoBasePosY, 0], [6, -1 + config.geoBasePosY, 0],\n    // 第四排\n    [-7, -4 + config.geoBasePosY, 0], [-5, -4 + config.geoBasePosY, 0], [-3, -4 + config.geoBasePosY, 0], [-1, -4 + config.geoBasePosY, 0], [1, -4 + config.geoBasePosY, 0], [3, -4 + config.geoBasePosY, 0], [5, -4 + config.geoBasePosY, 0], [7, -4 + config.geoBasePosY, 0]\n]\n\nexport default config;","import { randomNum } from './index';\nimport { ActionTypes, Range } from '../types';\nimport { log } from './math';\nimport { ISphere3dProps } from '../components/Sphere3d/sphere3d';\nimport { IBSTSphere3d } from '../pages/BinarySearchTree/store';\n\n\n/** input输入的value解析为数组，如果输入的不合法则返回 undefined */\nexport function parseValue(value: string) {\n    // 去掉前后括，然后按照逗号划分，再转换成数字数组\n    let parseRes = value.substring(1, value.length - 1).split(/[,，]/g).map(item => +item);\n\n    return parseRes.map((value) => isNaN(value) ? null : value);\n}\n\n/** 返回初始化二叉树的细节 */\nexport function initSeq(values: (number | null)[]) {\n    const seq = [];\n    seq.push([{ type: ActionTypes.Disappear }])\n    seq.push([\n        { type: ActionTypes.Generate, payload: values },\n        { type: ActionTypes.Appear }])\n    return seq;\n}\n\n/** 传入结点下标，返回二叉树中以该结点为根结点的子树 */\nexport function getSubTree(binaryTree: (number | null)[], indexOfNode: number) {\n    const queue: any[] = [];\n    const subTree: { value: number, index: number, dir: 'l' | 'r' }[] = [];\n\n    if (binaryTree.length !== 0) {\n        queue.push({ value: binaryTree[indexOfNode], index: indexOfNode });   //根节点进队列\n    }\n    //队列不为空判断\n    while (queue.length !== 0) {\n\n        const lChildV = getLChildValue(binaryTree, queue[0].index);\n        const rChildV = getRChildValue(binaryTree, queue[0].index);\n\n        //如果有左孩子，leftChild入队列\n        if (lChildV || lChildV === 0) {\n            queue.push({ value: lChildV, index: queue[0].index * 2 + 1, dir: 'l' })\n        }\n\n        //如果有右孩子，rightChild入队列\n        if (rChildV || rChildV === 0) {\n            queue.push({ value: rChildV, index: queue[0].index * 2 + 2, dir: 'r' })\n        }\n        //已经遍历过的节点出队列\n        subTree.push(queue.shift())\n    }\n    return subTree;\n}\n\n/** 格式化二叉树：将spheres中的空元素设置为value为空的sphere */\nexport function formatSpheres<T extends ISphere3dProps>(spheres: T[]) {\n    return spheres.map<T>((sphere, i, arr) => {\n        if (!sphere) return { ...arr[0], value: null, sortIndex: i }\n        return sphere\n    })\n}\n\n/** 格式化二叉树：将数组内的空数组全部设置为null */\nexport function formatBinaryTree(binaryTree: (number | null)[]) {\n    for (let i = 0; i < binaryTree.length; i++) {\n        if (!binaryTree[i]) {\n            binaryTree[i] = null;\n        }\n    }\n    // 将尾部所有的null去掉\n    for (let i = binaryTree.length - 1; i >= 0; i--) {\n        if (binaryTree[i] !== null) {\n            binaryTree.length = i + 1;\n            break;\n        }\n    }\n    return [...binaryTree]\n}\n\n/** 将传入的二叉树数组转为字符串 */\nexport function treeToString(binaryTree: (number | null)[]) {\n    return '[' + binaryTree.map((value) => !value ? 'null' : value).toString() + ']'\n}\n\n/** 初始化二叉树sphere */\nexport function initSpheres(values: (number | null)[]): IBSTSphere3d[] {\n    return values.map((value, index) => ({\n        sortIndex: index,\n        sortIndexes: [index],\n        value,\n        indexDisappear: false\n    }))\n}\n\n/** 获取传入结点的父结点数据值 */\nexport function getFatherValue(binaryTree: (number | null)[], indexOfNode: number) {\n    return binaryTree[Math.floor((indexOfNode - 1) / 2)];\n}\n\n/** 获取传入结点的父结点的下标 */\nexport function getFatherIndex(indexOfNode: number) {\n    return Math.floor((indexOfNode - 1) / 2);\n}\n\n/** 获取传入结点子结点下标 */\nexport function getChildrenIndexes(binaryTree: (number | null)[], indexOfNode: number) {\n    let indexes: any[] = [undefined, undefined];\n    if (getLChildValue(binaryTree, indexOfNode)) indexes[0] = indexOfNode * 2 + 1;\n    if (getRChildValue(binaryTree, indexOfNode)) indexes[1] = indexOfNode * 2 + 2;\n    return indexes;\n}\n\n/** 获取传入结点的左孩子数据值 */\nexport function getLChildValue<T>(binaryTree: T[], indexOfNode: number) {\n    return binaryTree[indexOfNode * 2 + 1];\n}\n\n/** 获取传入结点的右孩子数据值 */\nexport function getRChildValue<T>(binaryTree: T[], indexOfNode: number) {\n    return binaryTree[indexOfNode * 2 + 2]\n}\n\n/** 为传入的结点设置左孩子 */\nexport function setLChild<T>(binaryTree: T[], indexOfNode: number, lChild: T) {\n    const root = binaryTree[indexOfNode];\n    if (root) binaryTree[indexOfNode * 2 + 1] = lChild;\n    else throw new Error('node is null');\n}\n\n/** 为传入的结点设置右孩子 */\nexport function setRChild<T>(binaryTree: T[], indexOfNode: number, rChild: T) {\n    const root = binaryTree[indexOfNode];\n    if (root) binaryTree[indexOfNode * 2 + 2] = rChild;\n    else throw new Error('node is null');\n}\n\n/** 根据传入的下标获取结点所在的二叉树层数 */\nexport function getDeepthByNodeIndex(indexOfNode: number) {\n    return Math.floor(log(2, indexOfNode + 1));\n}\n\n/** 获取二叉树层数 */\nexport function getMaxDeepth(binaryTree: (number | null)[]) {\n    return getDeepthByNodeIndex(binaryTree.length - 1);\n}\n\n/** 随机生成结点数为n的二叉树 */\nfunction binaryTreeGenerator(n: number, binaryTree: (number | null)[], nodeValueRange: Range, indexOfRoot: number,) {\n    if (n === 0) return;\n\n    // 左孩子的值\n    const lChildV = randomNum(nodeValueRange);\n    // 右孩子的值\n    const rChildV = randomNum(nodeValueRange);\n\n    // 根结点的左子树的结点个数\n    const leftN = randomNum([0, n - 1]);\n    const rightN = n - leftN - 1;\n\n    // 递归建立每棵子树\n    setLChild(binaryTree, indexOfRoot, leftN > 0 ? lChildV : null);\n    binaryTreeGenerator(leftN, binaryTree, nodeValueRange, indexOfRoot * 2 + 1)\n\n    setRChild(binaryTree, indexOfRoot, rightN > 0 ? rChildV : null);\n    binaryTreeGenerator(rightN, binaryTree, nodeValueRange, indexOfRoot * 2 + 2)\n}\n\n/** 生成层数小于3且结点数在 5 ～ 15 的二叉树 */\nexport function randomBinaryTree(nodeNumsRange: Range, nodeValueRange: Range, maxDeepth: number): (number | null)[] {\n\n    let cache = new Array(500);\n\n    // 如果生成的二叉树的层数大于了3则重新生成\n    while (getDeepthByNodeIndex(cache.length - 1) > 3) {\n        cache.fill(null);\n        cache[0] = randomNum(nodeValueRange);\n        binaryTreeGenerator(randomNum(nodeNumsRange), cache, nodeValueRange, 0,);\n\n        // 找到 cache 中最后一个不为 null 的元素的下标\n        for (let i = 500; i >= 0; i--) {\n            if (cache[i] !== null) {\n                cache.length = i + 1;\n                break;\n            }\n        }\n    }\n    return cache;\n}\n\n\n/** 判断二叉树的某个结点有几个子结点 */\nexport function judgeNode(binaryTree: (number | null)[], indexOfNode: number) {\n    let childNum = 0;\n    if (getLChildValue(binaryTree, indexOfNode)) childNum++;\n    if (getRChildValue(binaryTree, indexOfNode)) childNum++;\n    return childNum;\n}\n\n/** 获取二叉树前序遍历的细节 */\nexport function preOrderSeq(binaryTree: (number | null)[], indexOfNode: number, seq: any[]) {\n    seq.push([{ type: ActionTypes.Active, payload: indexOfNode }]);\n    // seq.push({ type: ActionTypes.ActiveLeft, payload: indexOfNode })\n    seq.push([{ type: ActionTypes.Deactive, payload: indexOfNode }]);\n    seq.push([{ type: ActionTypes.Lock, payload: indexOfNode }]);\n    if (getLChildValue(binaryTree, indexOfNode)) preOrderSeq(binaryTree, indexOfNode * 2 + 1, seq);\n    if (getRChildValue(binaryTree, indexOfNode)) preOrderSeq(binaryTree, indexOfNode * 2 + 2, seq);\n}\n\n/** 获取二叉树中序遍历的细节 */\nexport function inOrderSeq(binaryTree: (number | null)[], indexOfNode: number, seq: any[]) {\n    if (getLChildValue(binaryTree, indexOfNode)) inOrderSeq(binaryTree, indexOfNode * 2 + 1, seq);\n    seq.push([{ type: ActionTypes.Active, payload: indexOfNode }]);\n    // seq.push({ type: ActionTypes.ActiveRight, payload: indexOfNode })\n    seq.push([{ type: ActionTypes.Deactive, payload: indexOfNode }]);\n    seq.push([{ type: ActionTypes.Lock, payload: indexOfNode }])\n    if (getRChildValue(binaryTree, indexOfNode)) inOrderSeq(binaryTree, indexOfNode * 2 + 2, seq);\n}\n\n/** 获取二叉树后序遍历的细节 */\nexport function postOrderSeq(binaryTree: (number | null)[], indexOfNode: number, seq: any[]) {\n    if (getLChildValue(binaryTree, indexOfNode)) postOrderSeq(binaryTree, indexOfNode * 2 + 1, seq);\n    if (getRChildValue(binaryTree, indexOfNode)) postOrderSeq(binaryTree, indexOfNode * 2 + 2, seq);\n    seq.push([{ type: ActionTypes.Active, payload: indexOfNode }]);\n    // seq.push([{ type: ActionTypes.ActiveLeft, payload: indexOfNode }])\n    seq.push([{ type: ActionTypes.Deactive, payload: indexOfNode }]);\n    seq.push([{ type: ActionTypes.Lock, payload: indexOfNode }])\n}\n\n\n","/**\n * 计算对数\n * @param base 底数\n * @param truth 真数\n */\nexport function log(base: number, truth: number) {\n    return Math.log(truth) / Math.log(base)\n}","\nimport { ActionTypes, Range, SeqType } from '../../types';\nimport { randomArr, randomNum, swap } from '../../utils';\nimport { getFatherIndex } from '../../utils/binaryTree';\n\n\n/** 向二叉堆插入元素 */\nfunction addToBh(binaryHeap: number[], nodeV: number) {\n    binaryHeap.push(nodeV);\n\n    // 该新结点的下标\n    let nodeIndex = binaryHeap.length - 1;\n    // 获取该新结点的父结点\n    let fatherIndex = getFatherIndex(nodeIndex);\n\n    // 如果该父结点存在，且父结点的值小于这个新结点，则交换它们的位置 \n    while (fatherIndex >= 0 && binaryHeap[fatherIndex] < binaryHeap[nodeIndex]) {\n        swap(binaryHeap, fatherIndex, nodeIndex);\n\n        // 更新该结点下标\n        nodeIndex = fatherIndex;\n        // 更新该结点的父结点下标\n        fatherIndex = getFatherIndex(nodeIndex);\n    }\n}\n\n\n/** 向二叉堆添加元素的细节 */\nexport function addSeq(binaryHeap: number[], nodeV: number) {\n    const seq: SeqType = [];\n    const temp = [...binaryHeap];\n    temp.push(nodeV);\n\n    seq.push([{type: ActionTypes.Add, payload: nodeV}])\n\n\n    // 该新结点的下标\n    let nodeIndex = temp.length - 1;\n    // 获取该新结点的父结点\n    let fatherIndex = getFatherIndex(nodeIndex);\n\n    // 如果该父结点存在，且父结点的值小于这个新结点，则交换它们的位置 \n    while (fatherIndex >= 0 && temp[fatherIndex] < temp[nodeIndex]) {\n        swap(temp, fatherIndex, nodeIndex);\n        seq.push([{ type: ActionTypes.Active, payload: nodeIndex }, { type: ActionTypes.Active, payload: fatherIndex }])\n        seq.push([{ type: ActionTypes.Swap, payload: [nodeIndex, fatherIndex] }])\n        seq.push([{ type: ActionTypes.Deactive, payload: nodeIndex }, { type: ActionTypes.Deactive, payload: fatherIndex }])\n        seq.push([{ type: ActionTypes.SwapDone, payload: [nodeIndex, fatherIndex] }])\n\n\n        // 更新该结点下标\n        nodeIndex = fatherIndex;\n        // 更新该结点的父结点下标\n        fatherIndex = getFatherIndex(nodeIndex);\n    }\n    return seq;\n}\n\n\n/** 随机生成二叉堆的细节  */\nexport function randomBh(nodeNumsRange: Range, nodeValueRange: Range) {\n    const arr = randomArr(randomNum(nodeNumsRange), nodeValueRange)\n    const binaryHeap: number[] = [];\n    arr.forEach((value) => {\n        addToBh(binaryHeap, value);\n    })\n    return binaryHeap;\n}\n\n","import { ActionTypes, IBaseState, IReducer, OpeDetailTypes } from \"../../types\";\nimport { initSpheres, treeToString } from \"../../utils/binaryTree\";\nimport { IBinaryHeapSphere3dProps } from \"./BinaryHeapSphere3d/binaryHeapSphere3d\";\nimport config, { cdnOfNodes } from \"./config\";\nimport { randomBh } from \"./utils\";\n\nexport interface IBinaryHeapSphere3d extends IBinaryHeapSphere3dProps { }\n\nexport interface IState extends IBaseState {\n    values: number[];\n    geometries: IBinaryHeapSphere3d[];\n    opeDetails: any[];\n}\n\nexport const initState: IState = {\n    values: randomBh(config.geoNumRange, config.geoValueRange),\n    geometries: [],\n    opeDetails: [],\n    disappearAll: false,\n    loading: false\n}\n\nexport const reducer: IReducer<IState> = (state = initState, action): IState => {\n    const { type, payload } = action;\n    switch (type) {\n\n        case ActionTypes.Add: {\n            const newGeo = [...state.geometries];\n            newGeo.push({\n                sortIndex: newGeo.length,\n                sortIndexes: [newGeo.length],\n                value: payload,\n            })\n            const newValues = [...state.values];\n            newValues.push(payload)\n\n            const newOpeDetail = {\n                type: OpeDetailTypes.Add,\n                payload: {\n                    value: payload,\n                    cur: newValues\n                }\n            }\n\n            return {\n                ...state,\n                geometries: newGeo,\n                values: newValues,\n                opeDetails: [...state.opeDetails, newOpeDetail]\n            }\n        }\n\n        case ActionTypes.Swap: {\n            // 取出需要交换的两个下标\n            let index1 = (payload as number[])[0];\n            let index2 = (payload as number[])[1];\n\n            // 向 cube 对应的 sortIndexes 中 push 新的下标\n            const newGeo: IBinaryHeapSphere3d[] = state.geometries.map((item) => {\n                const curSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                if (curSortIndex === index1) {\n                    const newSortIndexes = [...item.sortIndexes, index2]\n                    return { ...item, sortIndexes: newSortIndexes }\n                } else if (curSortIndex === index2) {\n                    const newSortIndexes = [...item.sortIndexes, index1]\n                    return { ...item, sortIndexes: newSortIndexes }\n                }\n                return { ...item };\n            })\n\n            // 交换 values 的值\n            let newValues = [...state.values];\n            let temp = newValues[index1];\n            newValues[index1] = newValues[index2];\n            newValues[index2] = temp;\n\n            const newOpeDetail = {\n                type: OpeDetailTypes.Swap,\n                payload: {\n                    indexes: [index1, index2],\n                    cur: [...newValues]\n                }\n            }\n\n            return {\n                ...state,\n                geometries: newGeo,\n                opeDetails: [...state.opeDetails, newOpeDetail],\n                values: newValues\n            }\n        }\n\n        case ActionTypes.SwapDone: {\n\n            // 交换完毕后，将对应的cube的sortIndex改为最新的sortIndex\n            const newGeo: IBinaryHeapSphere3d[] = state.geometries.map((item) => {\n                const newSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                if (item.sortIndex !== newSortIndex) return { ...item, sortIndex: newSortIndex }\n                return { ...item }\n            })\n\n            return {\n                ...state,\n                geometries: newGeo,\n            }\n        }\n\n        case ActionTypes.Loading:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case ActionTypes.CancelLoading:\n            return {\n                ...state,\n                loading: false\n            }\n\n        case ActionTypes.Generate: {\n            return {\n                ...state,\n                values: payload,\n                geometries: initSpheres(payload),\n                opeDetails: [{ type: OpeDetailTypes.Default, payload: treeToString(payload) }]\n            }\n        }\n\n        case ActionTypes.Appear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    geometries: state.geometries.map((item) => ({ ...item, disappear: false })),\n                    disappearAll: false,\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Disappear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    geometries: state.geometries.map((item) => ({ ...item, disappear: true })),\n                    disappearAll: true\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Move: {\n\n\n            return {\n                ...state,\n            }\n        }\n\n        case ActionTypes.Active:\n            return {\n                ...state,\n                geometries: state.geometries.map((item) => ({\n                    ...item,\n                    isActive: payload === item.sortIndex ? true : item.isActive\n                }))\n            }\n\n        case ActionTypes.ActiveLeft:\n            return {\n                ...state,\n                geometries: state.geometries.map((item) => ({\n                    ...item,\n                    activeLeft: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.ActiveRight:\n            return {\n                ...state,\n                geometries: state.geometries.map((item) => ({\n                    ...item,\n                    activeRight: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n                geometries: state.geometries.map((item) => ({\n                    ...item,\n                    isActive: payload === item.sortIndex ? false : item.isActive\n                }))\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n                geometries: state.geometries.map(\n                    (item) => payload === item.sortIndex ? { ...item, isLock: true } : { ...item }\n                )\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n                geometries: state.geometries.map(\n                    (item) => (!payload && payload !== 0) ? { ...item, isLock: false } : (payload === item.sortIndex) ? { ...item, isLock: false } : { ...item }\n                )\n            }\n\n        default:\n            return state\n    }\n}","import { Line } from '@react-three/drei'\nimport { Points } from '../../types';\n\ninterface ILine3dProps {\n    points: Points;\n    hidden: boolean;\n    lineWidth?: number;\n    isActive?: boolean;\n}\n\nconst Line3d:React.FC<ILine3dProps> = (props) => {\n\n    const {\n        points,\n        hidden,\n        lineWidth,\n        isActive\n    } = props;\n\n    return (\n        <Line\n            // ref={}\n            lineWidth={lineWidth}\n            points={points}\n            color={isActive ? 'orange' : 'gray'}\n            opacity={hidden ? 0 : 1}\n            transparent={true}\n        />\n\n    )\n}\n\nLine3d.defaultProps = {\n    lineWidth: 1.5\n}\n\nexport default Line3d;","import { forwardRef, useEffect, useRef, useState } from 'react';\nimport { animated, config, useSpring } from '@react-spring/three';\nimport { Icosahedron, Text } from '@react-three/drei'\nimport { defaultGeoColor } from '../../configs/page/defaultConfig';\nimport { IGeometryProps } from '../../types';\n\nexport interface ISphere3dProps extends IGeometryProps {\n    /** 取值 */\n    value: number | null;\n    /** 结点的实际顺序 */\n    sortIndex: number;\n    /** 该sphere过去已存在或者未来将要到达的位置 */\n    sortIndexes: number[];\n    /** 左线条位置 */\n    lChildPos?: any;\n    /** 右线条位置 */\n    rChildPos?: any;\n    /** 激活左线条 */\n    activeLeft?: boolean;\n    /** 激活右线条 */\n    activeRight?: boolean;\n}\n\nconst Sphere3d: React.FC<ISphere3dProps> = forwardRef<any, ISphere3dProps>((props, ref) => {\n\n    const {\n        position,\n        value,\n        isActive,\n        isLock,\n        colorConfig,\n        disappear\n    } = props;\n\n    const [isHover, setIsHover] = useState(false)\n    const [isClick, setIsClick] = useState(false)\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    /** 配置颜色过渡效果 */\n    const { color } = useSpring({\n        color: (\n            isClick ? colorConfig?.activeColor :\n                isHover ? colorConfig?.hoverColor :\n                    isLock ? colorConfig?.lockColor : colorConfig?.defaultColor\n        )\n    })\n\n    /** 配置扩缩动画效果 */\n    const { scale } = useSpring({\n        reverse: disappear,\n        from: { scale: 0 },\n        to: { scale: isClick ? 1.20 : 1 },\n        config: disappear ? config.default : config.wobbly\n    })\n\n    /** 扫描数组的时候，如果改变了 active 属性，则给它设置一个点击效果 */\n    useEffect(() => {\n        isActive ? setIsClick(true) : setIsClick(false);\n    }, [isActive])\n\n    return (\n        <animated.mesh\n            position={position}\n            ref={ref}\n            scale={scale}\n        >\n            <Icosahedron\n                ref={meshRef}\n                args={[0.7, 10]}\n                onClick={() => setIsClick(!isClick)}\n                onPointerOver={() => setIsHover(true)}\n                onPointerOut={() => setIsHover(false)}\n            >\n                <Text\n                    position={[0, 0, 0.7]}\n                    fontSize={0.5}\n                    color='black'\n                >\n                    {value}\n                </Text>\n\n                <animated.meshPhongMaterial\n                    color={color}\n                    opacity={1}\n                />\n            </Icosahedron>\n        </animated.mesh>\n    )\n})\n\nSphere3d.defaultProps = {\n    colorConfig: defaultGeoColor\n}\n\nexport default Sphere3d;","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport Line3d from \"../../../components/Line3d/line3d\";\nimport Sphere3d, { ISphere3dProps } from \"../../../components/Sphere3d/sphere3d\";\nimport config, { cdnOfNodes } from '../config'\n\nexport interface IBinaryHeapSphere3dProps extends ISphere3dProps { }\n\nconst BinaryHeapSphere3d: React.FC<IBinaryHeapSphere3dProps> = (props) => {\n\n    const {\n        lChildPos,\n        rChildPos,\n        position,\n        activeLeft,\n        activeRight,\n        disappear,\n        sortIndex,\n        sortIndexes,\n        // position,\n        // value,\n        // isActive,\n        // isLock,\n        // colorConfig,\n        // lChildPos,\n        // rChildPos,\n        // disappear,\n        // sortIndex\n    } = props;\n\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    const oldPosX = cdnOfNodes[sortIndex][0];\n    const oldPosY = cdnOfNodes[sortIndex][1];\n\n    const targetPosX = cdnOfNodes[sortIndexes[sortIndexes.length - 1]][0];\n    const targetPosY = cdnOfNodes[sortIndexes[sortIndexes.length - 1]][1];\n\n    useFrame(() => {\n        const deltaX = Math.abs(oldPosX - targetPosX) / (config.animationSpeed / 20);\n        const deltaY = Math.abs(oldPosY - targetPosY) / (config.animationSpeed / 20);\n\n        // 如果当前sphere需要水平移动\n        if (deltaX) {\n\n            // sphere 需要往右移\n            if (oldPosX - targetPosX < 0 && meshRef.current.position.x < targetPosX) {\n                meshRef.current.translateX(deltaX);\n                if (meshRef.current.position.x >= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n\n            // sphere 需要往左移\n            else if (oldPosX - targetPosX > 0 && meshRef.current.position.x > targetPosX) {\n                meshRef.current.translateX(-deltaX);\n                if (meshRef.current.position.x <= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n        }\n\n        // 如果当前sphere需要竖直移动\n        if (deltaY) {\n\n            // sphere 需要往上移\n            if (oldPosY - targetPosY < 0 && meshRef.current.position.y < targetPosY) {\n                meshRef.current.translateY(deltaY);\n                if (meshRef.current.position.y >= targetPosY) {\n                    meshRef.current.position.y = targetPosY;\n                }\n            }\n\n            // sphere 需要往下移\n            else if (oldPosY - targetPosY > 0 && meshRef.current.position.y > targetPosY) {\n                meshRef.current.translateY(-deltaY);\n                if (meshRef.current.position.y <= targetPosY) {\n                    meshRef.current.position.y = targetPosY;\n                }\n            }\n        }\n    })\n\n    return (\n        <>\n            <Sphere3d\n                ref={meshRef as any}\n                {...props}\n            />\n            {\n                lChildPos &&\n                <Line3d\n                    hidden={disappear as boolean}\n                    points={[position, lChildPos]}\n                    isActive={activeLeft}\n                />\n            }\n            {\n                rChildPos &&\n                <Line3d\n                    hidden={disappear as boolean}\n                    points={[position, rChildPos]}\n                    isActive={activeRight}\n                />\n            }\n        </>\n    )\n}\n\nexport default BinaryHeapSphere3d;","import React, { useReducer, useState } from 'react'\nimport { useHistory } from 'react-router'\nimport { Text } from '@react-three/drei'\nimport { Button, PageHeader, Steps, message } from 'antd'\nimport { BarChartOutlined, DotChartOutlined } from '@ant-design/icons'\nimport Console, { Item, SubMenu } from '../../components/Console/console'\nimport Scene3d from '../../components/Scene3d/scene3d'\nimport { ActionTypes, IReducer, OpeDetailTypes } from '../../types'\nimport { cdnOfNodes } from './config'\nimport { initState, IState, reducer } from './store'\nimport BinaryHeapSphere3d from './BinaryHeapSphere3d/binaryHeapSphere3d'\nimport config from './config'\nimport { root } from '../../configs/router/config'\nimport { getLChildValue, getMaxDeepth, getRChildValue, initSeq, initSpheres, parseValue, treeToString } from '../../utils/binaryTree'\nimport { excuteSeq } from '../../utils'\nimport { addSeq, randomBh } from './utils'\n\nconst { Step } = Steps;\n\nconst BinaryHeap = () => {\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer<IState>, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n            geometries: initSpheres(state.values),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: treeToString(state.values) }]\n        }\n    });\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    const handleRender = (value: string) => {\n        const parseRes = parseValue(value);\n        if (parseRes) {\n            let sequence = initSeq(parseRes);\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n        } else {\n            message.warning('输入的数据格式有误，请按照 \"[1,3,8,2]\" 类似格式输入')\n        }\n    }\n\n    /** 添加元素 */\n    const handleAddEle = (index: number, value: number) => {\n        if (getMaxDeepth(state.values) === 4) {\n            message.warning('添加失败，二叉堆最大层数为4')\n        } else {\n            let sequence = addSeq(state.values, value);\n            excuteSeq(sequence, config.animationSpeed, dispatch)\n        }\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        let sequence = initSeq(randomBh(config.geoNumRange, config.geoValueRange));\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 处理动画速度改变 */\n    const handleSliderChange = (x: number) => {\n        config.animationSpeed = -7.95 * x + 1000\n    }\n\n\n    return (\n        <div className='binaryHeap-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace(root)\n                    window.location.reload();\n                }}\n                title='二叉堆'\n            />\n            <div className='main'>\n                <Scene3d\n                    onLoaded={handleSceneLoaded}\n                    cameraPosZ={config.cameraPosZ}\n                >\n                    {state.geometries.map((sphere, i) => {\n                        // 判断当前结点是否有左孩子\n                        const hasLChild = getLChildValue(state.geometries, sphere.sortIndex)?.value;\n\n                        // 获取左结点的位置(加上前面的这个判断是为了在删除元素时，会设置与之连接的父结点的那条线为null)\n                        const lChildPos = sphere.lChildPos !== null && getLChildValue(cdnOfNodes, sphere.sortIndex);\n\n                        // 判断当前结点是否有右孩子\n                        const hasRChild = sphere.rChildPos !== null && getRChildValue(state.geometries, sphere.sortIndex)?.value;\n\n                        // 获取右结点的位置\n                        const rChildPos = getRChildValue(cdnOfNodes, sphere.sortIndex);\n\n                        return (\n                            sphere.value && (\n                                <React.Fragment key={'sphere' + i}>\n                                    <BinaryHeapSphere3d\n                                        value={sphere.value}\n                                        sortIndex={sphere.sortIndex}\n                                        sortIndexes={sphere.sortIndexes}\n                                        position={cdnOfNodes[sphere.sortIndex]}\n                                        isActive={sphere.isActive}\n                                        activeLeft={sphere.activeLeft}\n                                        activeRight={sphere.activeRight}\n                                        isLock={sphere.isLock}\n                                        disappear={sphere.disappear}\n                                        lChildPos={hasLChild && lChildPos}\n                                        rChildPos={hasRChild && rChildPos}\n                                    />\n                                    <Text\n                                        position={[cdnOfNodes[i][0], cdnOfNodes[i][1] - 1.2, cdnOfNodes[i][2]]}\n                                        fontSize={0.4}\n                                        fillOpacity={!sphere.disappear && !state.disappearAll ? 1 : 0}\n                                        color='black'\n                                    >\n                                        {i}\n                                    </Text>\n                                </React.Fragment>\n                            )\n                        )\n                    })}\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'flex' : 'none' }}\n                    onSliderChange={handleSliderChange}\n                    radioGroup={[1, 0, 0]}\n                    onRender={handleRender}\n                    addConfig={{\n                        hasIndex: false,\n                        hasValue: true,\n                        radioName: '添加',\n                        valueRange: config.geoValueRange\n                    }}\n                    onAdd={handleAddEle}\n                    spinning={state.loading}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.Add: {\n                                        const { value, cur } = payload;\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`新增结点:  v=${value}`}\n                                                description={`当前满二叉树: ${treeToString(cur)}`}\n                                            />\n                                        )\n                                    }\n\n                                    case OpeDetailTypes.Swap: {\n                                        const { indexes, cur } = payload;\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`交换结点:  i=${indexes[0]}, v=${state.values[indexes[0]]} | i=${indexes[1]}, v=${state.values[indexes[1]]}`}\n                                                description={`当前满二叉树: ${treeToString(cur)}`}\n                                            />\n                                        )\n                                    }\n\n                                    default:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`当前二叉堆: ${payload}`}\n                                            />\n                                        )\n                                }\n                            })}\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n                </Console>\n\n            </div>\n        </div>\n    )\n}\n\nexport default BinaryHeap;","import React from 'react'\nimport Cube3d, { ICube3dProps } from '../../../components/Cube3d/cube3d';\n\ninterface IQueueCube3dProps extends ICube3dProps {\n}\n\nconst QueueCube3d: React.FC<IQueueCube3dProps> = (props) => {\n\n    return (\n        <Cube3d\n            args={[2, 1, 1]}\n            {...props}\n        />\n    )\n}\n\nexport default React.memo(QueueCube3d);","import { IPageConfig } from \"../../types\";\n\nlet config: IPageConfig = {\n    geoBaseDistance: 2.5,\n    geoNumRange: [3, 5],\n    geoValueRange: [0, 90],\n    geoBasePosY: 2,\n    cameraPosZ: 19,\n    animationSpeed: 400,\n\n}\n\n\nexport default config;","import { v4 as uuidv4 } from 'uuid';\nimport { IQueueCube } from \"./store\";\nimport { ActionTypes } from \"../../types\";\nimport config from './config'\n\n/** 根据数组长度，计算出第一个 cube 的 position 的 x 坐标 */\nexport function getStartPosX(arrLen: number): number {\n    return -(arrLen - 1) * config.geoBaseDistance / 2;\n}\n\nexport function initCubes(values: number[]): IQueueCube[] {\n    return values.map((value) => ({\n        value,\n        isActive: false,\n        isLock: false,\n        key: uuidv4()\n    }))\n}\n\n/** 返回初始化数组的细节 */\nexport function initSeq(values: number[]) {\n    const seq = [];\n    seq.push([{ type: ActionTypes.Disappear }])\n    seq.push([\n        { type: ActionTypes.Generate, payload: values },\n        { type: ActionTypes.Appear }])\n    return seq;\n}\n\n/** 返回入队细节 */\nexport function enqueueSeq(value: number, arrLen: number) {\n    let seq = [];\n    // 入队时自动激活\n    seq.push([{ type: ActionTypes.Enqueue, payload: value }])\n    seq.push([{ type: ActionTypes.Deactive, payload: arrLen }]);\n    return seq;\n}\n\n/** 返回出队细节 */\nexport function dequeueSeq() {\n    let seq = [];\n    // seq.push({ type: ActionTypes.Active, payload: 0 });\n    seq.push([{ type: ActionTypes.Disappear, payload: 0 }]);\n    seq.push([{ type: ActionTypes.Dequeue }])\n    return seq;\n}","import { v4 as uuidv4 } from 'uuid';\nimport { ActionTypes, IBaseState, IReducer, OpeDetailTypes } from \"../../types\";\nimport { randomArr, randomNum } from \"../../utils\";\nimport { initCubes } from './utils';\nimport config from './config';\nimport { ICube3dProps } from '../../components/Cube3d/cube3d';\n\nexport interface IQueueCube extends ICube3dProps {\n    key: any;\n}\n\nexport interface IState extends IBaseState {\n    values: number[];\n    cubes: IQueueCube[];\n}\n\nexport const initState: IState = {\n    values: randomArr(randomNum(config.geoNumRange), config.geoValueRange),\n    disappearAll: false,\n    loading: false,\n    cubes: [],\n    opeDetails: []\n}\n\nexport const reducer: IReducer<IState> = (state = initState, action) => {\n    const { type, payload } = action;\n\n    switch (type) {\n\n        case ActionTypes.Loading:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case ActionTypes.CancelLoading:\n            return {\n                ...state,\n                loading: false\n            }\n\n        case ActionTypes.Generate: {\n            return {\n                ...state,\n                values: payload,\n                cubes: initCubes(payload),\n                opeDetails: [{ type: OpeDetailTypes.Default, payload }]\n            }\n        }\n\n        case ActionTypes.Appear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, disappear: false })),\n                    disappearAll: false,\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Disappear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, disappear: true })),\n                    disappearAll: true,\n                    opeDetails: []\n                }\n            } else {\n                const newCubes: IQueueCube[] = state.cubes.map((item, i) => ({\n                    ...item,\n                    disappear: i === payload\n                }))\n\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n        }\n\n        case ActionTypes.Active: {\n            const newCubes: IQueueCube[] = state.cubes.map((item, i) => ({\n                ...item,\n                isActive: i === payload\n            }))\n\n            return {\n                ...state,\n                cubes: newCubes\n            }\n        }\n        case ActionTypes.Deactive: {\n            const newCubes: IQueueCube[] = state.cubes.map((item, i) => ({\n                ...item,\n                isActive: i === payload ? false : item.isActive\n            }))\n\n            return {\n                ...state,\n                cubes: newCubes\n            }\n        }\n\n        case ActionTypes.Enqueue: {\n            const newCubes = [...state.cubes]\n            const newCube: IQueueCube = {\n                value: payload,\n                isActive: true,\n                key: uuidv4()\n            };\n            const newValues = [...state.values]\n            newCubes.push(newCube);\n            newValues.push(payload);\n\n            return {\n                ...state,\n                cubes: newCubes,\n                values: newValues,\n                opeDetails: [...state.opeDetails, {\n                    type: OpeDetailTypes.Enqueue,\n                    payload: {\n                        enqueueValue: payload,\n                        curValues: newValues\n                    }\n                }]\n            }\n        }\n\n        case ActionTypes.Dequeue: {\n            const newCubes: IQueueCube[] = [...state.cubes];\n            newCubes.shift();\n            const newValues = [...state.values];\n            const dequeueValue = newValues.shift();\n\n            return {\n                ...state,\n                opeDetails: [...state.opeDetails, {\n                    type: OpeDetailTypes.Dequeue,\n                    payload: {\n                        dequeueValue,\n                        curValues: newValues\n                    }\n                }],\n                values: newValues,\n                cubes: newCubes\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n\n","import React, { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, PageHeader, Steps, message } from 'antd';\nimport { Text } from '@react-three/drei';\nimport Console, { Item } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport QueueCube3d from './QueueCube3d/queueCube3d'\nimport { IReducer, OpeDetailTypes } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined\n} from '@ant-design/icons';\nimport { dequeueSeq, enqueueSeq, getStartPosX, initCubes, initSeq } from './utils';\nimport { initState, IState, reducer } from './store';\nimport config from './config'\nimport { root } from '../../configs/router/config';\nimport { excuteSeq, randomArr, randomNum } from '../../utils';\n\nconst { Step } = Steps;\n\nconst Queue = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer<IState>, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n            cubes: initCubes(state.values),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: initState.values }]\n        }\n    });\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 传入数组长度，计算第一个元素的起始x坐标 */\n    const startPosX = getStartPosX(state.cubes.length);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 处理随机元素 */\n    const handleRandom = () => {\n        let sequence = initSeq(randomArr(randomNum(config.geoNumRange), config.geoValueRange));\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 处理入队 */\n    const handleEnqueue = (index: number, value: number) => {\n        if (state.values.length < config.geoNumRange[1] + 5) {\n            const sequence = enqueueSeq(value, state.values.length);\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n\n        } else {\n            message.warning(`入队失败，队列最大容量为${config.geoNumRange[1] + 5}`)\n        }\n    }\n\n    /** 处理出队 */\n    const handleDequeue = () => {\n        if (state.values.length > 0) {\n            const sequence = dequeueSeq();\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n\n        } else {\n            message.warning('出队失败，当前队列为空')\n        }\n\n    }\n    return (\n        <div className='queue-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace(root)\n                    window.location.reload();\n                }}\n                title='队列'\n            />\n\n            <div className='main'>\n                <Scene3d\n                    onLoaded={handleSceneLoaded}\n                    cameraPosZ={config.cameraPosZ}\n                >\n                    {state.cubes.map((item, i, arr) => (\n                        <React.Fragment key={item.key}>\n                            <QueueCube3d\n                                value={item.value}\n                                position={[startPosX + (i * config.geoBaseDistance), config.geoBasePosY, 0]}\n                                isActive={item.isActive}\n                                disappear={item.disappear}\n                            />\n                            {i === 0 || i === arr.length - 1 ?\n                                <Text\n                                    fillOpacity={!state.disappearAll ? 1 : 0}\n                                    color='black'\n                                    fontSize={0.5}\n                                    position={[startPosX + (i * config.geoBaseDistance), config.geoBasePosY - 1, 0]}\n                                >\n                                    {i === 0 ? 'head' : 'tail'}\n                                </Text> : <></>\n                            }\n                        </React.Fragment>\n                    ))}\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'flex' : 'none' }}\n                    radioGroup={[1, 1, 0]}\n                    addConfig={{\n                        hasIndex: false,\n                        hasValue: true,\n                        valueRange: config.geoValueRange,\n                        radioName: '入队'\n                    }}\n                    deleteConfig={{\n                        hasIndex: false,\n                        hasValue: false,\n                        radioName: '出队'\n                    }}\n                    showSilider={false}\n                    onAdd={handleEnqueue}\n                    onDelete={handleDequeue}\n                    spinning={state.loading}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.Enqueue:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`入队: v=${payload.enqueueValue}`}\n                                                description={`当前队列: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Dequeue:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`出队: v=${payload.dequeueValue}`}\n                                                description={`当前队列: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    default:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`当前队列: [${payload.toString()}]`}\n                                            />\n                                        )\n                                }\n                            })}\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                </Console>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Queue;","import React from 'react'\nimport Cube3d, { ICube3dProps } from '../../../components/Cube3d/cube3d';\n\ninterface IStackCube3dProps extends ICube3dProps {\n}\n\nconst StackCube3d: React.FC<IStackCube3dProps> = (props) => {\n    return (\n        <Cube3d \n            args={[2.5, .5, 2.5]}\n            {...props}\n        />\n    )\n}\n\nexport default React.memo(StackCube3d);","import { IPageConfig } from \"../../types\";\n\nlet config: IPageConfig = {\n    geoBaseDistance: 0.8,\n    geoNumRange: [2, 6],\n    geoValueRange: [0, 90],\n    geoBasePosY: 2,\n    cameraPosZ: 16,\n    animationSpeed: 400,\n}\n\n\nexport default config;","import { ActionTypes } from \"../../types\";\nimport { IStackCube } from \"./store\";\nimport config from './config'\n\nexport function initCubes(values: number[]): IStackCube[] {\n    return values.map((value) => ({\n        value,\n        isActive: false,\n        isLock: false\n    }))\n}\n\n/** 返回初始化数组的细节 */\nexport function initSeq(values: number[]) {\n    const seq = [];\n    seq.push([{ type: ActionTypes.Disappear }])\n    seq.push([\n        { type: ActionTypes.Generate, payload: values },\n        { type: ActionTypes.Appear }])\n    return seq;\n}\n\n/** input输入的value解析为数组，如果输入的不合法则返回 undefined */\nexport function parseValue(value: string) {\n    // 去掉前后括，然后按照逗号划分，再转换成数字数组\n    let parseRes = value.substring(1, value.length - 1).split(/[,，]/g).map(item => +item);\n    // console.log(parseRes);\n\n    // 1. 格式不正确：不是类似 [x,xx,x] 这样的格式\n    // 2. 元素取值不能是小数 [1.2,3.2,3]\n    // 3. 元素不能为空 []\n\n    return parseRes;\n}\n\n/** 返回压栈细节 */\nexport function pushSeq(value: number) {\n    let seq = [];\n    seq.push([{ type: ActionTypes.Push, payload: value }])\n    seq.push([{ type: ActionTypes.Deactive }]);\n    return seq;\n}\n/** 返回弹栈细节 */\nexport function popSeq() {\n    let seq = [];\n    seq.push([{ type: ActionTypes.Active }]);\n    seq.push([{ type: ActionTypes.Pop }])\n    seq.push([{ type: ActionTypes.PopDone }])\n    return seq;\n}\n\n/** 根据数组长度，计算出第一个 cube 的 position 的 y 坐标 */\nexport function getStartYPos(arrLen: number): number {\n    return -(arrLen - 1) * config.geoBaseDistance / 2;\n}","import { ActionTypes, IBaseState, IReducer, OpeDetailTypes } from \"../../types\";\nimport { randomArr, randomNum } from \"../../utils\";\nimport { initCubes } from \"./utils\";\nimport config from './config'\nimport { ICube3dProps } from \"../../components/Cube3d/cube3d\";\n\nexport interface IStackCube extends ICube3dProps { }\n\n\nexport interface IState extends IBaseState {\n    cubes: IStackCube[];\n    values: number[]\n}\n\nexport const initState: IState = {\n    cubes: [],\n    disappearAll: false,\n    loading: false,\n    opeDetails: [],\n    values: randomArr(randomNum(config.geoNumRange), config.geoValueRange)\n}\n\nexport const reducer: IReducer<IState> = (state = initState, action) => {\n    const { type, payload } = action;\n\n    switch (type) {\n\n        case ActionTypes.Loading:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case ActionTypes.CancelLoading:\n            return {\n                ...state,\n                loading: false\n            }\n\n        case ActionTypes.Generate: {\n            return {\n                ...state,\n                values: payload,\n                cubes: initCubes(payload),\n                opeDetails: [{ type: OpeDetailTypes.Default, payload }]\n            }\n        }\n\n        case ActionTypes.Appear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, disappear: false })),\n                    disappearAll: false,\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Disappear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, disappear: true })),\n                    disappearAll: true,\n                    opeDetails: []\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Active:\n            {\n                const newCubes: IStackCube[] = state.cubes.map((item, i, arr) => ({\n                    ...item,\n                    isActive: i === arr.length - 1\n                }))\n\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n        case ActionTypes.Deactive:\n            {\n                const newCubes: IStackCube[] = state.cubes.map((item, i, arr) => ({\n                    ...item,\n                    isActive: (i === arr.length - 1) ? false : item.isActive\n                }))\n\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n\n        case ActionTypes.Pop:\n            {\n                const newCubes: IStackCube[] = state.cubes.map((item, i, arr) => ({\n                    ...item,\n                    disappear: i === arr.length - 1\n                }));\n\n                const newValues = [...state.values];\n                const popValue = newValues.pop();\n\n                return {\n                    ...state,\n                    cubes: newCubes,\n                    opeDetails: [...state.opeDetails, {\n                        type: OpeDetailTypes.Pop,\n                        payload: {\n                            popValue,\n                            curValues: newValues\n                        }\n                    }],\n                    values: newValues\n                }\n            }\n\n        case ActionTypes.PopDone:\n            {\n                const newCubes: IStackCube[] = [...state.cubes];\n                newCubes.pop();\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n\n        case ActionTypes.Push:\n            {\n                const newCubes = [...state.cubes]\n                const newCube: IStackCube = {\n                    value: payload,\n                    isActive: true\n                };\n                const newValues = [...state.values]\n                newCubes.push(newCube);\n                newValues.push(payload);\n\n                return {\n                    ...state,\n                    cubes: newCubes,\n                    values: newValues,\n                    opeDetails: [...state.opeDetails, {\n                        type: OpeDetailTypes.Push,\n                        payload: {\n                            pushValue: payload,\n                            curValues: newValues\n                        }\n                    }]\n                }\n            }\n\n\n\n        default:\n            return state;\n    }\n}","import React, { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, PageHeader, Steps, message } from 'antd';\nimport { BarChartOutlined, DotChartOutlined } from '@ant-design/icons';\nimport Scene3d from '../../components/Scene3d/scene3d'\nimport StackCube3d from './StackCube3d/stackCube3d';\nimport { Text } from '@react-three/drei';\nimport { IReducer, OpeDetailTypes } from '../../types';\nimport { getStartYPos, initCubes, initSeq, parseValue, popSeq, pushSeq } from './utils';\nimport Console, { Item } from '../../components/Console/console';\nimport { IState, initState, reducer } from './store'\nimport config from './config'\nimport { root } from '../../configs/router/config';\nimport { excuteSeq, randomArr, randomNum } from '../../utils';\n\n\nconst { Step } = Steps;\n\nconst Stack = () => {\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer<IState>, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n            cubes: initCubes(state.values),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: initState.values }]\n        }\n    });\n\n    /** stackCube的起始坐标 */\n    const startPosY = getStartYPos(state.cubes.length);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 渲染器生成数组 */\n    const handleRender = (value: string) => {\n        const parseRes = parseValue(value);\n        if (Array.isArray(parseRes)) {\n            let sequence = initSeq(parseRes);\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n        } else {\n            message.warning(parseRes)\n        }\n    }\n\n    /** 处理弹栈 */\n    const handlePop = () => {\n        if (state.values.length > 0) {\n            const sequence = popSeq();\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n        } else {\n            message.warning('弹栈失败，当前栈为空')\n        }\n\n    }\n\n    /** 处理压栈 */\n    const handlePush = (index: number, value: number) => {\n        if (state.values.length < config.geoNumRange[1] + 4) {\n            const sequence = pushSeq(value);\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n        } else {\n            message.warning(`压栈失败，栈最大容量为${config.geoNumRange[1] + 4}`)\n        }\n\n    }\n\n    /** 处理随机元素 */\n    const handleRandom = () => {\n        let sequence = initSeq(randomArr(randomNum(config.geoNumRange), config.geoValueRange));\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    return (\n        <div className='stack-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace(root)\n                    window.location.reload();\n                }}\n                title='栈'\n            />\n            <div className='main'>\n                <Scene3d\n                    onLoaded={handleSceneLoaded}\n                    cameraPosZ={config.cameraPosZ}\n                >\n                    {state.cubes.map((item, i) => (\n                        <React.Fragment key={i + '!'}>\n                            <StackCube3d\n                                value={item.value}\n                                position={[0, startPosY + (i * config.geoBaseDistance) + config.geoBasePosY, 0]}\n                                isActive={item.isActive}\n                                disappear={item.disappear}\n\n                            />\n                            {(i === state.cubes.length - 1 && !state.disappearAll) ?\n                                <Text\n                                    fontSize={0.5}\n                                    color='black'\n                                    position={[-2.5, startPosY + (i * config.geoBaseDistance) + config.geoBasePosY, 0]}\n                                >\n                                    {'Top ——>'}\n                                </Text> : <></>}\n                        </React.Fragment>\n                    ))}\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'flex' : 'none' }}\n                    radioGroup={[1, 1, 0]}\n                    addConfig={{\n                        hasIndex: false,\n                        hasValue: true,\n                        valueRange: config.geoValueRange,\n                        radioName: '压栈'\n                    }}\n                    deleteConfig={{\n                        hasIndex: false,\n                        hasValue: false,\n                        radioName: '弹栈'\n                    }}\n                    showSilider={false}\n                    onAdd={handlePush}\n                    onDelete={handlePop}\n                    onRender={handleRender}\n                    spinning={state.loading}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.Pop:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`弹栈: v=${payload.popValue}`}\n                                                description={`当前栈: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Push:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`压栈: v=${payload.pushValue}`}\n                                                description={`当前栈: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    default:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`当前栈: [${payload.toString()}]`}\n                                            />\n                                        )\n                                }\n                            })}\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                </Console>\n            </div>\n        </div>\n    )\n}\n\nexport default Stack;","import { ISpherePageConfig } from \"../../types\";\nimport { Points } from \"../../types\";\n\nlet config: ISpherePageConfig = {\n    geoBaseDistance: 2,\n    geoNumRange: [5, 15],\n    geoValueRange: [1, 70],\n    geoBasePosY: 3,\n    cameraPosZ: 21,\n    animationSpeed: 400,\n    maxDeepth: 3\n}\n\n/** 满二叉树的各点坐标 */\nexport const cdnOfNodes: Points = [\n    // 第一排\n    [0, 5 + config.geoBasePosY, 0],\n    // 第二排\n    [-4, 2 + config.geoBasePosY, 0], [4, 2 + config.geoBasePosY, 0],\n    // 第三排\n    [-6, -1 + config.geoBasePosY, 0], [-2, -1 + config.geoBasePosY, 0], [2, -1 + config.geoBasePosY, 0], [6, -1 + config.geoBasePosY, 0],\n    // 第四排\n    [-7, -4 + config.geoBasePosY, 0], [-5, -4 + config.geoBasePosY, 0], [-3, -4 + config.geoBasePosY, 0], [-1, -4 + config.geoBasePosY, 0], [1, -4 + config.geoBasePosY, 0], [3, -4 + config.geoBasePosY, 0], [5, -4 + config.geoBasePosY, 0], [7, -4 + config.geoBasePosY, 0]\n]\n\nexport default config;","import { randomArr, randomNum } from '../../utils';\nimport { ActionTypes, Range } from '../../types';\nimport { getChildrenIndexes, getDeepthByNodeIndex, getLChildValue, getRChildValue, getSubTree, judgeNode, setLChild, setRChild } from '../../utils/binaryTree';\nimport config from './config';\n\n/** 为二叉搜索树添加结点 */\nfunction addToBST(bst: (number | null)[], indexOfRoot: number, nodeV: number) {\n    // 传入的 bst 必须有一个根结点\n    if (bst.length === 0) throw new Error('the length of bst is 0');\n\n    if (!bst[indexOfRoot] && bst[indexOfRoot] !== 0) return;\n\n    // 判断传入结点的值和当前子树根结点的值的关系\n    if (nodeV > (bst as number[])[indexOfRoot]) {\n        // 当前结点的右孩子不存在，则直接挂上去\n        if (!getRChildValue(bst, indexOfRoot)) {\n            setRChild(bst, indexOfRoot, nodeV);\n        } else {\n            addToBST(bst, indexOfRoot * 2 + 2, nodeV);\n        }\n    } else {\n        // 当前结点的左孩子不存在，则直接挂上去\n        if (!getLChildValue(bst, indexOfRoot)) {\n            setLChild(bst, indexOfRoot, nodeV);\n        } else {\n            addToBST(bst, indexOfRoot * 2 + 1, nodeV);\n        }\n    }\n}\n\n/**\n * @param nodeNumsRange 结点数量范围\n * @param maxDeepth 二叉树的最大层数(从0开始计数)\n * @returns 返回二叉搜索数的顺序存储结构\n */\nexport function randomBST(nodeNumsRange: Range, nodeValueRange: Range, maxDeepth: number) {\n    // 初始化 cache\n    let cache = new Array(500);\n\n    // 如果生成的二叉搜索树的层数大于了maxDeepth则重新生成\n    while (getDeepthByNodeIndex(cache.length - 1) > maxDeepth) {\n        const arr = randomArr(randomNum(nodeNumsRange), nodeValueRange);\n        cache.fill(null);\n        cache[0] = randomNum(nodeValueRange);\n\n        // 用 arr 向 cache 中添加结点\n        arr.forEach((value) => {\n            addToBST(cache, 0, value)\n        })\n\n        // 找到 cache 中最后一个不为 null 的元素的下标\n        for (let i = 500; i >= 0; i--) {\n            if (cache[i]) {\n                cache.length = i + 1;\n                break;\n            }\n        }\n    }\n    return cache;\n}\n\n/** 获取向二叉搜索树添加结点的细节 */\nexport function addNodeSeq(bst: any[], indexOfRoot: number, nodeV: number, seq: any[]) {\n    // 传入的 bst 必须有一个根结点\n    if (bst.length === 0) throw new Error('the length of bst is 0');\n\n    if (!bst[indexOfRoot] && bst[indexOfRoot] !== 0) return;\n\n    seq.push([{ type: ActionTypes.Active, payload: indexOfRoot }])\n    seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot }])\n\n    // 判断传入结点的值和当前子树根结点的值的关系\n    if (nodeV > bst[indexOfRoot]) {\n        // 当前结点的右孩子不存在，并且添加新结点后的二叉树层数小于 maxDeepth，则挂上去\n        if (!getRChildValue(bst, indexOfRoot) && getDeepthByNodeIndex(indexOfRoot * 2 + 2) <= config.maxDeepth) {\n            seq.push([{\n                type: ActionTypes.Add,\n                payload: { value: nodeV, index: indexOfRoot * 2 + 2 }\n            }])\n        } else {\n            addNodeSeq(bst, indexOfRoot * 2 + 2, nodeV, seq);\n        }\n    } else {\n        // 当前结点的左孩子不存在，则直接挂上去\n        if (!getLChildValue(bst, indexOfRoot) && getDeepthByNodeIndex(indexOfRoot * 2 + 1) <= config.maxDeepth) {\n            seq.push([{\n                type: ActionTypes.Add,\n                payload: { value: nodeV, index: indexOfRoot * 2 + 1 }\n            }])\n        } else {\n            addNodeSeq(bst, indexOfRoot * 2 + 1, nodeV, seq);\n        }\n    }\n}\n\n/** 获取向二叉树删除结点的细节 */\nexport function deleteNodeSeq(bst: any[], targetIndex: number, indexOfRoot: number, seq: any[]) {\n\n    // 传入的 bst 必须有一个根结点\n    if (bst.length === 0) throw new Error('the length of bst is 0');\n\n    if (!bst[indexOfRoot]) return;\n\n    seq.push([{ type: ActionTypes.Active, payload: indexOfRoot }])\n    seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot }])\n\n    if (judgeNode(bst, targetIndex) === 0) {\n        // 如果删除的结点是叶子结点\n        // 判断传入结点的值和当前子树根结点的值的关系\n        if (bst[targetIndex] > bst[indexOfRoot]) {\n            // 如果传入的值大于当前子树根结点的值\n            // 则看其右子树\n            if (getRChildValue(bst, indexOfRoot) === bst[targetIndex]) {\n                // 如果右结点等于nodeV则删除\n                seq.push([{ type: ActionTypes.Active, payload: indexOfRoot * 2 + 2 }])\n                seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot * 2 + 2 }]);\n                seq.push([{ type: ActionTypes.Disappear, payload: indexOfRoot * 2 + 2 }])\n                seq.push([{ type: ActionTypes.Delete, payload: indexOfRoot * 2 + 2 }])\n            } else {\n                // 否则递归搜索其右子树\n                deleteNodeSeq(bst, targetIndex, indexOfRoot * 2 + 2, seq);\n            }\n\n        } else if (bst[targetIndex] < bst[indexOfRoot]) {\n            // 如果传入的值小于当前子树根结点的值\n            // 则看其左子树\n            if (getLChildValue(bst, indexOfRoot) === bst[targetIndex]) {\n                // 如果左结点等于nodeV则删除\n                seq.push([{ type: ActionTypes.Active, payload: indexOfRoot * 2 + 1 }])\n                seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot * 2 + 1 }])\n                seq.push([{ type: ActionTypes.Disappear, payload: indexOfRoot * 2 + 1 }])\n                seq.push([{ type: ActionTypes.Delete, payload: indexOfRoot * 2 + 1 }])\n            } else {\n                // 否则递归搜索其右子树\n                deleteNodeSeq(bst, targetIndex, indexOfRoot * 2 + 1, seq);\n            }\n        } else {\n            // 如果当前结点等于nodeV则删除\n            seq.push([{ type: ActionTypes.Active, payload: indexOfRoot }])\n            seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot }])\n            seq.push([{ type: ActionTypes.Disappear, payload: indexOfRoot }])\n            seq.push([{ type: ActionTypes.Delete, payload: indexOfRoot }])\n        }\n    } else if (judgeNode(bst, targetIndex) === 1) {\n        // 如果删除的结点有一个子结点\n        // 判断删除结点的值和当前子树根结点的值的关系\n        if (bst[targetIndex] > bst[indexOfRoot]) {\n            // 如果删除的值大于当前子树根结点的值\n            // 则看其右子树\n            if (getRChildValue(bst, indexOfRoot) === bst[targetIndex]) {\n                // 如果右结点等于nodeV则删除\n                seq.push([{ type: ActionTypes.Active, payload: indexOfRoot * 2 + 2 }])\n                seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot * 2 + 2 }]);\n                seq.push([{ type: ActionTypes.Disappear, payload: indexOfRoot * 2 + 2 }]);\n\n                // 获取删除结点的子结点\n                const childIndex = getChildrenIndexes(bst, indexOfRoot * 2 + 2)[0] || getChildrenIndexes(bst, indexOfRoot * 2 + 2)[1];\n                // 获取以这个子结点为根结点的子树的所有结点下标 (待移动的下标)\n                const oldIndexes = getSubTree(bst, childIndex).map((item) => item.index);\n                // 获取这些待移动下标的目的坐标\n                const targetIndexes = getSubTree(bst, childIndex).map((item, i) => {\n                    // 如果是第一个元素，则直接移动到 targetIndex\n                    if (i === 0) return targetIndex\n                    // 如果是父结点的左孩子，则移动到 targetIndex * 2 + 1\n                    else if (item.dir === 'l') {\n                        return targetIndex * 2 + 1\n                    }\n                    // 如果是父结点右孩子，则移动到 targetIndex * 2 + 2\n                    else {\n                        return targetIndex * 2 + 2\n                    }\n                })\n\n                seq.push([{\n                    type: ActionTypes.Move,\n                    payload: {\n                        oldIndexes,\n                        targetIndexes\n                    }\n                }])\n                seq.push([{\n                    type: ActionTypes.Delete,\n                    payload: {\n                        oldIndexes,\n                        targetIndexes\n                    }\n                }])\n            } else {\n                // 否则递归搜索其右子树\n                deleteNodeSeq(bst, targetIndex, indexOfRoot * 2 + 2, seq);\n            }\n\n        } else if (bst[targetIndex] < bst[indexOfRoot]) {\n            // 如果传入的值小于当前子树根结点的值\n            // 则看其左子树\n            if (getLChildValue(bst, indexOfRoot) === bst[targetIndex]) {\n                // 如果左结点等于nodeV则删除\n                seq.push([{ type: ActionTypes.Active, payload: indexOfRoot * 2 + 1 }])\n                seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot * 2 + 1 }]);\n                seq.push([{ type: ActionTypes.Disappear, payload: indexOfRoot * 2 + 1 }]);\n\n                // 获取删除结点的子结点\n                const childIndex = getChildrenIndexes(bst, indexOfRoot * 2 + 1)[0] || getChildrenIndexes(bst, indexOfRoot * 2 + 1)[1];\n                // 获取以这个子结点为根结点的子树的所有结点下标 (待移动的下标)\n                const oldIndexes = getSubTree(bst, childIndex).map((item) => item.index);\n                // 获取这些待移动下标的目的坐标\n                const targetIndexes = getSubTree(bst, childIndex).map((item, i) => {\n                    // 如果是第一个元素，则直接移动到 targetIndex\n                    if (i === 0) return targetIndex\n                    // 如果是父结点的左孩子，则移动到 targetIndex * 2 + 1\n                    else if (item.dir === 'l') {\n                        return targetIndex * 2 + 1\n                    }\n                    // 如果是父结点右孩子，则移动到 targetIndex * 2 + 2\n                    else {\n                        return targetIndex * 2 + 2\n                    }\n                })\n\n                seq.push([{\n                    type: ActionTypes.Move,\n                    payload: {\n                        oldIndexes,\n                        targetIndexes\n                    }\n                }])\n                seq.push([{ type: ActionTypes.Delete, payload: oldIndexes }])\n            } else {\n                // 否则递归搜索其左子树\n                deleteNodeSeq(bst, targetIndex, indexOfRoot * 2 + 1, seq);\n            }\n        } else {\n            // 如果当前结点等于nodeV则删除\n            seq.push([{ type: ActionTypes.Active, payload: indexOfRoot }])\n            seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot }]);\n            seq.push([{ type: ActionTypes.Disappear, payload: indexOfRoot }]);\n\n            // 获取删除结点的子结点\n            const childIndex = getChildrenIndexes(bst, indexOfRoot)[0] || getChildrenIndexes(bst, indexOfRoot)[1];\n            // 获取以这个子结点为根结点的子树的所有结点下标 (待移动的下标)\n            const oldIndexes = getSubTree(bst, childIndex).map((item) => item.index);\n            // 获取这些待移动下标的目的坐标\n            const targetIndexes = getSubTree(bst, childIndex).map((item, i) => {\n                // 如果是第一个元素，则直接移动到 targetIndex\n                if (i === 0) return targetIndex\n                // 如果是父结点的左孩子，则移动到 targetIndex * 2 + 1\n                else if (item.dir === 'l') {\n                    return targetIndex * 2 + 1\n                }\n                // 如果是父结点右孩子，则移动到 targetIndex * 2 + 2\n                else {\n                    return targetIndex * 2 + 2\n                }\n            })\n\n            seq.push([{\n                type: ActionTypes.Move,\n                payload: {\n                    oldIndexes,\n                    targetIndexes\n                }\n            }])\n            seq.push([{ type: ActionTypes.Delete, payload: oldIndexes }])\n        }\n    }\n}\n\n/** 获取查找细节 */\nexport function searchSeq(bst: any[], nodeV: number, indexOfRoot: number, seq: any[]) {\n    // 传入的 bst 必须有一个根结点\n    if (bst.length === 0) throw new Error('the length of bst is 0');\n\n    // 如果结点不存在则直接返回\n    if (!bst[indexOfRoot]) return;\n\n    seq.push([{ type: ActionTypes.Active, payload: indexOfRoot }])\n    seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot }])\n\n    // 判断传入结点的值和当前子树根结点的值的关系\n    if (nodeV > bst[indexOfRoot]) {\n        // 如果传入的值大于当前子树根结点的值\n        // 则看其右子树\n        if (getRChildValue(bst, indexOfRoot) === nodeV) {\n            // 如果右结点等于nodeV则锁定\n            seq.push([{ type: ActionTypes.Active, payload: indexOfRoot * 2 + 2 }])\n            seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot * 2 + 2 }])\n            seq.push([{ type: ActionTypes.Lock, payload: indexOfRoot * 2 + 2 }])\n        } else {\n            // 否则递归搜索其右子树\n            searchSeq(bst, nodeV, indexOfRoot * 2 + 2, seq);\n        }\n\n    } else if (nodeV < bst[indexOfRoot]) {\n        // 如果传入的值小于当前子树根结点的值\n        // 则看其左子树\n        if (getLChildValue(bst, indexOfRoot) === nodeV) {\n            // 如果左结点等于nodeV则锁定\n            seq.push([{ type: ActionTypes.Active, payload: indexOfRoot * 2 + 1 }])\n            seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot * 2 + 1 }])\n            seq.push([{ type: ActionTypes.Lock, payload: indexOfRoot * 2 + 1 }])\n        } else {\n            // 否则递归搜索其右子树\n            searchSeq(bst, nodeV, indexOfRoot * 2 + 1, seq);\n        }\n    } else {\n        // 如果当前结点等于nodeV则锁定\n        seq.push([{ type: ActionTypes.Active, payload: indexOfRoot }])\n        seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot }])\n        seq.push([{ type: ActionTypes.Lock, payload: indexOfRoot }])\n    }\n}\n\n\n","import { ActionTypes, IBaseState, IReducer, OpeDetailTypes } from \"../../types\";\nimport { isNum } from \"../../utils\";\nimport { formatBinaryTree, formatSpheres, getChildrenIndexes, getFatherIndex, initSpheres, judgeNode, treeToString } from \"../../utils/binaryTree\";\nimport { IBSTSphere3dProps } from \"./BSTSphere3d/bstSphere3d\";\nimport config, { cdnOfNodes } from \"./config\";\nimport { randomBST } from \"./utils\";\n\nexport interface IBSTSphere3d extends IBSTSphere3dProps {\n    /** 其下面的下标是否消失 */\n    indexDisappear?: boolean;\n}\n\nexport interface IState extends IBaseState {\n    // 表示二叉树当前真实的结构\n    binaryTree: (number | null)[];\n    // 用来表示每个 sphere 的属性，其元素位置无意义，其中 sortIndex 才是对应的 values 的下标\n    spheres: IBSTSphere3d[];\n}\n\nexport const initState: IState = {\n    binaryTree: randomBST(config.geoNumRange, config.geoValueRange, config.maxDeepth),\n    spheres: [],\n    opeDetails: [],\n    loading: false,\n    disappearAll: false\n}\n\nexport const reducer: IReducer<IState> = (state = initState, action): IState => {\n    const { type, payload } = action;\n    switch (type) {\n        case ActionTypes.Loading:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case ActionTypes.CancelLoading:\n            return {\n                ...state,\n                loading: false\n            }\n\n        case ActionTypes.Generate: {\n            return {\n                ...state,\n                binaryTree: payload,\n                spheres: initSpheres(payload),\n                opeDetails: [{ type: OpeDetailTypes.Default, payload: treeToString(payload) }]\n            }\n        }\n\n        case ActionTypes.Appear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    spheres: state.spheres.map((item) => ({ ...item, disappear: false })),\n                    disappearAll: false,\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Disappear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    spheres: state.spheres.map((item) => ({ ...item, disappear: true })),\n                    disappearAll: true\n                }\n            } else {\n                // 判断删除的结点类型\n                const deleteType = judgeNode(state.binaryTree, payload);\n                let newSpheres = [...state.spheres];\n                let newBst = [...state.binaryTree];\n\n                if (deleteType === 0) {\n                    // 让该结点消失\n                    newSpheres = newSpheres.map((sphere) => (sphere.sortIndex === payload ? { ...sphere, disappear: true } : sphere));\n                    // 让其父节点与之的连线也消失\n                    let fatherIndex = getFatherIndex(payload);\n                    // 判断是父结点左连线还是右连线(这里因为是二叉搜索树所以可以直接通过数值大小来判断)\n                    let isLeft = (state.binaryTree[fatherIndex] as number) >= (state.binaryTree[payload] as number)\n                    newSpheres = newSpheres.map((sphere) => {\n                        let newSphere = { ...sphere };\n                        if (sphere.sortIndex === fatherIndex) {\n                            if (isLeft) newSphere.lChildPos = null;\n                            else newSphere.rChildPos = null;\n                        }\n                        return newSphere;\n                    })\n                    newBst[payload] = null;\n\n                    return {\n                        ...state,\n                        spheres: newSpheres,\n                        opeDetails: [...state.opeDetails, {\n                            type: OpeDetailTypes.Delete, payload: {\n                                index: payload,\n                                value: state.binaryTree[payload],\n                                cur: formatBinaryTree(newBst)\n                            }\n                        }]\n                    }\n\n                } else if (deleteType === 1) {\n                    // 让该结点消失\n                    newSpheres = newSpheres.map((sphere) => (sphere.sortIndex === payload ? { ...sphere, disappear: true } : sphere));\n\n                    // 找到被删除结点的子结点\n                    let childrenIndexes = getChildrenIndexes(state.binaryTree, payload);\n                    // let childIndex = childrenIndexes[0] || childrenIndexes[1]\n\n                    let fatherIndex = getFatherIndex(payload);\n                    // 判断是父结点左连线还是右连线(这里因为是二叉搜索树所以可以直接通过数值大小来判断)\n                    let isLeft = (state.binaryTree[fatherIndex] as number) >= (state.binaryTree[payload] as number)\n\n                    // 把被删除的结点的子结点的父节点与之的连线消失\n                    newSpheres = newSpheres.map((sphere) => {\n                        let newSphere = { ...sphere };\n                        if (sphere.sortIndex === fatherIndex) {\n                            if (isLeft) newSphere.lChildPos = null;\n                            else newSphere.rChildPos = null;\n                        }\n                        return newSphere;\n                    })\n\n\n                    return {\n                        ...state,\n                        spheres: newSpheres,\n                        // opeDetails: [...state.opeDetails, {\n                        //     type: OpeDetailTypes.Delete, payload: {\n                        //         index: payload,\n                        //         value: state.binaryTree[payload],\n                        //         cur: formatBinaryTree(newBst)\n                        //     }\n                        // }]\n                    }\n\n                } else {\n                    return {\n                        ...state\n                    }\n                }\n            }\n        }\n\n        case ActionTypes.Move: {\n            const { oldIndexes, targetIndexes }: { oldIndexes: number[], targetIndexes: number[] } = payload;\n\n            // 把包含在 oldIndexes 中的 sortIndex 找出来\n            const newSperes = state.spheres.map((item) => {\n                // 看 sortIndex 在 oldIndexes 中处于哪个位置，也对应 targetIndexes 的位置\n                let i = oldIndexes.findIndex((value) => value === item.sortIndex);\n                // 如果找到了，则往 sortIndexes 中添加 targetIndexes[i]\n                if (i >= 0) {\n                    return {\n                        ...item,\n                        sortIndexes: [...item.sortIndexes, targetIndexes[i]],\n                        indexDisappear: true\n                    }\n                }\n                return { ...item }\n            })\n\n            let newBst = [...state.binaryTree];\n\n            // 目标位置覆盖为：下标为oldIndex结点的取值\n            targetIndexes.forEach((value, i) => {\n                newBst[value] = newBst[oldIndexes[i]];\n            })\n\n            // 之前的旧位置取值变为null\n            oldIndexes.forEach((value) => {\n                newBst[value] = null;\n            })\n\n            newBst = formatBinaryTree(newBst);\n\n            return {\n                ...state,\n                spheres: newSperes,\n                binaryTree: newBst,\n                opeDetails: [...state.opeDetails, {\n                    type: OpeDetailTypes.Delete, payload: {\n                        index: targetIndexes[0],\n                        value: state.binaryTree[targetIndexes[0]],\n                        cur: newBst\n                    }\n                }]\n\n            }\n        }\n\n        case ActionTypes.Delete: {\n            // 判断删除的结点类型\n            let deleteType;\n\n            if (isNum(payload)) {\n                deleteType = 0;\n            } else {\n                deleteType = 1;\n            }\n\n            let newSpheres = [...state.spheres];\n            let newBst = [...state.binaryTree];\n\n            if (deleteType === 0) { // 删除的结点为叶子结点\n                newSpheres = newSpheres.map((sphere) => {\n                    if (sphere.sortIndex === payload) return { ...sphere, value: null }\n                    return sphere;\n                })\n                newBst[payload] = null;\n\n                return {\n                    ...state,\n                    spheres: newSpheres as any,\n                    binaryTree: formatBinaryTree(newBst as any),\n                }\n\n\n            } else if (deleteType === 1) { // 删除的结点有一个子结点\n                const { oldIndexes, targetIndexes }: { oldIndexes: number[], targetIndexes: number[] } = payload\n                let newSpheres = [...state.spheres];\n\n                // 删除结点：sphere.value=null, binaryTree结点位移\n                newSpheres = newSpheres.map((sphere) => {\n                    // 如果是待位移的结点位置则赋值为null\n                    if (oldIndexes.includes(sphere.sortIndex)) return { ...sphere, value: null }\n                    // // 如果是删除结点的位置则赋值为 state.binaryTree[targetIndexes[0]]\n                    // else if (sphere.sortIndex === targetIndexes[0]) return { ...sphere, value: state.binaryTree[targetIndexes[0]] }\n                    // 如果是目标位置的结点，则更新其值\n                    else if (targetIndexes.includes(sphere.sortIndex)) {\n                        // let targetIndex = targetIndexes.find((value: number) => value === sphere.sortIndex);\n                        return { ...sphere, value: state.binaryTree[sphere.sortIndex] }\n                    }\n                    return sphere\n                })\n\n                // 改变 sortIndex\n                newSpheres = newSpheres.map((sphere) => {\n                    return { ...sphere, sortIndex: sphere.sortIndexes[sphere.sortIndexes.length - 1] }\n                })\n\n                console.log('delete');\n\n                return {\n                    ...state,\n                    spheres: newSpheres,\n                    // binaryTree: formatBinaryTree(newBst),\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Add: {\n            const { value, index } = payload;\n            let newSpheres = [...state.spheres];\n\n            // 找到其父结点坐标及取值\n            const fatherIndex = getFatherIndex(index);\n            const fatherValue = state.binaryTree[fatherIndex];\n\n            const isLeft = value <= (fatherValue as number) ? true : false;\n\n            // 新结点\n            const newNode: IBSTSphere3d = {\n                value,\n                sortIndex: index,\n                sortIndexes: [index]\n            };\n            // 添加新结点\n            newSpheres[index] = newNode;\n\n            newSpheres =  newSpheres.map((sphere) => {\n                if (sphere.sortIndex === fatherIndex) {\n                    if (isLeft) return { ...sphere, lChildPos: cdnOfNodes[index]}\n                    else return {...sphere, rChildPos: cdnOfNodes[index]}\n                }\n                return sphere\n            })\n            // 格式化\n            newSpheres = formatSpheres(newSpheres);\n\n            let newBst = [...state.binaryTree];\n            // 添加新值\n            newBst[index] = value\n            // 格式化\n            newBst = formatBinaryTree(newBst);\n\n            return {\n                ...state,\n                binaryTree: newBst,\n                spheres: newSpheres,\n                opeDetails: [...state.opeDetails, {\n                    type: OpeDetailTypes.Add, payload: {\n                        index: payload.index,\n                        value: payload.value,\n                        cur: newBst\n                    }\n                }]\n            }\n        }\n\n        case ActionTypes.StartPreorder:\n            return {\n                ...state,\n                spheres: state.spheres.map(\n                    (item) => ({ ...item, isLock: false })\n                ),\n                opeDetails: [...state.opeDetails, { type: OpeDetailTypes.PreOrderDetails, payload }]\n            }\n\n        case ActionTypes.StartInOrder:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isLock: false,\n                    activeLeft: false,\n                    activeRight: false\n                })),\n                opeDetails: [...state.opeDetails, { type: OpeDetailTypes.InOrderDetails, payload }]\n            }\n\n        case ActionTypes.StartPostOrder:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isLock: false,\n                    activeLeft: false,\n                    activeRight: false\n                })),\n                opeDetails: [...state.opeDetails, { type: OpeDetailTypes.PostOrderDetails, payload }]\n            }\n\n        case ActionTypes.Active:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isActive: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.ActiveLeft:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    activeLeft: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.ActiveRight:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    activeRight: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isActive: payload === item.sortIndex ? false : item.isActive\n                }))\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n                spheres: state.spheres.map(\n                    (item) => payload === item.sortIndex ? { ...item, isLock: true } : { ...item }\n                )\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n                spheres: state.spheres.map(\n                    (item) => (!payload && payload !== 0) ? { ...item, isLock: false } : (payload === item.sortIndex) ? { ...item, isLock: false } : { ...item }\n                )\n            }\n\n        default:\n            return state\n    }\n}","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport Line3d from \"../../../components/Line3d/line3d\";\nimport Sphere3d, { ISphere3dProps } from \"../../../components/Sphere3d/sphere3d\";\nimport config, { cdnOfNodes } from '../config'\nimport { defaultGeoColor } from \"../../../configs/page/defaultConfig\";\n\nexport interface IBSTSphere3dProps extends ISphere3dProps { }\n\nconst BSTSphere3d: React.FC<IBSTSphere3dProps> = (props) => {\n\n    const {\n        lChildPos,\n        rChildPos,\n        position,\n        activeLeft,\n        activeRight,\n        disappear,\n        sortIndex,\n        sortIndexes,\n        // position,\n        // value,\n        // isActive,\n        // isLock,\n        // colorConfig,\n        // lChildPos,\n        // rChildPos,\n        // disappear,\n        // sortIndex\n    } = props;\n\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    const oldPosX = cdnOfNodes[sortIndex][0];\n    const oldPosY = cdnOfNodes[sortIndex][1];\n\n    const targetPosX = cdnOfNodes[sortIndexes[sortIndexes.length - 1]][0];\n    const targetPosY = cdnOfNodes[sortIndexes[sortIndexes.length - 1]][1];\n\n    useFrame(() => {\n        const deltaX = Math.abs(oldPosX - targetPosX) / (config.animationSpeed / 20);\n        const deltaY = Math.abs(oldPosY - targetPosY) / (config.animationSpeed / 20);\n\n        // 如果当前sphere需要水平移动\n        if (deltaX) {\n\n            // sphere 需要往右移\n            if (oldPosX - targetPosX < 0 && meshRef.current.position.x < targetPosX) {\n                meshRef.current.translateX(deltaX);\n                if (meshRef.current.position.x >= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n\n            // sphere 需要往左移\n            else if (oldPosX - targetPosX > 0 && meshRef.current.position.x > targetPosX) {\n                meshRef.current.translateX(-deltaX);\n                if (meshRef.current.position.x <= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n        }\n\n        // 如果当前sphere需要竖直移动\n        if (deltaY) {\n\n            // sphere 需要往上移\n            if (oldPosY - targetPosY < 0 && meshRef.current.position.y < targetPosY) {\n                meshRef.current.translateY(deltaY);\n                if (meshRef.current.position.y >= targetPosY) {\n                    meshRef.current.position.y = targetPosY;\n                }\n            }\n\n            // sphere 需要往下移\n            else if (oldPosY - targetPosY > 0 && meshRef.current.position.y > targetPosY) {\n                meshRef.current.translateY(-deltaY);\n                if (meshRef.current.position.y <= targetPosY) {\n                    meshRef.current.position.y = targetPosY;\n                }\n            }\n        }\n    })\n\n    return (\n        <>\n            <Sphere3d\n                ref={meshRef as any}\n                {...props}\n            />\n            {\n                lChildPos &&\n                <Line3d\n                    hidden={disappear as boolean}\n                    points={[position, lChildPos]}\n                    isActive={activeLeft}\n                />\n            }\n            {\n                rChildPos &&\n                <Line3d\n                    hidden={disappear as boolean}\n                    points={[position, rChildPos]}\n                    isActive={activeRight}\n                />\n            }\n        </>\n    )\n}\n\nBSTSphere3d.defaultProps = {\n    colorConfig: {\n        ...defaultGeoColor,\n        lockColor: '#a69ad0'\n    }\n}\n\nexport default BSTSphere3d;","import React, { useEffect, useReducer, useState } from 'react'\nimport { useHistory } from 'react-router'\nimport { Text } from '@react-three/drei'\nimport { Button, PageHeader, Steps, message } from 'antd'\nimport { BarChartOutlined, DotChartOutlined } from '@ant-design/icons'\nimport Console, { Item, SubMenu } from '../../components/Console/console'\nimport Scene3d from '../../components/Scene3d/scene3d'\nimport { ActionTypes, IAction, IReducer, OpeDetailTypes, SeqType } from '../../types'\nimport { cdnOfNodes } from './config'\nimport { initState, IState, reducer } from './store'\nimport BSTSphere3d from './BSTSphere3d/bstSphere3d'\nimport { root } from '../../configs/router/config'\nimport { addNodeSeq, deleteNodeSeq, randomBST, searchSeq } from './utils'\nimport { getDeepthByNodeIndex, getLChildValue, getRChildValue, getSubTree, initSeq, initSpheres, inOrderSeq, parseValue, postOrderSeq, preOrderSeq, treeToString } from '../../utils/binaryTree'\nimport config from './config'\nimport { excuteSeq } from '../../utils'\n\nconst { Step } = Steps;\n\nconst BinarySearchTree = () => {\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer<IState>, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n            spheres: initSpheres(initState.binaryTree),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: treeToString(initState.binaryTree) }]\n        }\n    });\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 渲染input输入的数据 */\n    const handleRender = (value: string) => {\n        const parseRes = parseValue(value);\n        console.log(parseRes);\n        if (parseRes) {\n            let sequence = initSeq(parseRes);\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n        } else {\n            message.warning('输入的数据格式有误，请按照 \"[1,3,8,2]\" 类似格式输入')\n        }\n    }\n\n    /** 添加元素 */\n    const handleAddEle = (index: number, value: number) => {\n        dispatch({ type: ActionTypes.UnLock })\n        let sequence: SeqType = [];\n        addNodeSeq(state.binaryTree, 0, value, sequence);\n\n        // 判断一下最后要添加的元素的下标对应的层数是不是小于等于配置项的最大层数\n        if (getDeepthByNodeIndex(sequence[sequence.length - 2][0].payload) === config.maxDeepth) {\n            setTimeout(() => {\n                message.warning(`添加失败，二叉树最大层数为${config.maxDeepth + 1}`)\n            }, sequence.length * config.animationSpeed)\n        }\n        excuteSeq(sequence, config.animationSpeed, dispatch)\n    }\n\n    /** 删除元素 */\n    const handleDeleteEle = (index: number) => {\n        dispatch({ type: ActionTypes.UnLock })\n\n        // 验证一下输入的序号\n        if (!state.binaryTree[index] && state.binaryTree[index] !== 0) {\n            return message.warning('删除失败，输入的结点序号不存在')\n        }\n\n        let sequence: SeqType = [];\n        deleteNodeSeq(state.binaryTree, index, 0, sequence);\n\n        excuteSeq(sequence, config.animationSpeed, dispatch)\n        // console.log(sequence);\n        // sequence.forEach((events, i) => {\n        //     setTimeout(() => {\n        //         events.forEach((event) => {\n        //             dispatch(event)\n        //         })\n\n        //     }, i * config.animationSpeed)\n        // })\n    }\n\n    /** 搜索元素 */\n    const handleSearch = (index: number, value: number) => {\n        dispatch({ type: ActionTypes.UnLock })\n\n        let sequence: SeqType = [];\n        searchSeq(state.binaryTree, value, 0, sequence);\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n\n        // 如果最后一个操作的下标对应的值不等于value，则说明没有查找到目标元素\n        if (state.binaryTree[([...sequence].pop() as IAction[])[0].payload] !== value) {\n            setTimeout(() => {\n                message.warning(`没有查找到取值为 ${value} 的元素`);\n            }, (sequence.length) * config.animationSpeed)\n        }\n    }\n\n    /** 处理随机元素 */\n    const handleRandom = () => {\n        let sequence = initSeq(randomBST(config.geoNumRange, config.geoValueRange, config.maxDeepth));\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 前序遍历 */\n    const handlePreorder = () => {\n\n        let sequence: SeqType = [];\n        preOrderSeq(state.binaryTree, 0, sequence);\n\n        // 获取遍历的结果\n        const preOrderRes: number[] = [];\n        sequence.forEach((event) => {\n            if (event[0].type === ActionTypes.Active) preOrderRes.push(state.binaryTree[event[0].payload] as number)\n        })\n\n        dispatch({ type: ActionTypes.StartPreorder, payload: preOrderRes });\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 中序遍历 */\n    const handleInorder = () => {\n        let sequence: SeqType = [];\n        inOrderSeq(state.binaryTree, 0, sequence);\n\n        // 获取遍历的结果\n        const inOrderRes: number[] = [];\n        sequence.forEach((events) => {\n            if (events[0].type === ActionTypes.Active) inOrderRes.push(state.binaryTree[events[0].payload] as number)\n        })\n\n        dispatch({ type: ActionTypes.StartInOrder, payload: inOrderRes });\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n\n    }\n\n    /** 后序遍历 */\n    const handlePostorder = () => {\n        let sequence: SeqType = [];\n        postOrderSeq(state.binaryTree, 0, sequence);\n        const postOrderRes: number[] = [];\n        sequence.forEach((events) => {\n            if (events[0].type === ActionTypes.Active) postOrderRes.push(state.binaryTree[events[0].payload] as number)\n        })\n        dispatch({ type: ActionTypes.StartPostOrder, payload: postOrderRes });\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 处理动画速度改变 */\n    const handleSliderChange = (x: number) => {\n        config.animationSpeed = -7.95 * x + 1000\n    }\n\n\n    useEffect(() => {\n        console.log(state.spheres.map((sphere, i) => ({ index: i, value: sphere.value, sortIndex: sphere.sortIndex, sortIndexes: sphere.sortIndexes.toString() })));\n        console.log(state.binaryTree);\n    }, [state.spheres])\n\n    return (\n        <div className='binarySearchTree-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace(root)\n                    window.location.reload();\n                }}\n                title='二叉搜索树'\n            />\n            <div className='main'>\n                <Scene3d\n                    onLoaded={handleSceneLoaded}\n                    cameraPosZ={config.cameraPosZ}\n                >\n                    {state.spheres.map((sphere, i) => {\n                        // 判断当前结点是否有左孩子\n                        const hasLChild = getLChildValue(state.spheres, sphere.sortIndex)?.value;\n\n                        // 获取左结点的位置(加上前面的这个判断是为了在删除元素时，会设置与之连接的父结点的那条线为null)\n                        const lChildPos = sphere.lChildPos !== null && getLChildValue(cdnOfNodes, sphere.sortIndex);\n\n                        // 判断当前结点是否有右孩子\n                        const hasRChild = getRChildValue(state.spheres, sphere.sortIndex)?.value;\n\n                        // 获取右结点的位置\n                        const rChildPos = sphere.rChildPos !== null && getRChildValue(cdnOfNodes, sphere.sortIndex);\n\n                        return (\n                            sphere.value && (\n                                <React.Fragment key={'sphere' + sphere.sortIndex}>\n                                    <BSTSphere3d\n                                        value={sphere.value}\n                                        sortIndex={sphere.sortIndex}\n                                        sortIndexes={sphere.sortIndexes}\n                                        position={cdnOfNodes[sphere.sortIndex]}\n                                        isActive={sphere.isActive}\n                                        activeLeft={sphere.activeLeft}\n                                        activeRight={sphere.activeRight}\n                                        isLock={sphere.isLock}\n                                        disappear={sphere.disappear}\n                                        lChildPos={hasLChild && lChildPos}\n                                        rChildPos={hasRChild && rChildPos}\n                                    />\n                                    <Text\n                                        position={[cdnOfNodes[i][0], cdnOfNodes[i][1] - 1.2, cdnOfNodes[i][2]]}\n                                        fontSize={0.4}\n                                        fillOpacity={!sphere.indexDisappear && !sphere.disappear && !state.disappearAll ? 1 : 0}\n                                        color='black'\n                                    >\n                                        {sphere.sortIndex}\n                                    </Text>\n                                </React.Fragment>\n                            )\n                        )\n                    })}\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'flex' : 'none' }}\n                    radioGroup={[1, 1, 1]}\n                    addConfig={{\n                        hasIndex: false,\n                        hasValue: true,\n                        valueRange: config.geoValueRange,\n                        radioName: '添加'\n                    }}\n                    deleteConfig={{\n                        hasIndex: true,\n                        hasValue: false,\n                        indexRange: [0, state.binaryTree.length - 1],\n                        radioName: '删除'\n                    }}\n                    searchConfig={{\n                        hasIndex: false,\n                        hasValue: true,\n                        valueRange: config.geoValueRange,\n                        radioName: '查找'\n                    }}\n                    onSliderChange={handleSliderChange}\n                    onAdd={handleAddEle}\n                    onDelete={handleDeleteEle}\n                    onSearch={handleSearch}\n                    onRender={handleRender}\n                    spinning={state.loading}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handlePreorder}>前序遍历</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handleInorder}>中序遍历</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handlePostorder}>后序遍历</Button>\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.InOrderDetails:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`中序遍历: [${payload}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.PreOrderDetails:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`前序遍历: [${payload}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.PostOrderDetails:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`后序遍历: [${payload}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Add: {\n                                        const { index, value, cur } = payload;\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`新增结点: i=${index}, v=${value}`}\n                                                description={`当前二叉树: ${treeToString(cur)}`}\n                                            />\n                                        )\n                                    }\n\n                                    case OpeDetailTypes.Delete: {\n                                        const { index, value, cur } = payload;\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`删除结点: i=${index}, v=${value}`}\n                                                description={`当前二叉树: ${treeToString(cur)}`}\n                                            />\n                                        )\n                                    }\n\n                                    default:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`当前二叉树: ${payload}`}\n                                            />\n                                        )\n                                }\n                            })}\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    {/* <SubMenu\n                        key='item2'\n                        icon={<BarChartOutlined />}\n                        title='遍历'\n                    >\n                        <Item onClick={handlePreorder}>前序遍历</Item>\n                        <Item onClick={handleInorder}>中序遍历</Item>\n                        <Item onClick={handlePostorder}>后序遍历</Item>\n                    </SubMenu> */}\n                </Console>\n\n            </div>\n        </div>\n    )\n}\n\nexport default BinarySearchTree;","import { IPageConfig } from \"../../types\";\n\nlet config: IPageConfig = {\n    geoBaseDistance: 2.5,\n    geoNumRange: [3, 5],\n    geoValueRange: [0, 90],\n    geoBasePosY: 2,\n    cameraPosZ: 19,\n    animationSpeed: 400,\n\n}\n\n\nexport default config;","import { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Drawer, Input, PageHeader, Steps } from 'antd';\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport {\n    BarChartOutlined,\n    DotChartOutlined,\n    MinusSquareOutlined,\n    PlusSquareOutlined,\n} from '@ant-design/icons';\nimport { OpeDetailTypes } from '../../types';\nimport config from './config'\n\nconst { Step } = Steps;\n\nconst HashTable = () => {\n\n    const history = useHistory();\n    // const [state, dispatch] = useReducer<IReducer, IState>(reducer, initState, (state): IState => {\n    //     return {\n    //         ...state,\n    //     }\n    // })\n\n    /** 控制抽屉是否展开 */\n    const [isUnfold, setIsUnfold] = useState(false);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 传入数组长度，计算第一个元素的起始x坐标 */\n    // const startPosX = getStartXPos(state.cubes.length);\n\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n\n    }\n    return (\n        <div className='hashTable-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.goBack();\n                    window.location.reload();\n                }}\n                title='哈希表'\n            />\n\n            <div className='main'>\n                <Scene3d\n                    onLoaded={handleSceneLoaded}\n                    cameraPosZ={config.cameraPosZ}\n                >\n                    {/* {state.cubes.map((item, i, arr) => (\n                        <React.Fragment key={item.key}>\n                            <QueueCube3d\n                                value={item.value}\n                                position={[startPosX + (i * config.geoBaseDistance), config.geoBasePosY, 0]}\n                                isActive={item.isActive}\n                                disappear={item.disappear}\n                            />\n                            {i === 0 || i === arr.length - 1 ?\n                                <Text\n                                    fillOpacity={!state.disappearAll ? 1 : 0}\n                                    color='black'\n                                    fontSize={0.5}\n                                    position={[startPosX + (i * config.geoBaseDistance), config.geoBasePosY - 1, 0]}\n                                >\n                                    {i === 0 ? 'head' : 'tail'}\n                                </Text> : <></>\n                            }\n                        </React.Fragment>\n                    ))} */}\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'flex' : 'none' }}\n                    showSilider={false}\n                    radioGroup={[1,1,1]}\n                    // onAdd={handleEnqueue}\n                    // onDelete={handleDequeue}\n                    // spinning={state.loading}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" /* current={state.opeDetails.length - 1} */>\n                            {/* {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.Enqueue:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`入队: v=${payload.enqueueValue}`}\n                                                description={`当前队列: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Dequeue:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`出队: v=${payload.dequeueValue}`}\n                                                description={`当前队列: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    default:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`当前队列: [${payload.toString()}]`}\n                                            />\n                                        )\n                                }\n                            })} */}\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                </Console>\n            </div>\n\n        </div>\n    )\n}\n\nexport default HashTable;\n\n\n","import { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Drawer, Input, PageHeader } from 'antd';\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { randomArr, randomNum } from '../../utils/index'\nimport { ActionTypes, IGeometryProps } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined,\n    MinusSquareOutlined,\n    PlusSquareOutlined,\n} from '@ant-design/icons';\nimport './graph.scss'\n\nexport interface IBinaryHeapCube extends IGeometryProps {\n\n}\ntype IReducer = (state: IState, action: IAction) => IState;\n\ninterface IState {\n    // 是否随机化完毕\n    randomDone: boolean;\n}\n\ninterface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nconst initState: IState = {\n    randomDone: true,\n}\n\nfunction reducer(state: IState = initState, action: IAction): IState {\n\n    const { type, payload } = action;\n\n\n    switch (type) {\n        case ActionTypes.Active:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n            }\n\n\n        // case ActionTypes.Add:\n\n        // case ActionTypes.Delete:\n\n        case ActionTypes.RandomDone:\n            {\n                return {\n                    ...state,\n                    randomDone: true\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            };\n\n        // case ActionTypes.Search:\n\n        default:\n            return state;\n    }\n}\n\nconst Graph = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n        }\n    })\n\n    /** 控制抽屉是否展开 */\n    const [isUnfold, setIsUnfold] = useState(false);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 传入数组长度，计算第一个元素的起始x坐标 */\n    // const startPosX = getStartXPos(state.cubes.length);\n\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n    return (\n        <div className='graph-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.goBack();\n                    window.location.reload();\n                }}\n                title='图'\n            />\n\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n\n                </Scene3d>\n\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Graph;\n\n\n","import Home from '../../pages/Home/home'\nimport Sort from '../../pages/Sort/sort'\n// import AVLTree from '../../pages/AVLTree/avlTree'\n// import Graph from '../../pages/Graph/graph'\nimport BinaryHeap from '../../pages/BinaryHeap/binaryHeap'\n// import BTree from '../../pages/BTree/bTree'\nimport Queue from '../../pages/Queue/queue'\nimport Stack from '../../pages/Stack/stack'\n// import HashTable from '../../pages/HashTable/hashTable'\n// import LinkedList from '../../pages/LinkedList/linkedList'\n// import RedBlackTree from '../../pages/RedBlackTree/redBlackTree'\n// import BPlusTree from '../../pages/BPlusTree/bPlusTree'\nimport BinarySearchTree from '../../pages/BinarySearchTree/binarySearchTree'\nimport HashTable from '../../pages/HashTable/hashTable'\nimport Graph from '../../pages/Graph/graph'\n\n\nexport const root = '/data-structure-visualization';\n\nconst routers = [\n    {\n        path: root + \"/home\",\n        page: Home\n    },\n    {\n        path: root + \"/sort\",\n        page: Sort\n    },\n    {\n        path: root + \"/graph\",\n        page: Graph\n    },\n    {\n        path: root + \"/queue\",\n        page: Queue\n    },\n    {\n        path: root + \"/stack\",\n        page: Stack\n    },\n    {\n        path: root + \"/binarySearchTree\",\n        page: BinarySearchTree\n    },\n    {\n        path: root + \"/binaryHeap\",\n        page: BinaryHeap\n    },\n    {\n        path: root + \"/hashTable\",\n        page: HashTable\n    },\n    // {\n    //     path: root + \"/avlTree\",\n    //     page: AVLTree\n    // },\n    // {\n    //     path: root + \"/redBlackTree\",\n    //     page: RedBlackTree\n    // },\n    // {\n    //     path: root + \"/bTree\",\n    //     page: BTree\n    // },\n\n    // {\n    //     path: root + \"/bPlusTree\",\n    //     page: BPlusTree\n    // },\n\n];\n\n\nexport default routers\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport routers, { root } from \"./config\";\n\n\nconst RouterView = () => {\n  return (\n\n    <Router>\n      <Switch>\n        {routers.map((item, index) => {\n          if (index === 0) {\n            return <Route key={index} path={item.path} component={item.page} />\n          } \n          return <Route key={index} path={item.path + ''} component={item.page} />\n        })}\n        {/* {\n          routers.map((item, index) => {\n            console.log(item);\n          })\n        } */}\n      </Switch>\n      <Redirect to={root + \"/home\"} />\n\n    </Router>\n\n  );\n};\n\nexport default RouterView;\n","import { Layout } from 'antd';\nimport RouterView from './configs/router';\nimport './App.scss';\nimport { root } from './configs/router/config';\nconst { Header, Content, Footer } = Layout;\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout className='layout'>\n        {/* <Header className='header'>\n          <a href={root}>Data Structure Visualization</a>\n        </Header> */}\n        <Content className='content'>\n          <RouterView />\n        </Content>\n        {/* <Footer className='footer'>\n          DSV ©2021 Created by Dora and Conan\n        </Footer> */}\n      </Layout>\n    </div>\n  );\n}\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  // <React.StrictMode>\n      <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}