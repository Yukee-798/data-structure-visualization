{"version":3,"sources":["utils/index.ts","types/index.ts","components/HomeItem/homeItem.tsx","assets/homeItemCovers/Sort.jpg","assets/homeItemCovers/Stack.jpg","assets/homeItemCovers/Queue.jpg","assets/homeItemCovers/BinarySearchTree.jpg","components/Tags/tags.tsx","configs/homeItems/index.tsx","pages/Home/home.tsx","components/Console/console.tsx","pages/Sort/SortCube3d/sortCube3d.tsx","configs/loading/index.tsx","components/Scene3d/scene3d.tsx","utils/sort.ts","pages/Sort/store.ts","pages/Sort/sort.tsx","pages/AVLTree/avlTree.tsx","pages/Graph/graph.tsx","pages/BinaryHeap/binaryHeap.tsx","pages/BTree/bTree.tsx","pages/Queue/QueueCube3d/queueCube3d.tsx","utils/queue.ts","pages/Queue/store.ts","pages/Queue/queue.tsx","pages/Stack/StackCube3d/stackCube3d.tsx","utils/stack.ts","pages/Stack/stack.tsx","pages/HashTable/hashTable.tsx","components/Arrow3d/arrow3d.tsx","pages/LinkedList/LinkCube3d/linkCube3d.tsx","utils/linkedList.ts","pages/LinkedList/linkedList.tsx","pages/RedBlackTree/redBlackTree.tsx","pages/BPlusTree/bPlusTree.tsx","utils/binaryTree.ts","utils/math.ts","pages/BinarySearchTree/config.ts","pages/BinarySearchTree/store.ts","components/Line3d/line3d.tsx","components/Sphere3d/sphere3d.tsx","pages/BinarySearchTree/BSTSphere3d/bstSphere3d.tsx","pages/BinarySearchTree/binarySearchTree.tsx","configs/router/config.ts","configs/router/index.tsx","App.tsx","index.tsx"],"names":["randomNum","start","end","Math","random","toFixed","randomArr","length","arr","i","push","useHover","useState","value","setValue","ref","useRef","handleMouseOver","handleMouseOut","useEffect","node","current","addEventListener","removeEventListener","DataStrucTypes","OpeDetailTypes","ActionTypes","HomeItem","props","title","src","tag","type","onClick","hoverRef","isHover","scale","useSpring","config","stiff","div","className","style","hoverable","cover","alt","setTimeout","Meta","description","LINK_CUBE_INTERVAL_DISTANCE","DISPATCH_INTERVAL","Tags","Array","color","AVLTree","BPlusTree","BTree","BinarySearchTree","Graph","HashTable","BinaryHeap","LinkedList","Queue","RedBlackTree","Stack","Sort","Traverse","Search","Tree","BinarySearch","QuickSort","SelectSort","InsertSort","BubbleSort","MergeSort","Push","Pop","Enqueue","Dequeue","homeItemsConfig","SortPic","StackPic","QueuePic","root","Home","history","useHistory","open","setOpen","handleClick","from","size","opacity","to","map","row","gutter","xs","sm","md","col","j","lg","xl","width","height","Item","SubMenu","Console","children","operation","displayer","drawerHeight","showSilider","addText","defaultIndex","valueRange","indexRange","defaultValue","deleteText","isUpdate","isIndex","onSliderChange","onAdd","onDelete","onValueChange","onIndexChange","isUnfold","setIsUnfold","index","setIndex","radioActived","setRadioActived","displayConRef","gentle","scrollTop","scrollHeight","mode","theme","inlineCollapsed","selectable","display","icon","MenuUnfoldOutlined","visible","placement","mask","onClose","onChange","Group","e","target","min","max","defaultProps","SortCube3d","position","isActive","isLock","isSpRev","sortIndexes","sortIndex","startPosX","colorConfig","disappear","setIsHover","isClick","setIsClick","meshRef","getPosX","oldPosX","targetPosX","reverse","default","wobbly","activeColor","hoverColor","lockColor","defaultColor","useFrame","delta","abs","x","translateX","mesh","Text","fontSize","RoundedBox","args","onPointerOver","onPointerOut","meshPhongMaterial","transparent","React","memo","SceneLoader","progress","useProgress","onLoaded","Html","center","marginTop","Scene3d","cameraRef","THREE","PerspectiveCamera","makeDefault","intensity","fallback","OrbitControls","maxDistance","Environment","background","files","path","initCubes","values","getStartPosX","arrLen","quickSortSeq","l","r","sortSeq","Active","indexes","Deactive","Swap","temp","SwapDone","initState","cubes","sortDone","randomDone","opeDetails","reducer","state","action","payload","item","includes","Lock","UnLock","index1","index2","newCubes","curSortIndex","newSortIndexes","newValues","newOpeDetail","curValues","newSortIndex","SortDone","Move","oldIndexes","targetIndexes","findIndex","splice","Delete","AddDone","newEle","targetIndex","newCube","pop","Add","DeleteDone","RandomDone","newStartPosX","Default","Random","Step","useReducer","dispatch","isSceneLoaded","setIsSceneLoaded","handleRandom","handleBubbleSort","backup","bubbleSortSeq","forEach","event","handleSelectSort","indexOfMax","selectSortSeq","handleQuickSort","sequence","onBack","replace","window","location","reload","_","fillOpacity","message","warning","seq","addEleSeq","deleteEleSeq","BarChartOutlined","direction","toString","DotChartOutlined","goBack","PlusSquareOutlined","MinusSquareOutlined","QueueCube3d","key","uuidv4","Disappear","enqueueValue","shift","dequeueValue","Fragment","enqueueSeq","dequeueSeq","StackCube3d","popValue","PopDone","pushValue","startPosY","pushSeq","popSeq","Arrow3d","points","hidden","lineWidth","Line","LinkCube3d","arrowTo","moveTop","moveDown","posY","setPosY","setPosX","deltaX","y","translateY","arrowStartPosX","HeadInsert","initValues","handleHeadInsert","ShowArrow","MoveDown","headInsertSeq","handleTailInsert","getLChildValue","binaryTree","indexOfNode","getRChildValue","setLChild","lChild","setRChild","rChild","getDeepthByNodeIndex","floor","base","truth","log","addToBST","bts","indexOfRoot","nodeV","randomBST","cache","fill","initSpheres","preOrderSeq","inOrderSeq","postOrderSeq","ActiveLeft","cdnOfNodes","spheres","StartPreorder","PreOrderDetails","StartInOrder","activeLeft","activeRight","InOrderDetails","StartPostOrder","PostOrderDetails","ActiveRight","newBinaryTree","treeToString","Line3d","Sphere3d","reset","BSTCube3d","lChildPos","rChildPos","routerView","page","initBinaryTree","handlePreorder","preOrderRes","handleInorder","inOrderRes","handlePostorder","postOrderRes","sphere","hasLChild","hasRChild","RouterView","routerMap","component","Header","Content","Footer","App","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6f1cbfb.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\"\n\n/** 随机生成一个 start ~ end 的整数 */\nexport function randomNum(start: number, end: number): number {\n    return +(Math.random() * (end - start) + start).toFixed(0);\n}\n\n/** 随机生成指定长度的数组 */\nexport function randomArr(length: number): number[] {\n    const arr = [];\n    for (let i = 0; i < length; i++) {\n        arr.push(randomNum(3, 40));\n    }\n    return arr;\n}\n\n/** 判断某个元素是否 hover */\nexport function useHover() {\n    const [value, setValue] = useState(false);\n    const ref = useRef<any>();\n    const handleMouseOver = () => setValue(true);\n    const handleMouseOut = () => setValue(false);\n    useEffect(\n        () => {\n            const node = ref.current;\n            if (node) {\n                node.addEventListener(\"mouseover\", handleMouseOver);\n                node.addEventListener(\"mouseout\", handleMouseOut);\n                return () => {\n                    node.removeEventListener(\"mouseover\", handleMouseOver);\n                    node.removeEventListener(\"mouseout\", handleMouseOut);\n                };\n            }\n        },\n        [ref.current] // Recall only if ref changes\n    );\n    return [ref, value];\n}","import React from \"react\";\n\n/** 设置 SortCube 之间的间距 */\nexport const SORT_CUBE_INTERVAL_DISTANCE = 2;\n\n/** 设置 StackCube 之间的间距 */\nexport const STACK_CUBE_INTERVAL_DISTANCE = 0.8;\n\n/** 设置 QueueCube 之间的间距 */\nexport const QUEUE_CUBE_INTERVAL_DISTANCE = 2.2;\n\n/** 设置 LinkCube 之间的间距 */\nexport const LINK_CUBE_INTERVAL_DISTANCE = 3.5;\n\n/** 设置 3d 物品在 scene 中的基准 y 轴坐标 */\nexport const BASE_POSY = -2;\n\n\n/** 520 ~ 120\n \n\n\n */\n\n/** 遍历细节数组，分发任务的间隔时间 */\nexport const DISPATCH_INTERVAL = 320;\n\n\nexport interface IBaseProps {\n    style?: React.CSSProperties;\n    className?: string;\n}\n\n/** 数据结构类型枚举同时也是tag的类型 */\nexport enum DataStrucTypes {\n    Sort,\n    Array,\n    BubbleSort,\n    SelectSort,\n    InsertSort,\n    QuickSort,\n    MergeSort,\n\n    LinkedList,\n    HeadInsert,\n    TailInsert,\n    Queue,\n    Enqueue,\n    Dequeue,\n    Stack,\n    Push,\n    Pop,\n\n    Search,\n    HashTable,\n    BinarySearch,\n\n    Tree,\n    BinarySearchTree,\n    BinaryHeap,\n    AVLTree,\n    BTree,\n    BPlusTree,\n    RedBlackTree,\n\n    Graph,\n    Traverse,\n}\n\n/** 3d几何体通用配置 */\nexport interface IGeometryProps {\n    value: number | null;\n    disappear?: boolean;\n    colorConfig?: IColorConfig\n    position?: any;\n    isActive?: boolean;\n    isLock?: boolean;\n    isSpRev?: boolean;\n}\n\n/** 控制台操作细节类型 */\nexport enum OpeDetailTypes {\n    Swap = '交换',\n    Add = '新增元素',\n    Delete = '删除元素',\n    HeadInsert = '头部插入',\n    TailInsert = '尾部插入',\n    Pop = '弹栈',\n    Push = '压栈',\n    Enqueue = '入队',\n    Dequeue = '出队',\n    PreOrderDetails = '前序遍历',\n    InOrderDetails = '中序遍历',\n    PostOrderDetails = '后序遍历',\n    Default = '数据源'\n}\n\n\nexport type IReducer<T> = (state: T, action: IAction) => T;\n\nexport interface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nexport enum ActionTypes {\n    Pop,\n    PopDone,\n    Push,\n    PushDone,\n    Active,\n    ActiveLeft,\n    ActiveRight,\n    Deactive,\n    Swap,\n    SwapDone,\n    Lock,\n    UnLock,\n    SortDone,\n    RandomDone,\n    Random,\n    Add,\n    AddDone,\n    Delete,\n    DeleteDone,\n    Search,\n    Move,\n    Enqueue,\n    Dequeue,\n    DequeueDone,\n    Disappear,\n    HeadInsert,\n    TailInsert,\n    ShowArrow,\n    MoveDown,\n    MoveTop,\n    StartPreorder,\n    StartInOrder,\n    StartPostOrder\n}\n\nexport interface IColorConfig {\n    /** 默认颜色 */\n    defaultColor?: string;\n    /** hover颜色 */\n    hoverColor?: string;\n    /** active颜色 */\n    activeColor?: string;\n    /** lock颜色 */\n    lockColor?: string;\n}\n\n\nexport type Points = [number, number, number][];\n","import { useSpring, animated, config } from 'react-spring'\nimport { Card } from 'antd'\nimport { DataStrucTypes, IBaseProps } from '../../types'\nimport { useHover } from '../../utils'\nimport './homeItem.scss'\n\nexport interface IHomeItemProps extends IBaseProps {\n    /** 卡片标题 */\n    title: string;\n    /** 数据结构类型 */\n    type: DataStrucTypes;\n    /** 图片资源 */\n    src: string;\n    /** 标签 */\n    tag: React.ReactNode;\n    /** 点击事件 */\n    onClick: (type: DataStrucTypes) => void;\n}\n\nconst HomeItem: React.FC<IHomeItemProps> = (props) => {\n    const { title, src, tag, type, onClick } = props;\n    const [hoverRef, isHover] = useHover();\n\n    const { scale } = useSpring({\n        scale: (\n            isHover ? 1.05 : 1\n        ),\n        config: config.stiff\n    });\n\n    return (\n        <animated.div\n            ref={hoverRef as any}\n            className='homeItem'\n            style={{ scale }}\n        >\n            <Card\n                hoverable\n                cover={<img src={src} alt='pic' />}\n                onClick={() => { setTimeout(() => { onClick(type) }, 250) }}\n            >\n                <Card.Meta\n                    title={title}\n                    description={tag}\n                />\n            </Card>\n        </animated.div>\n\n    )\n}\n\nexport default HomeItem;","export default __webpack_public_path__ + \"static/media/Sort.af83f2f6.jpg\";","export default __webpack_public_path__ + \"static/media/Stack.83affc03.jpg\";","export default __webpack_public_path__ + \"static/media/Queue.5d3f80d2.jpg\";","export default __webpack_public_path__ + \"static/media/BinarySearchTree.0ea5af15.jpg\";","import { Tag } from 'antd'\nimport { DataStrucTypes, IBaseProps } from '../../types';\nimport './tags.scss'\n\n\n\ninterface ITagsProps extends IBaseProps {\n    /** 标签组类型 */\n    type: DataStrucTypes\n}\n\nconst Tags: React.FC<ITagsProps> = (props) => {\n    const { type } = props;\n\n    switch (type) {\n        case DataStrucTypes.Array:\n            return (<div className='tags-warp'>\n                <Tag color=\"geekblue\">数组</Tag>\n            </div>);\n\n        case DataStrucTypes.AVLTree:\n            return (<div className='tags-warp'>\n                <Tag color=\"geekblue\">avl树</Tag>\n            </div>);\n\n        case DataStrucTypes.BPlusTree:\n            return (<div className='tags-warp'>\n                <Tag color=\"geekblue\">B+树</Tag>\n            </div>);\n\n        case DataStrucTypes.BTree:\n            return (<div className='tags-warp'>\n                <Tag color=\"geekblue\">B树</Tag>\n            </div>);\n\n        case DataStrucTypes.BinarySearchTree:\n            return (<div className='tags-warp'>\n                <Tag color=\"geekblue\">二叉搜索树</Tag>\n            </div>);\n\n        case DataStrucTypes.Graph:\n            return (<div className='tags-warp'>\n                <Tag color=\"geekblue\">图论</Tag>\n            </div>);\n\n        case DataStrucTypes.HashTable:\n            return (<div className='tags-warp'>\n                <Tag color=\"geekblue\">哈希表</Tag>\n            </div>);\n\n        case DataStrucTypes.BinaryHeap:\n            return (<div className='tags-warp'>\n                <Tag color=\"geekblue\">二叉堆</Tag>\n            </div>);\n\n        case DataStrucTypes.LinkedList:\n            return (<div className='tags-warp'>\n                <Tag color=\"geekblue\">链表</Tag>\n            </div>);\n\n        case DataStrucTypes.Queue:\n            return (<div className='tags-warp'>\n                <Tag color=\"geekblue\">队列</Tag>\n            </div>);\n\n        case DataStrucTypes.RedBlackTree:\n            return (<div className='tags-warp'>\n                <Tag color=\"geekblue\">红黑树</Tag>\n            </div>);\n\n        case DataStrucTypes.Stack:\n            return (<div className='tags-warp'>\n                <Tag color=\"geekblue\">栈</Tag>\n            </div>);\n        case DataStrucTypes.Sort:\n            return (<div className='tags-warp'>\n                <Tag color=\"geekblue\">排序</Tag>\n            </div>);\n        case DataStrucTypes.Traverse:\n            return (<div className='tags-warp'>\n                <Tag color=\"orange\">遍历</Tag>\n            </div>);\n        case DataStrucTypes.Search:\n            return (<div className='tags-warp'>\n                <Tag color=\"orange\">搜索</Tag>\n            </div>);\n        case DataStrucTypes.Tree:\n            return (<div className='tags-warp'>\n                <Tag color=\"orange\">树</Tag>\n            </div>);\n\n        case DataStrucTypes.BinarySearch:\n            return (<div className='tags-warp'>\n                <Tag color=\"orange\">二分</Tag>\n            </div>);\n        case DataStrucTypes.QuickSort:\n            return (<div className='tags-warp'>\n                <Tag color=\"orange\">快排</Tag>\n            </div>);\n        case DataStrucTypes.SelectSort:\n            return (<div className='tags-warp'>\n                <Tag color=\"orange\">选择</Tag>\n            </div>);\n        case DataStrucTypes.InsertSort:\n            return (<div className='tags-warp'>\n                <Tag color=\"orange\">插入</Tag>\n            </div>);\n        case DataStrucTypes.BubbleSort:\n            return (<div className='tags-warp'>\n                <Tag color=\"orange\">冒泡</Tag>\n            </div>);\n        case DataStrucTypes.MergeSort:\n            return (<div className='tags-warp'>\n                <Tag color=\"orange\">归并</Tag>\n            </div>);\n        case DataStrucTypes.Push:\n            return (<div className='tags-warp'>\n                <Tag color=\"orange\">压栈</Tag>\n            </div>);\n        case DataStrucTypes.Pop:\n            return (<div className='tags-warp'>\n                <Tag color=\"orange\">弹栈</Tag>\n            </div>);\n        case DataStrucTypes.Enqueue:\n            return (<div className='tags-warp'>\n                <Tag color=\"orange\">入队</Tag>\n            </div>);\n        case DataStrucTypes.Dequeue:\n            return (<div className='tags-warp'>\n                <Tag color=\"orange\">出队</Tag>\n            </div>);\n        default:\n            return (\n                <></>\n            )\n    }\n}\n\nexport default Tags;","import { IHomeItemProps } from \"../../components/HomeItem/homeItem\";\nimport { DataStrucTypes } from \"../../types\";\nimport Pic from '../../assets/homeItemCovers/84993086_p0.jpg'\nimport SortPic from '../../assets/homeItemCovers/Sort.jpg';\nimport StackPic from '../../assets/homeItemCovers/Stack.jpg';\nimport LinkedListPic from '../../assets/homeItemCovers/LinkedList.jpg';\nimport QueuePic from '../../assets/homeItemCovers/Queue.jpg';\nimport BinarySearchTree from '../../assets/homeItemCovers/BinarySearchTree.jpg';\nimport Tags from \"../../components/Tags/tags\";\n\n/** home 的 item 数据配置 */\nexport const homeItemsConfig: Omit<IHomeItemProps, 'onClick'>[][] = [\n    // 第一排\n    [\n        {\n            src: SortPic,\n            tag: (\n                <>\n                    <Tags type={DataStrucTypes.Array} />\n                    <Tags type={DataStrucTypes.BubbleSort} />\n                    <Tags type={DataStrucTypes.SelectSort} />\n                    {/* <Tags type={DataStrucTypes.InsertSort} /> */}\n                    <Tags type={DataStrucTypes.QuickSort} />\n                </>\n            ),\n            title: '排序',\n            type: DataStrucTypes.Sort\n        },\n        // {\n        //     src: LinkedListPic,\n        //     tag: <Tags type={DataStrucTypes.LinkedList} />,\n        //     title: '链表',\n        //     type: DataStrucTypes.LinkedList\n        // },\n        {\n            src: StackPic,\n            tag: (\n                <>\n                    <Tags type={DataStrucTypes.Stack} />\n                    <Tags type={DataStrucTypes.Push} />\n                    <Tags type={DataStrucTypes.Pop} />\n                </>\n            ),\n            title: '栈',\n            type: DataStrucTypes.Stack\n        },\n        {\n            src: QueuePic,\n            tag: (\n                <>\n                    <Tags type={DataStrucTypes.Queue} />\n                    <Tags type={DataStrucTypes.Enqueue} />\n                    <Tags type={DataStrucTypes.Dequeue} />\n                </>\n            ),\n            title: '队列',\n            type: DataStrucTypes.Queue\n        },\n        {\n            src: BinarySearchTree,\n            tag: (\n                <>\n                    <Tags type={DataStrucTypes.BinarySearchTree} />\n                    <Tags type={DataStrucTypes.Traverse} />\n                </>\n            ),\n            title: '二叉搜索树',\n            type: DataStrucTypes.BinarySearchTree\n        },\n    ],\n    // 第二排\n    // [\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.HashTable} />,\n    //         title: '哈希表',\n    //         type: DataStrucTypes.HashTable\n    //     },\n    //     {\n    //         src: BinarySearchTree,\n    //         tag: (\n    //             <Tags type={DataStrucTypes.BinarySearchTree} />\n    //         ),\n    //         title: '二叉搜索树',\n    //         type: DataStrucTypes.BinarySearchTree\n    //     },\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.BinaryHeap} />,\n    //         title: '二叉堆',\n    //         type: DataStrucTypes.BinaryHeap\n    //     },\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.AVLTree} />,\n    //         title: 'AVL树',\n    //         type: DataStrucTypes.AVLTree\n    //     },\n    // ],\n    // // 第三排\n    // [\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.RedBlackTree} />,\n    //         title: '红黑树',\n    //         type: DataStrucTypes.RedBlackTree\n    //     },\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.BTree} />,\n    //         title: 'B树',\n    //         type: DataStrucTypes.BTree\n    //     },\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.BPlusTree} />,\n    //         title: 'B+树',\n    //         type: DataStrucTypes.BPlusTree\n    //     },\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.Graph} />,\n    //         title: '图结构',\n    //         type: DataStrucTypes.Graph\n    //     },\n\n    // ],\n];","import { useState } from 'react'\nimport { Col, Row } from 'antd';\nimport { useHistory } from 'react-router';\nimport { useSpring, animated, config, useSpringRef, useTransition, useChain } from 'react-spring/web'\nimport HomeItem from '../../components/HomeItem/homeItem';\nimport { DataStrucTypes } from '../../types';\nimport { homeItemsConfig } from '../../configs/homeItems';\nimport './home.scss'\n\nconst root = '/data-structure-visualization'\n\nconst Home = () => {\n    const history = useHistory();\n    const [open, setOpen] = useState(false)\n\n    // const springApi = useSpringRef()\n    // const { size, ...rest } = useSpring({\n    //     ref: springApi,\n    //     config: config.stiff,\n    //     from: { size: '20%', opacity: 0 },\n    //     to: {\n    //         size: open ? '20' : '100%',\n    //         opacity: open ? 0 : 1,\n    //     },\n    // })\n\n    // const transApi = useSpringRef()\n    // const transition = useTransition(open ? data : [], {\n    //     ref: transApi,\n    //     trail: 400 / 12,\n    //     from: { opacity: 0, scale: 0 },\n    //     enter: { opacity: 1, scale: 1 },\n    //     leave: { opacity: 0, scale: 0 },\n    // })\n\n    // // This will orchestrate the two animations above, comment the last arg and it creates a sequence\n    // useChain(open ? [transApi, springApi] : [springApi, transApi], [\n    //     0,\n    //     open ? 0.1 : 0.6,\n    // ])\n\n\n    const handleClick = (type: DataStrucTypes) => {\n        switch (type) {\n            case DataStrucTypes.Sort:\n                return history.push(root + '/sort');\n            case DataStrucTypes.LinkedList:\n                return history.push(root + '/linkedList')\n            case DataStrucTypes.Stack:\n                return history.push(root + '/stack')\n            case DataStrucTypes.Queue:\n                return history.push(root + '/queue')\n            case DataStrucTypes.HashTable:\n                return history.push(root + '/hashTable')\n            case DataStrucTypes.BinarySearchTree:\n                return history.push(root + '/binarySearchTree')\n            case DataStrucTypes.BinaryHeap:\n                return history.push(root + '/binaryHeap')\n            case DataStrucTypes.AVLTree:\n                return history.push(root + '/avlTree')\n            case DataStrucTypes.RedBlackTree:\n                return history.push(root + '/redBlackTree')\n            case DataStrucTypes.BTree:\n                return history.push(root + '/bTree')\n            case DataStrucTypes.BPlusTree:\n                return history.push(root + '/bPlusTree')\n            case DataStrucTypes.Graph:\n                return history.push(root + '/graph')\n        }\n    }\n    const { size, opacity } = useSpring({\n        from: {\n            size: '20%',\n            opacity: '0',\n        },\n        to: {\n            size: open ? '20%' : '100%',\n            opacity: open ? '0' : '1',\n        },\n        config: config.stiff\n    })\n    return (\n        <div className='home-warp'>\n            {homeItemsConfig.map((row, i) => (\n                <Row gutter={{ xs: 8, sm: 16, md: 24 }} key={i + '&'}>\n                    {row.map((col, j) => (\n                        <Col xs={12} sm={12} md={6} lg={6} xl={6} key={i + '&' + j}>\n                            <animated.div\n                                className='homeItem-warp'\n                                style={{ width: size, height: size, opacity }}\n                                onClick={() => { setOpen(true) }}\n                            >\n                                <HomeItem\n                                    src={col.src}\n                                    tag={col.tag}\n                                    title={col.title}\n                                    type={col.type}\n                                    onClick={handleClick}\n                                />\n                            </animated.div>\n                        </Col>\n                    ))}\n                </Row>\n            ))}\n        </div >\n    )\n}\n\nexport default Home;","import { useEffect, useRef, useState } from \"react\";\nimport { Menu, InputNumber, Button, Drawer, Slider, Radio } from \"antd\";\nimport { MenuUnfoldOutlined } from \"@ant-design/icons\";\nimport { useHover } from \"../../utils\";\nimport { IBaseProps } from \"../../types\";\nimport { animated, config, useSpring } from \"react-spring/web\";\nimport './console.scss'\n\nconst { Item, SubMenu } = Menu;\n\ninterface IConsoleProps extends IBaseProps {\n    /** 控制台左边的操作界面 */\n    operation?: React.ReactNode;\n    /** 控制台右边的显示器 */\n    displayer?: React.ReactNode;\n    /** drawer的高度 */\n    drawerHeight?: number;\n    /** 是否有silider */\n    showSilider?: boolean;\n    /** 是否可以添加、删除元素 */\n    isUpdate?: boolean;\n    /** 是否显示序号输入框 */\n    isIndex?: boolean;\n    /** 设置value范围 */\n    valueRange?: [number, number];\n    /** 设置index范围 */\n    indexRange?: [number, number];\n    /** 设置value默认值 */\n    defaultValue?: number;\n    /** 设置index默认值 */\n    defaultIndex?: number;\n    /** 添加按钮的文字 */\n    addText?: string;\n    /** 删除按钮的文字 */\n    deleteText?: string;\n    /** slider变化时的回调 */\n    onSliderChange?: (value: number) => void;\n    /** value改变时的回调 */\n    onValueChange?: (value: number) => void;\n    /** index改变时的回调 */\n    onIndexChange?: (index: number) => void;\n    /** 点击添加时的回调 */\n    onAdd?: (value: number, index: number) => void;\n    /** 点击删除时的回调 */\n    onDelete?: (index: number) => void;\n}\n\nconst Console: React.FC<IConsoleProps> = (props) => {\n\n    const {\n        children,\n        style,\n        operation,\n        displayer,\n        drawerHeight,\n        showSilider,\n        addText,\n        defaultIndex,\n        valueRange,\n        indexRange,\n        defaultValue,\n        deleteText,\n        isUpdate,\n        isIndex,\n        onSliderChange,\n        onAdd,\n        onDelete,\n        onIndexChange,\n        onValueChange\n    } = props;\n\n    const [hoverRef, isHover] = useHover();\n    const [isUnfold, setIsUnfold] = useState(false);\n    /** 控制台的添加删除元素的value和index */\n    const [value, setValue] = useState(defaultValue || 0);\n    const [index, setIndex] = useState(defaultIndex || 0);\n\n    // 被激活的 radio\n    const [radioActived, setRadioActived] = useState(1);\n\n    const displayConRef = useRef<HTMLDivElement>();\n    const { opacity } = useSpring({\n        opacity: isHover ? 0.7 : 0.2,\n        config: config.gentle\n    })\n\n    /** 当 displayer 里面的内容变多的时候，始终保持其滚动条位于底部 */\n    useEffect(() => {\n        if (displayConRef.current) displayConRef.current.scrollTop = displayConRef.current.scrollHeight;\n    }, [displayConRef.current?.scrollHeight])\n\n    return (\n        <animated.div\n            className='console-warp'\n            ref={hoverRef as any}\n            style={{ ...style, opacity }}\n        >\n            <Menu\n                className='console'\n                mode=\"inline\"\n                theme=\"dark\"\n                inlineCollapsed={true}\n                selectable={false}\n                style={{ display: isUnfold ? 'none' : 'inline-block' }}\n            >\n                <Item\n                    icon={<MenuUnfoldOutlined />}\n                    key='item0'\n                    onClick={() => {\n                        setIsUnfold(true);\n                    }}\n                >\n                    展开操作台\n                </Item>\n                {children}\n            </Menu>\n            <Drawer\n                className='console-drawer'\n                title='操作台'\n                height={drawerHeight}\n                visible={isUnfold}\n                placement='bottom'\n                mask={false}\n                onClose={() => { setIsUnfold(false) }}\n            >\n\n                <div className='operation'>\n                    {showSilider &&\n                        <div className='slider-warp'>\n                            动画速度：\n                            <Slider\n                                className='slider'\n                                defaultValue={32}\n                                onChange={(value: number) => onSliderChange?.(value)}\n                            />\n                        </div>\n                    }\n\n                    {/* 显示操作按钮 */}\n                    {operation}\n\n                    {/* 显示添加、删除 */}\n                    {\n                        isUpdate &&\n                        <div className='input-group'>\n                            <Radio.Group\n                                className='radio-group'\n                                defaultValue={1}\n                                onChange={(e) => {\n                                    setRadioActived(e.target.value);\n                                }}\n                            >\n                                <Radio value={1}>{addText}</Radio>\n                                <Radio value={2}>{deleteText}</Radio>\n                            </Radio.Group>\n\n                            <div className='label-group'>\n                                {\n                                    radioActived === 1 &&\n                                    <label>\n                                        <span className='label-name'>数值:</span>\n                                        <InputNumber\n                                            min={valueRange?.[0]}\n                                            max={valueRange?.[1]}\n                                            defaultValue={defaultValue}\n                                            onChange={(value) => {\n                                                setValue(value as number)\n                                                onValueChange?.(value);\n                                            }}\n                                        />\n                                    </label>\n                                }\n                                {\n                                    isIndex &&\n                                    <label>\n                                        <span className='label-name'>序号:</span>\n                                        <InputNumber\n                                            min={indexRange?.[0]}\n                                            max={valueRange?.[1]}\n                                            defaultValue={defaultIndex}\n                                            onChange={(index) => {\n                                                setIndex(index as number)\n                                            }}\n                                        />\n                                    </label>\n                                }\n\n                                {radioActived === 1 && <Button type='primary' onClick={() => onAdd?.(value, index)}>{addText}</Button>}\n                                {radioActived === 2 && <Button type='primary' onClick={() => onDelete?.(index)}>{deleteText}</Button>}\n                            </div>\n                        </div>\n                    }\n                </div>\n\n                <div className='displayer'>\n                    <div className='content' ref={displayConRef as any}>\n                        {displayer}\n                    </div>\n                </div>\n            </Drawer>\n        </animated.div>\n    )\n}\n\nConsole.defaultProps = {\n    showSilider: true,\n    addText: '添加',\n    deleteText: '删除',\n    defaultIndex: 2,\n    defaultValue: 3,\n    valueRange: [3, 90],\n    indexRange: [0, 10],\n    isUpdate: true,\n    isIndex: true\n}\n\nexport { Item, SubMenu };\nexport default Console;\n\n\n\n\n","import * as THREE from 'three'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { animated, useSpring, config } from 'react-spring/three'\nimport { RoundedBox, Text } from \"@react-three/drei\";\nimport { useFrame } from '@react-three/fiber'\nimport { BASE_POSY, SORT_CUBE_INTERVAL_DISTANCE, IGeometryProps, DISPATCH_INTERVAL } from '../../../types';\nimport { quickSortSeq } from '../../../utils/sort';\n\ninterface ISortCube3dProps extends IGeometryProps {\n    sortIndexes: number[];\n    sortIndex: number;\n    startPosX: any;\n}\n\nconst SortCube3d: React.FC<ISortCube3dProps> = (props) => {\n\n    const {\n        position,\n        isActive,\n        isLock,\n        isSpRev,\n        value,\n        sortIndexes,\n        sortIndex,\n        startPosX,\n        colorConfig,\n        disappear\n    } = props;\n\n    const [isHover, setIsHover] = useState(false)\n    const [isClick, setIsClick] = useState(false)\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    /** 根据传入的排序下标，获取到 cube 所在的 X 坐标 */\n    const getPosX = (sortIndex: number) => startPosX + (sortIndex * SORT_CUBE_INTERVAL_DISTANCE);\n\n    /** 移动元素时，获取其起始位置 */\n    const getOrginPosX = () => {\n        return getPosX(sortIndex);\n    }\n\n    /** 移动元素时，获取其目标位置 */\n    const getTargetPosX = () => {\n        return getPosX(sortIndexes[sortIndexes.length - 1]);\n    }\n\n    const oldPosX = getOrginPosX();\n    const targetPosX = getTargetPosX();\n\n    /** 配置扩缩动画效果 */\n    const { scale } = useSpring({\n        reverse: disappear || isSpRev,\n        from: { scale: 0 },\n        to: { scale: isClick ? 1.10 : 1 },\n        config: (disappear || isSpRev) ? config.default : config.wobbly\n    })\n\n    /** 配置颜色过渡效果 */\n    const { color } = useSpring({\n        color: (\n            isClick ? colorConfig?.activeColor :\n                isHover ? colorConfig?.hoverColor :\n                    isLock ? colorConfig?.lockColor : colorConfig?.defaultColor\n        )\n    })\n\n    /** 扫描数组的时候，如果改变了 active 属性，则给它设置一个点击效果 */\n    useEffect(() => {\n        isActive ? setIsClick(true) : setIsClick(false);\n    }, [isActive])\n\n\n    useFrame(() => {\n\n        const delta = Math.abs(oldPosX - targetPosX) / (DISPATCH_INTERVAL / 20);\n\n        // 如果当前 sortIndex 需要改变\n        if (delta) {\n\n            // mesh 需要往右移\n            if (oldPosX - targetPosX < 0 && meshRef.current.position.x < targetPosX) {\n                meshRef.current.translateX(delta);\n                if (meshRef.current.position.x >= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n\n            // mesh 需要往左移\n            else if (oldPosX - targetPosX > 0 && meshRef.current.position.x > targetPosX) {\n                meshRef.current.translateX(-delta);\n                if (meshRef.current.position.x <= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n        }\n    })\n\n    return (\n        <animated.mesh\n            scale={scale}\n            ref={meshRef}\n            position={position}\n        >\n            <Text\n                fontSize={0.5}\n                color='black'\n            >\n                {value}\n            </Text>\n            <RoundedBox\n                args={[1, value ? value * 0.2 : 0, 1]}\n                onClick={() => setIsClick(!isClick)}\n                onPointerOver={() => setIsHover(true)}\n                onPointerOut={() => setIsHover(false)}\n            >\n                <animated.meshPhongMaterial\n                    color={color}\n                    opacity={0.5}\n                    transparent={true}\n                // vertexColors={true}\n                // color={[0xffff00, 0xff00ff, 0x00ffff]}\n                // specular={new THREE.Color(0x4488ee)}\n                // shininess={12}\n                // wireframeLinewidth={3}\n                // wireframe={true}\n                />\n            </RoundedBox>\n        </animated.mesh>\n    )\n}\n\nSortCube3d.defaultProps = {\n    colorConfig: {\n        defaultColor: 'wheat',\n        activeColor: 'orange',\n        hoverColor: 'skyblue',\n        lockColor: '#8076a3'\n    }\n}\n\nexport default React.memo(SortCube3d);","import { useEffect } from 'react';\nimport { Html, useProgress } from '@react-three/drei';\nimport { Spin } from 'antd';\n\nexport function SceneLoader(props: any) {\n    const { progress } = useProgress();\n    const { onLoaded } = props;\n    useEffect(() => {\n        if (progress === 100) {\n            onLoaded?.();\n        }\n    }, [progress])\n\n    return (\n        <Html center style={{ marginTop: '200px' }}>\n            <Spin size='large' />\n            {/* {progress} % loaded */}\n        </Html>\n    );\n}\n\n\n\n\n\n\n","import * as THREE from 'three'\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport { Environment, Html, OrbitControls, PerspectiveCamera, Reflector, TransformControls, useProgress } from \"@react-three/drei\";\nimport { SceneLoader } from '../../configs/loading';\n\nimport './scene3d.scss'\n\n\ninterface IScene3dProps {\n    /** 场景加载完毕后的回调 */\n    onLoaded?: () => void;\n}\n\nconst Scene3d: React.FC<IScene3dProps> = (props) => {\n    const {\n        children,\n        onLoaded\n    } = props;\n\n    const cameraRef = useRef<THREE.PerspectiveCamera>(null!);\n\n    // useEffect(() => {\n    //     cameraRef.current?.lookAt(new THREE.Vector3(10, 10, 1))\n    // })\n\n\n    const [cameraPos, setCameraPos] = useState<THREE.Vector3>(new THREE.Vector3(0, 0, 5));\n\n    // const upDate = () => {\n    //     // console.log(123);\n    //     // return new THREE.Camera()\n    // }\n\n\n    // const handleKeyDown = (ev: KeyboardEvent) => {\n    //     // const delta = new THREE.Clock(true).getDelta();\n    //     const moveDistance = 1;\n    //     switch (ev.key) {\n    //         case 'w':\n    //             // setCameraPos((pre) => (new THREE.Vector3(pre.x, pre.y, pre.z - moveDistance)));\n    //             break;\n    //         case 'a':\n    //             setCameraPos((pre) => (new THREE.Vector3(pre.x - moveDistance, pre.y, pre.z)));\n    //             break;\n    //         case 'd':\n    //             setCameraPos((pre) => (new THREE.Vector3(pre.x + moveDistance, pre.y, pre.z)));\n    //             break;\n    //         case 's':\n    //             setCameraPos((pre) => (new THREE.Vector3(pre.x, pre.y, pre.z + moveDistance)));\n\n    //             break;\n    //     }\n    // }\n\n    // useEffect(() => {\n    //     document.addEventListener('keydown', handleKeyDown);\n    //     return () => {\n    //         document.removeEventListener('keydown', handleKeyDown);\n    //     }\n    // }, [])\n\n\n\n    // useEffect(() => {\n    //     if (cameraRef.current) {\n    //         cameraRef.current.lookAt(new THREE.Vector3(0, -10, 16))\n    //     }\n    //     // console.log(cameraRef.current);\n    //     // cameraRef.current?.lookAt(new THREE.Vector3(0, -10, 16))\n    // })\n\n\n    return (\n        <div className='scene3d-warp'>\n            <Canvas>\n                <PerspectiveCamera\n                    ref={cameraRef}\n                    makeDefault\n                    position={[0, 0, 16]}\n                />\n                <ambientLight intensity={0.3} />\n                <directionalLight color=\"white\" position={[1, 1, 1]} />\n\n                <Suspense fallback={<SceneLoader onLoaded={onLoaded} />}>\n                    {/** <Reflector\n                    resolution={1024}\n                    args={[10, 10]}\n                    mirror={0.75}\n                    // mixBlur={mixBlur || 0}\n                    mixStrength={1}\n                    rotation={[-Math.PI / 2, 0, Math.PI / 2]}\n                    minDepthThreshold={0.8}\n                    maxDepthThreshold={1.2}\n                    // depthScale={depthScale || 0}\n                    depthToBlurRatioBias={0.2}\n                    debug={0}\n                    // distortion={distortion || 0}\n                    // distortionMap={distortionMap}\n                >\n                    \n                    {(Material, props) => (\n                        <Material\n                            color=\"#ddd\"\n                            metalness={0}\n                            // roughnessMap={roughness}\n                            roughness={1}\n                            // normalMap={normal}\n                            // normalScale={_normalScale}\n                            {...props}\n                        />\n                    )}\n                </Reflector> */}\n                    {/** <TransformControls> */}\n                    {children}\n                    {/** </TransformControls> */}\n\n\n                    <OrbitControls\n                        maxDistance={30}\n                    />\n                    <Environment\n                        // preset='night'  \n                        background\n                        files={['ev.jpg', 'ev.jpg', 'ev.jpg', 'ev.jpg', 'ev.jpg', 'ev.jpg']}\n                        path='./'\n                    />\n                </Suspense>\n            </Canvas>\n        </div>\n\n    )\n}\n\nexport default Scene3d;","import { ISortCube } from \"../pages/Sort/store\";\nimport { ActionTypes, SORT_CUBE_INTERVAL_DISTANCE } from \"../types\";\n\n/** 初始化 cubes */\nexport function initCubes(values: number[]): ISortCube[] {\n    return values.map((value, index) => ({\n        value,\n        isActive: false,\n        isLock: false,\n        disappear: false,\n        sortIndexes: [index],\n        sortIndex: index\n    }));\n}\n\n/** 根据数组长度，计算出第一个 cube 的 position 的 x 坐标 */\nexport function getStartPosX(arrLen: number): number {\n    return -(arrLen - 1) * SORT_CUBE_INTERVAL_DISTANCE / 2;\n}\n\n/** 传入一组序列，判断其是否有序 */\nexport function isSorted(values: number[]): boolean {\n    return false;\n}\n\n/*\n    0 1 2 3 4 5 6 7 \n    0 1 2 3 x 4 5 6 7\n\n*/\n\n/** 返回向数组插值时，数组位移的细节 */\nexport function addEleSeq(arr: number[], newEle: number, targetIndex: number) {\n\n    // 记录动画细节\n    const seq = [];\n\n    // 记录待位移的元素下标\n    const oldIndexes: number[] = [];\n    arr.forEach((_, i) => { i >= targetIndex && oldIndexes.push(i) });\n\n    // 记录位移元素的目标下标\n    const targetIndexes: number[] = [];\n    oldIndexes.forEach((value) => { targetIndexes.push(value + 1) });\n\n    // 先激活需要位移的元素\n    seq.push({ type: ActionTypes.Active, payload: oldIndexes });\n\n    // 开始位移，并扩容出现新的下标\n    seq.push({\n        type: ActionTypes.Move,\n        payload: {\n            oldIndexes,\n            targetIndexes\n        }\n    });\n\n    // 取消激活\n    seq.push({ type: ActionTypes.Deactive, payload: targetIndexes })\n\n    // 在 targetIndex 处添加元素\n    seq.push({\n        type: ActionTypes.AddDone,\n        payload: {\n            newEle,\n            targetIndex\n        }\n    });\n\n    return seq;\n}\n\n/** 返回向数组删除元素时，数组位移的细节 */\nexport function deleteEleSeq(arr: number[], targetIndex: number) {\n\n    // 记录动画细节\n    const seq = [];\n\n    // 记录待位移的元素下标\n    const oldIndexes: number[] = [];\n    arr.forEach((_, i) => { i >= targetIndex && oldIndexes.push(i) });\n\n    // 记录位移元素的目标下标\n    const targetIndexes: number[] = [];\n    oldIndexes.forEach((value) => { targetIndexes.push(value - 1) });\n\n    // 先删除 targetIndex 位置的元素\n    seq.push({ type: ActionTypes.Delete, payload: targetIndex });\n\n    // 激活需要位移的元素\n    seq.push({ type: ActionTypes.Active, payload: oldIndexes });\n\n    // 开始位移，同时缩容\n    seq.push({\n        type: ActionTypes.Move,\n        payload: {\n            oldIndexes,\n            targetIndexes\n        }\n    });\n\n    // 取消激活\n    seq.push({ type: ActionTypes.Deactive, payload: targetIndexes })\n\n    // 删除完毕，修改内部的 sortIndex\n    seq.push({ type: ActionTypes.DeleteDone, payload: targetIndex })\n\n    return seq;\n}\n\n/** 返回冒泡排序细节 */\nexport function bubbleSortSeq(arr: number[]) {\n    let backup = [...arr];\n    let sortSeq = [];\n    for (let i = backup.length - 1; i >= 0; i--) {\n        for (let j = 0; j < i; j++) {\n            sortSeq.push({ type: ActionTypes.Active, indexes: [j, j + 1] });\n            if (backup[j] > backup[j + 1]) {\n                let temp = backup[j];\n                backup[j] = backup[j + 1];\n                backup[j + 1] = temp;\n                sortSeq.push({ type: ActionTypes.Swap, indexes: [j, j + 1] });\n                sortSeq.push({ type: ActionTypes.SwapDone, indexes: [j, j + 1] });\n            }\n            sortSeq.push({ type: ActionTypes.Deactive, indexes: [j, j + 1] })\n        }\n        sortSeq.push({ type: ActionTypes.Lock, indexes: [i] });\n    }\n    sortSeq.push({ type: ActionTypes.SortDone })\n    return sortSeq;\n}\n\n/** 返回选择排序细节 */\nexport function selectSortSeq(arr: number[]) {\n    let backup = [...arr];\n    let sortSeq = [];\n    for (let i = backup.length - 1; i >= 0; i--) {\n        let max = -Infinity;\n        let indexOfMax = -1;\n        for (let j = 0; j <= i; j++) {\n            sortSeq.push({ type: ActionTypes.Active, indexes: [j] });\n            if (backup[j] > max) {\n                sortSeq.push({ type: ActionTypes.UnLock, indexes: [indexOfMax] })\n                max = backup[j];\n                indexOfMax = j;\n                sortSeq.push({ type: ActionTypes.Lock, indexes: [j] })\n            }\n            sortSeq.push({ type: ActionTypes.Deactive, indexes: [j] });\n        }\n        sortSeq.push({ type: ActionTypes.Lock, indexes: [indexOfMax] })\n        let temp = backup[i];\n        backup[i] = max;\n        backup[indexOfMax] = temp;\n        sortSeq.push({ type: ActionTypes.Swap, indexes: [indexOfMax, i] })\n        sortSeq.push({ type: ActionTypes.SwapDone, indexes: [indexOfMax, i] });\n    }\n    sortSeq.push({ type: ActionTypes.SortDone });\n    return sortSeq\n}\n\n/** 返回快速排序细节 */\nexport function quickSortSeq(arr: number[], l: number, r: number, sortSeq: any[]) {\n    if (l >= r) return;\n\n    let i = l - 1, j = r + 1, x = arr[l + r >> 1];\n    while (i < j) {\n        do {\n            i++;\n            sortSeq.push({ type: ActionTypes.Active, indexes: [i] });\n            sortSeq.push({ type: ActionTypes.Deactive, indexes: [i] });\n        } while (arr[i] < x);\n        // sortSeq.push({ type: ActionTypes.Lock, indexes: [i] });\n\n        do {\n            j--;\n            sortSeq.push({ type: ActionTypes.Active, indexes: [j] });\n            sortSeq.push({ type: ActionTypes.Deactive, indexes: [j] });\n        } while (arr[j] > x);\n        // sortSeq.push({ type: ActionTypes.Lock, indexes: [j] });\n\n        if (i < j) {\n            sortSeq.push({ type: ActionTypes.Swap, indexes: [i, j] })\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            sortSeq.push({ type: ActionTypes.SwapDone, indexes: [i, j] });\n        }\n    }\n    quickSortSeq(arr, l, j, sortSeq);\n    quickSortSeq(arr, j + 1, r, sortSeq);\n}\n\n\n\n","import { ActionTypes, IGeometryProps, IReducer, OpeDetailTypes } from \"../../types\";\nimport { randomArr, randomNum } from \"../../utils\";\nimport { getStartPosX, initCubes } from \"../../utils/sort\";\n\nexport interface ISortCube extends IGeometryProps {\n    // 记录 cube 将要经历或者已经历过的下标\n    sortIndexes: number[];\n    // 记录 cube 当前页面中正处于的下标\n    sortIndex: number;\n}\n\nexport interface IState {\n    // 用来表示数组中各值的实时位置\n    values: number[];\n    // 用来表示每个 cube 的属性，其元素位置无意义，其中 sortIndex 才是对应的 values 的下标\n    cubes: ISortCube[];\n    // 是否排序完毕\n    sortDone: boolean;\n    // 是否随机化完毕\n    randomDone: boolean;\n    // 第一个cube的起始x坐标\n    startPosX: number;\n    // 记录当前操作的细节\n    opeDetails: { type: OpeDetailTypes, payload?: any }[]\n}\n\nexport const initState: IState = {\n    values: randomArr(randomNum(4, 10)),\n    cubes: [],\n    sortDone: true,\n    randomDone: true,\n    startPosX: 0,\n    opeDetails: []\n}\n\nexport const reducer: IReducer<IState> = (state = initState, action) => {\n\n    const { type, payload } = action;\n    // state.cubes = List(state.cubes).toJS().map((item) => Map(item).toJS()) as ISortCube[];\n\n    switch (type) {\n        case ActionTypes.Active:\n            return {\n                ...state,\n                cubes: state.cubes.map(\n                    (item) => (payload?.includes(item.sortIndexes[item.sortIndexes.length - 1]) ? { ...item, isActive: true } : { ...item })\n                ),\n                sortDone: false\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n                cubes: state.cubes.map(\n                    (item) => payload?.includes(item.sortIndexes[item.sortIndexes.length - 1]) ? { ...item, isActive: false } : { ...item }\n                )\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n                cubes: state.cubes.map(\n                    (item) => payload?.includes(item.sortIndexes[item.sortIndexes.length - 1]) ? { ...item, isLock: true } : { ...item }\n                )\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n                cubes: state.cubes.map(\n                    (item) => payload?.includes(item.sortIndexes[item.sortIndexes.length - 1]) ? { ...item, isLock: false } : { ...item }\n                )\n            }\n\n        case ActionTypes.Swap:\n            {\n\n                // 取出需要交换的两个下标\n                // 取出需要交换的两个下标\n                let index1 = (payload as number[])[0];\n                let index2 = (payload as number[])[1];\n\n                // 向 cube 对应的 sortIndexes 中 push 新的下标\n                const newCubes: ISortCube[] = state.cubes.map((item) => {\n                    const curSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                    if (curSortIndex === index1) {\n                        const newSortIndexes = [...item.sortIndexes, index2]\n                        return { ...item, sortIndexes: newSortIndexes }\n                    } else if (curSortIndex === index2) {\n                        const newSortIndexes = [...item.sortIndexes, index1]\n                        return { ...item, sortIndexes: newSortIndexes }\n                    }\n                    return { ...item };\n                })\n\n                // 交换 values 的值\n                let newValues = [...state.values];\n                let temp = newValues[index1];\n                newValues[index1] = newValues[index2];\n                newValues[index2] = temp;\n\n                const newOpeDetail = {\n                    type: OpeDetailTypes.Swap,\n                    payload: {\n                        indexes: [index1, index2],\n                        curValues: [...newValues]\n                    }\n                }\n\n                return {\n                    ...state,\n                    cubes: newCubes,\n                    opeDetails: [...state.opeDetails, newOpeDetail],\n                    values: newValues\n                }\n            }\n\n        case ActionTypes.SwapDone:\n            {\n\n                // 交换完毕后，将对应的cube的sortIndex改为最新的sortIndex\n                const newCubes: ISortCube[] = state.cubes.map((item) => {\n                    const newSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                    if (item.sortIndex !== newSortIndex) return { ...item, sortIndex: newSortIndex }\n                    return { ...item }\n                })\n\n                return {\n                    ...state,\n                    cubes: newCubes,\n                }\n            }\n\n        case ActionTypes.SortDone:\n            return {\n                ...state,\n                sortDone: true\n            }\n\n        case ActionTypes.Move:\n            {\n                const { oldIndexes, targetIndexes }: { oldIndexes: number[], targetIndexes: number[] } = payload;\n                // 把包含在 oldIndexes 中的 sortIndex 找出来\n                const newCubes = state.cubes.map((item) => {\n                    // 看 sortIndex 在 oldIndexes 中处于哪个位置，也对应 targetIndexes 的位置\n                    let i = oldIndexes.findIndex((value) => value === item.sortIndex);\n                    // 如果找到了，则往 sortIndexes 中添加 targetIndexes[i]\n                    if (i >= 0) {\n                        return {\n                            ...item,\n                            sortIndexes: [...item.sortIndexes, targetIndexes[i]]\n                        }\n                    }\n                    return { ...item }\n                })\n\n\n                let newValues: number[] = [...state.values];\n\n                let newOpeDetail;\n\n                // 判断是扩容还是缩容\n                if (targetIndexes[0] > oldIndexes[0]) {\n                    // 扩容下标\n                    newValues.push(-1);\n                } else {\n                    // 缩容下标\n                    newValues.splice(oldIndexes[0], 1);\n                    newOpeDetail = { type: OpeDetailTypes.Delete, payload: { index: oldIndexes[0], value: state.values[oldIndexes[0]], curValues: [...newValues] } }\n                }\n\n                return {\n                    ...state,\n                    cubes: newCubes,\n                    values: newValues,\n                    opeDetails: newOpeDetail ? [...state.opeDetails, newOpeDetail] : [...state.opeDetails]\n                }\n            }\n\n        case ActionTypes.AddDone:\n            {\n                const { newEle, targetIndex } = payload;\n\n                // 生成新 cube\n                const newCube: ISortCube = {\n                    sortIndex: targetIndex,\n                    sortIndexes: [targetIndex],\n                    value: newEle\n                }\n\n                // 更新 cube 的 sortIndex 到最新\n                let newCubes = state.cubes.map((item, i) => {\n                    const curSortIndex = item.sortIndex;\n                    const newSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                    if (curSortIndex !== newSortIndex) {\n                        return { ...item, sortIndex: newSortIndex };\n                    }\n                    return { ...item };\n                })\n\n                // 添加新 cube\n                newCubes.push(newCube);\n\n                // 更新 values\n                let newValues = [...state.values];\n                newValues.splice(targetIndex, 0, newEle);\n                newValues.pop();\n\n                const newOpeDetail = { type: OpeDetailTypes.Add, payload: { index: targetIndex, value: newEle, curValues: [...newValues] } }\n\n                return {\n                    ...state,\n                    cubes: newCubes,\n                    values: newValues,\n                    opeDetails: [...state.opeDetails, newOpeDetail]\n                }\n            }\n\n        case ActionTypes.Delete:\n            {\n                const newCubes = state.cubes.map((item) => item.sortIndex === payload ? { ...item, disappear: true } : { ...item });\n\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n\n        case ActionTypes.DeleteDone:\n            {\n\n                let newCubes = [...state.cubes];\n\n                // 先把删除的元素真正意义上从 cubes 中删除\n                newCubes.splice(payload, 1);\n\n                // 更新 cube 的 sortIndex 到最新\n                newCubes = state.cubes.map((item) => {\n                    const curSortIndex = item.sortIndex;\n                    const newSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                    if (curSortIndex !== newSortIndex) {\n                        return { ...item, sortIndex: newSortIndex };\n                    }\n                    return { ...item };\n                })\n\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n\n            }\n\n        case ActionTypes.RandomDone:\n            {\n                let newValues = randomArr(randomNum(4, 8));\n                let newStartPosX = getStartPosX(newValues.length);\n                return {\n                    ...state,\n                    cubes: initCubes(newValues),\n                    values: newValues,\n                    randomDone: true,\n                    startPosX: newStartPosX,\n                    opeDetails: [{ type: OpeDetailTypes.Default, payload: newValues }]\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false,\n            };\n\n        default:\n            return state;\n    }\n}\n","import { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, PageHeader, Steps, message } from 'antd';\nimport { BarChartOutlined, DotChartOutlined } from '@ant-design/icons';\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport SortCube3d from './SortCube3d/sortCube3d';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { addEleSeq, bubbleSortSeq, deleteEleSeq, getStartPosX, initCubes, quickSortSeq, selectSortSeq } from '../../utils/sort';\nimport { ActionTypes, BASE_POSY, SORT_CUBE_INTERVAL_DISTANCE, DISPATCH_INTERVAL, OpeDetailTypes, IReducer } from '../../types';\nimport { initState, IState, reducer } from './store';\nimport './sort.scss'\n\nconst { Step } = Steps;\n\nconst Sort = () => {\n    const history = useHistory();\n\n    const [state, dispatch] = useReducer<IReducer<IState>, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n            cubes: initCubes(state.values),\n            startPosX: getStartPosX(state.values.length),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: initState.values }]\n        }\n    })\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成数组 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n\n    /** 处理冒泡排序 */\n    const handleBubbleSort = () => {\n        let sequence = bubbleSortSeq(state.values);\n        sequence.forEach((event, i) => {\n            setTimeout(() => {\n                dispatch({ type: event.type, payload: event.indexes })\n            }, i * DISPATCH_INTERVAL);\n        });\n    }\n\n    /** 处理选择排序 */\n    const handleSelectSort = () => {\n        let sequence = selectSortSeq(state.values);\n        sequence.forEach((event, i) => {\n            setTimeout(() => {\n                dispatch({ type: event.type, payload: event.indexes })\n            }, i * DISPATCH_INTERVAL)\n        })\n    }\n\n    /** 处理快速排序 */\n    const handleQuickSort = () => {\n        let sequence: any[] = [];\n        quickSortSeq([...state.values], 0, state.values.length - 1, sequence);\n        sequence.forEach((event, i) => {\n            setTimeout(() => {\n                dispatch({ type: event.type, payload: event.indexes })\n            }, i * DISPATCH_INTERVAL)\n        })\n    }\n\n    /** 处理添加元素 */\n    const handleAddEle = (value: number, index: number) => {\n        if (state.values.length < 10) {\n            if (index > state.values.length) {\n                message.warning('输入的序号不合法')\n            } else {\n                const sequence = addEleSeq(state.values, value, index);\n                sequence.forEach((event, i) => {\n                    setTimeout(() => {\n                        dispatch({ type: event.type, payload: event.payload })\n                    }, i * DISPATCH_INTERVAL)\n                })\n            }\n\n        } else {\n            message.warning('添加失败，数组最大容量为10')\n        }\n\n    }\n\n    /** 处理删除元素 */\n    const handleDeleteEle = (index: number) => {\n        if (state.values.length > 0) {\n            if (index > state.values.length) {\n                message.warning('输入的序号不合法')\n            } else {\n                const sequence = deleteEleSeq(state.values, index);\n                sequence.forEach((event, i) => {\n                    setTimeout(() => {\n                        dispatch({ type: event.type, payload: event.payload })\n                    }, i * DISPATCH_INTERVAL)\n                })\n            }\n        } else {\n            message.warning('删除失败，当前数组为空')\n        }\n    }\n\n    /** 处理动画速度改变 */\n    const handleSliderChange = (value: number) => {\n        // console.log(value);\n    }\n\n\n    return (\n        <div className='sort-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace('/data-structure-visualization/')\n                    window.location.reload();\n                }}\n                title='排序'\n            />\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n                    {\n                        state.cubes.map((item, index) => (\n                            <SortCube3d\n                                key={index + '@'}\n                                sortIndexes={item.sortIndexes}\n                                sortIndex={item.sortIndex}\n                                value={item.value}\n                                startPosX={state.startPosX}\n                                isActive={item.isActive}\n                                isLock={item.isLock}\n                                // 由于 cube 的重心决定其位置，那么高度变化会导致其底部覆盖掉下面的 text，所以要改变其重心位置\n                                position={[state.startPosX + (item.sortIndex * SORT_CUBE_INTERVAL_DISTANCE), ((item.value as number) * 0.2) / 2 + BASE_POSY, 0]}\n                                isSpRev={!state.randomDone}\n                                disappear={item.disappear}\n                            />\n                        ))\n                    }\n                    {\n                        state.values.map((_, index) => (\n                            <Text\n                                key={index + '*'}\n                                fillOpacity={state.randomDone ? 1 : 0}\n                                color='black'\n                                fontSize={0.5}\n                                position={[state.startPosX + (index * SORT_CUBE_INTERVAL_DISTANCE), -1 + BASE_POSY, 0]}\n                            >\n                                {index}\n                            </Text>\n                        ))\n                    }\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'inline-block' : 'none' }}\n                    onSliderChange={handleSliderChange}\n                    onAdd={handleAddEle}\n                    onDelete={handleDeleteEle}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handleBubbleSort}>冒泡排序</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handleSelectSort}>选择排序</Button>\n                            </div>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />}>插入排序</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handleQuickSort}>快速排序</Button>\n                                <Button icon={<BarChartOutlined />}>归并排序</Button>\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.Swap:\n                                        return (\n                                            <Step\n                                                key={i + 'step'}\n                                                title={`交换元素: i1=${payload.indexes[0]}, i2=${payload.indexes[1]}`}\n                                                description={`当前数组: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Add:\n                                        return (\n                                            <Step\n                                                key={i + 'step'}\n                                                title={`新增元素: i=${payload.index}, v=${payload.value}`}\n                                                description={`当前数组: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Delete:\n                                        return (\n                                            <Step\n                                                key={i + 'step'}\n                                                title={`删除元素: i=${payload.index}, v=${payload.value}`}\n                                                description={`当前数组: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n                                    default:\n                                        return (\n                                            <Step\n                                                key={i + 'step'}\n                                                title={`当前数组: [${payload.toString()}]`}\n                                            />\n                                        )\n                                }\n                            })}\n\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='item2'\n                        icon={<BarChartOutlined />}\n                        title='排序'\n                    >\n                        <Item onClick={handleBubbleSort}>冒泡排序</Item>\n                        <Item onClick={handleSelectSort}>选择排序</Item>\n                        <Item>插入排序</Item>\n                        <Item onClick={handleQuickSort}>快速排序</Item>\n                        <Item>归并排序</Item>\n                    </SubMenu>\n                </Console>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Sort;","import { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Drawer, Input, PageHeader } from 'antd';\nimport { Map, List } from 'immutable'\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { randomArr, randomNum } from '../../utils/index'\nimport { ActionTypes, BASE_POSY, SORT_CUBE_INTERVAL_DISTANCE, DISPATCH_INTERVAL, IGeometryProps } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined,\n    MinusSquareOutlined,\n    PlusSquareOutlined,\n} from '@ant-design/icons';\nimport './avlTree.scss'\n\nexport interface IBinaryHeapCube extends IGeometryProps {\n\n}\ntype IReducer = (state: IState, action: IAction) => IState;\n\ninterface IState {\n    // 是否随机化完毕\n    randomDone: boolean;\n}\n\ninterface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nconst initState: IState = {\n    randomDone: true,\n}\n\nfunction reducer(state: IState = initState, action: IAction): IState {\n\n    const { type, payload } = action;\n\n\n    switch (type) {\n        case ActionTypes.Active:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n            }\n\n\n        // case ActionTypes.Add:\n\n        // case ActionTypes.Delete:\n\n        case ActionTypes.RandomDone:\n            {\n                return {\n                    ...state,\n                    randomDone: true\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            };\n\n        // case ActionTypes.Search:\n\n        default:\n            return state;\n    }\n}\n\nconst BinaryHeap = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n        }\n    })\n\n    /** 控制抽屉是否展开 */\n    const [isUnfold, setIsUnfold] = useState(false);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 控制台的添加删除元素的value和index */\n    const [value, setValue] = useState(0);\n    const [index, setIndex] = useState(0);\n\n    /** 添加元素 */\n    const handleAddEle = () => {\n        console.log(value, index);\n    }\n\n    /** 删除元素 */\n    const handleDeleteEle = () => {\n\n    }\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n    return (\n        <div className='avlTree-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.goBack();\n                    window.location.reload();\n                }}\n                title='avl树'\n            />\n\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'inline-block' : 'none' }}\n                >\n                    <Item\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='2'\n                        icon={<BarChartOutlined />}\n                        title='排序'\n                    >\n                        <Item>冒泡排序</Item>\n                        <Item>选择排序</Item>\n                        <Item>插入排序</Item>\n                        <Item>快速排序</Item>\n                        <Item>归并排序</Item>\n                    </SubMenu>\n\n                </Console>\n            </div>\n\n        </div>\n    )\n}\n\nexport default BinaryHeap;\n\n\n","import { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Drawer, Input, PageHeader } from 'antd';\nimport { Map, List } from 'immutable'\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { randomArr, randomNum } from '../../utils/index'\nimport { ActionTypes, BASE_POSY, SORT_CUBE_INTERVAL_DISTANCE, DISPATCH_INTERVAL, IGeometryProps } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined,\n    MinusSquareOutlined,\n    PlusSquareOutlined,\n} from '@ant-design/icons';\nimport './graph.scss'\n\nexport interface IBinaryHeapCube extends IGeometryProps {\n\n}\ntype IReducer = (state: IState, action: IAction) => IState;\n\ninterface IState {\n    // 是否随机化完毕\n    randomDone: boolean;\n}\n\ninterface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nconst initState: IState = {\n    randomDone: true,\n}\n\nfunction reducer(state: IState = initState, action: IAction): IState {\n\n    const { type, payload } = action;\n\n\n    switch (type) {\n        case ActionTypes.Active:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n            }\n\n\n        // case ActionTypes.Add:\n\n        // case ActionTypes.Delete:\n\n        case ActionTypes.RandomDone:\n            {\n                return {\n                    ...state,\n                    randomDone: true\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            };\n\n        // case ActionTypes.Search:\n\n        default:\n            return state;\n    }\n}\n\nconst Graph = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n        }\n    })\n\n    /** 控制抽屉是否展开 */\n    const [isUnfold, setIsUnfold] = useState(false);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 传入数组长度，计算第一个元素的起始x坐标 */\n    // const startPosX = getStartXPos(state.cubes.length);\n\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n    return (\n        <div className='graph-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.goBack();\n                    window.location.reload();\n                }}\n                title='图'\n            />\n\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'inline-block' : 'none' }}\n                >\n                    <Item\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='2'\n                        icon={<BarChartOutlined />}\n                        title='排序'\n                    >\n                        <Item>冒泡排序</Item>\n                        <Item>选择排序</Item>\n                        <Item>插入排序</Item>\n                        <Item>快速排序</Item>\n                        <Item>归并排序</Item>\n                    </SubMenu>\n\n                    <SubMenu\n                        icon={<PlusSquareOutlined />}\n                    >\n                        <Item>\n                            <Input />\n                            <Button>添加</Button>\n                        </Item>\n                    </SubMenu>\n\n                    <Item icon={<MinusSquareOutlined />}>删除</Item>\n\n                </Console>\n \n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Graph;\n\n\n","import { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Drawer, Input, PageHeader } from 'antd';\nimport { Map, List } from 'immutable'\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { randomArr, randomNum } from '../../utils/index'\nimport { ActionTypes, BASE_POSY, SORT_CUBE_INTERVAL_DISTANCE, DISPATCH_INTERVAL, IGeometryProps } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined,\n    MinusSquareOutlined,\n    PlusSquareOutlined,\n} from '@ant-design/icons';\nimport './binaryHeap.scss'\n\nexport interface IBinaryHeapCube extends IGeometryProps {\n\n}\ntype IReducer = (state: IState, action: IAction) => IState;\n\ninterface IState {\n    // 是否随机化完毕\n    randomDone: boolean;\n}\n\ninterface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nconst initState: IState = {\n    randomDone: true,\n}\n\nfunction reducer(state: IState = initState, action: IAction): IState {\n\n    const { type, payload } = action;\n\n\n    switch (type) {\n        case ActionTypes.Active:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n            }\n\n\n        // case ActionTypes.Add:\n\n        // case ActionTypes.Delete:\n\n        case ActionTypes.RandomDone:\n            {\n                return {\n                    ...state,\n                    randomDone: true\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            };\n\n        // case ActionTypes.Search:\n\n        default:\n            return state;\n    }\n}\n\nconst BinaryHeap = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n        }\n    })\n\n    /** 控制抽屉是否展开 */\n    const [isUnfold, setIsUnfold] = useState(false);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 传入数组长度，计算第一个元素的起始x坐标 */\n    // const startPosX = getStartXPos(state.cubes.length);\n\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n    return (\n        <div className='binaryHeap-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.goBack();\n                    window.location.reload();\n                }}\n                title='二叉堆'\n            />\n\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'inline-block' : 'none' }}\n                >\n                    <Item\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='2'\n                        icon={<BarChartOutlined />}\n                        title='排序'\n                    >\n                        <Item>冒泡排序</Item>\n                        <Item>选择排序</Item>\n                        <Item>插入排序</Item>\n                        <Item>快速排序</Item>\n                        <Item>归并排序</Item>\n                    </SubMenu>\n\n                    <SubMenu\n                        icon={<PlusSquareOutlined />}\n                    >\n                        <Item>\n                            <Input />\n                            <Button>添加</Button>\n                        </Item>\n                    </SubMenu>\n\n                    <Item icon={<MinusSquareOutlined />}>删除</Item>\n\n                </Console>\n            </div>\n\n        </div>\n    )\n}\n\nexport default BinaryHeap;\n\n\n","import { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Drawer, Input, PageHeader } from 'antd';\nimport { Map, List } from 'immutable'\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { randomArr, randomNum } from '../../utils/index'\nimport { ActionTypes, BASE_POSY, SORT_CUBE_INTERVAL_DISTANCE, DISPATCH_INTERVAL, IGeometryProps } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined,\n    MinusSquareOutlined,\n    PlusSquareOutlined,\n} from '@ant-design/icons';\nimport './bTree.scss'\n\nexport interface IBinaryHeapCube extends IGeometryProps {\n\n}\ntype IReducer = (state: IState, action: IAction) => IState;\n\ninterface IState {\n    // 是否随机化完毕\n    randomDone: boolean;\n}\n\ninterface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nconst initState: IState = {\n    randomDone: true,\n}\n\nfunction reducer(state: IState = initState, action: IAction): IState {\n\n    const { type, payload } = action;\n\n\n    switch (type) {\n        case ActionTypes.Active:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n            }\n\n\n        // case ActionTypes.Add:\n\n        // case ActionTypes.Delete:\n\n        case ActionTypes.RandomDone:\n            {\n                return {\n                    ...state,\n                    randomDone: true\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            };\n\n        // case ActionTypes.Search:\n\n        default:\n            return state;\n    }\n}\n\nconst BTree = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n        }\n    })\n\n    /** 控制抽屉是否展开 */\n    const [isUnfold, setIsUnfold] = useState(false);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 传入数组长度，计算第一个元素的起始x坐标 */\n    // const startPosX = getStartXPos(state.cubes.length);\n\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n    return (\n        <div className='bTree-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.goBack();\n                    window.location.reload();\n                }}\n                title='B树'\n            />\n\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'inline-block' : 'none' }}\n                >\n                    <Item\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='2'\n                        icon={<BarChartOutlined />}\n                        title='排序'\n                    >\n                        <Item>冒泡排序</Item>\n                        <Item>选择排序</Item>\n                        <Item>插入排序</Item>\n                        <Item>快速排序</Item>\n                        <Item>归并排序</Item>\n                    </SubMenu>\n\n                    <SubMenu\n                        icon={<PlusSquareOutlined />}\n                    >\n                        <Item>\n                            <Input />\n                            <Button>添加</Button>\n                        </Item>\n                    </SubMenu>\n\n                    <Item icon={<MinusSquareOutlined />}>删除</Item>\n\n                </Console>\n\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default BTree;\n\n\n","import * as THREE from 'three'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { animated, useSpring, config } from 'react-spring/three'\nimport { RoundedBox, Text } from \"@react-three/drei\";\nimport { IGeometryProps } from '../../../types';\n\ninterface IQueueCube3dProps extends IGeometryProps {\n}\n\nconst QueueCube3d: React.FC<IQueueCube3dProps> = (props) => {\n\n    const {\n        position,\n        isActive,\n        isLock,\n        isSpRev,\n        value,\n        colorConfig,\n        disappear\n    } = props;\n\n    const [isHover, setIsHover] = useState(false)\n    const [isClick, setIsClick] = useState(false)\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n\n    /** 扫描数组的时候，如果改变了 active 属性，则给它设置一个点击效果 */\n    useEffect(() => {\n        isActive ? setIsClick(true) : setIsClick(false);\n    }, [isActive])\n\n    /** 配置扩缩动画效果 */\n    const { scale } = useSpring({\n        reverse: disappear || isSpRev,\n        from: { scale: 0 },\n        to: { scale: isClick ? 1.10 : 1 },\n        config: (disappear || isSpRev) ? config.default : config.wobbly\n    })\n\n    /** 配置颜色过渡效果 */\n    const { color } = useSpring({\n        color: (\n            isClick ? colorConfig?.activeColor :\n                isHover ? colorConfig?.hoverColor :\n                    isLock ? colorConfig?.lockColor : colorConfig?.defaultColor\n        )\n    })\n\n    return (\n        <animated.mesh\n            scale={scale}\n            ref={meshRef}\n            position={position}\n        >\n            <Text\n                fontSize={0.5}\n                color='black'\n            >\n                {value}\n            </Text>\n            <RoundedBox\n                args={[2, 1, 1]}\n                onClick={() => setIsClick(!isClick)}\n                onPointerOver={() => setIsHover(true)}\n                onPointerOut={() => setIsHover(false)}\n            >\n                <animated.meshPhongMaterial\n                    color={color}\n                    opacity={0.5}\n                    transparent={true}\n                />\n            </RoundedBox>\n        </animated.mesh>\n    )\n}\n\nQueueCube3d.defaultProps = {\n    colorConfig: {\n        defaultColor: 'wheat',\n        activeColor: 'orange',\n        hoverColor: 'skyblue',\n        lockColor: '#8076a3'\n    }\n}\n\nexport default React.memo(QueueCube3d);","import { v4 as uuidv4 } from 'uuid';\nimport { IQueueCube } from \"../pages/Queue/store\";\nimport { ActionTypes, QUEUE_CUBE_INTERVAL_DISTANCE } from \"../types\";\n\n/** 根据数组长度，计算出第一个 cube 的 position 的 x 坐标 */\nexport function getStartPosX(arrLen: number): number {\n    return -(arrLen - 1) * QUEUE_CUBE_INTERVAL_DISTANCE / 2;\n}\n\nexport function initCubes(values: number[]): IQueueCube[] {\n    return values.map((value) => ({\n        value,\n        isActive: false,\n        isLock: false,\n        key: uuidv4()\n    }))\n}\n\n/** 返回入队细节 */\nexport function enqueueSeq(value: number, arrLen: number) {\n    let seq = [];\n    // 入队时自动激活\n    seq.push({ type: ActionTypes.Enqueue, payload: value })\n    seq.push({ type: ActionTypes.Deactive, payload: arrLen });\n    return seq;\n}\n\n/** 返回出队细节 */\nexport function dequeueSeq() {\n    let seq = [];\n    // seq.push({ type: ActionTypes.Active, payload: 0 });\n    seq.push({ type: ActionTypes.Disappear, payload: 0 });\n    seq.push({ type: ActionTypes.Dequeue })\n    return seq;\n}","import { v4 as uuidv4 } from 'uuid';\nimport { ActionTypes, IGeometryProps, IReducer, OpeDetailTypes } from \"../../types\";\nimport { randomArr, randomNum } from \"../../utils\";\nimport { initCubes } from '../../utils/queue';\n\nexport interface IQueueCube extends IGeometryProps {\n    key: any;\n}\n\nexport interface IState {\n    values: number[];\n    cubes: IQueueCube[];\n    randomDone: boolean;\n    opeDetails: { type: OpeDetailTypes, payload?: any }[]\n}\n\n\n\nexport const initState: IState = {\n    randomDone: true,\n    values: randomArr(randomNum(3, 6)),\n    cubes: [],\n    opeDetails: []\n}\n\nexport const reducer: IReducer<IState> = (state = initState, action) => {\n    const { type, payload } = action;\n\n    switch (type) {\n        case ActionTypes.Active:\n            {\n                const newCubes: IQueueCube[] = state.cubes.map((item, i) => ({\n                    ...item,\n                    isActive: i === payload\n                }))\n\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n        case ActionTypes.Deactive:\n            {\n                const newCubes: IQueueCube[] = state.cubes.map((item, i) => ({\n                    ...item,\n                    isActive: i === payload ? false : item.isActive\n                }))\n\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n\n        case ActionTypes.Disappear:\n            {\n                const newCubes: IQueueCube[] = state.cubes.map((item, i) => ({\n                    ...item,\n                    disappear: i === payload\n                }))\n\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n\n        case ActionTypes.Enqueue:\n            {\n                const newCubes = [...state.cubes]\n                const newCube: IQueueCube = {\n                    value: payload,\n                    isActive: true,\n                    key: uuidv4()\n                };\n                const newValues = [...state.values]\n                newCubes.push(newCube);\n                newValues.push(payload);\n\n                return {\n                    ...state,\n                    cubes: newCubes,\n                    values: newValues,\n                    opeDetails: [...state.opeDetails, {\n                        type: OpeDetailTypes.Enqueue,\n                        payload: {\n                            enqueueValue: payload,\n                            curValues: newValues\n                        }\n                    }]\n                }\n            }\n\n        case ActionTypes.Dequeue:\n            {\n                const newCubes: IQueueCube[] = [...state.cubes];\n                newCubes.shift();\n                const newValues = [...state.values];\n                const dequeueValue = newValues.shift();\n\n                return {\n                    ...state,\n                    opeDetails: [...state.opeDetails, {\n                        type: OpeDetailTypes.Dequeue,\n                        payload: {\n                            dequeueValue,\n                            curValues: newValues\n                        }\n                    }],\n                    values: newValues,\n                    cubes: newCubes\n                }\n            }\n\n        case ActionTypes.RandomDone:\n            {\n                let newValues = randomArr(randomNum(3, 6));\n                return {\n                    ...state,\n                    cubes: initCubes(newValues),\n                    randomDone: true,\n                    values: newValues,\n                    opeDetails: [{ type: OpeDetailTypes.Default, payload: newValues }]\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            };\n\n        default:\n            return state;\n    }\n}\n\n","import React, { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, InputNumber, PageHeader, Steps, message } from 'antd';\nimport { Text } from '@react-three/drei';\nimport Console, { Item } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport QueueCube3d from './QueueCube3d/queueCube3d'\nimport { ActionTypes, DISPATCH_INTERVAL, IReducer, OpeDetailTypes, QUEUE_CUBE_INTERVAL_DISTANCE } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined\n} from '@ant-design/icons';\nimport './queue.scss'\nimport { dequeueSeq, enqueueSeq, getStartPosX, initCubes } from '../../utils/queue';\nimport { initState, IState, reducer } from './store';\n\nconst { Step } = Steps;\n\nconst Queue = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer<IState>, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n            cubes: initCubes(state.values),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: initState.values }]\n        }\n    });\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 传入数组长度，计算第一个元素的起始x坐标 */\n    const startPosX = getStartPosX(state.cubes.length);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成队列 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n\n    /** 处理入队 */\n    const handleEnqueue = (value: number) => {\n        if (state.values.length < 10) {\n            const sequence = enqueueSeq(value, state.values.length);\n            sequence.forEach((event, i) => {\n                setTimeout(() => {\n                    dispatch(event)\n                }, i * DISPATCH_INTERVAL)\n            })\n        } else {\n            message.warning('入队失败，队列最大容量为10')\n        }\n    }\n\n    /** 处理出队 */\n    const handleDequeue = () => {\n        if (state.values.length > 0) {\n            const sequence = dequeueSeq();\n            sequence.forEach((event, i) => {\n                setTimeout(() => {\n                    dispatch(event)\n                }, i * DISPATCH_INTERVAL)\n            })\n        } else {\n            message.warning('出队失败，当前队列为空')\n        }\n\n    }\n    return (\n        <div className='queue-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace('/data-structure-visualization/')\n                    window.location.reload();\n                }}\n                title='队列'\n            />\n\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n                    {state.cubes.map((item, i, arr) => (\n                        <React.Fragment key={item.key}>\n                            <QueueCube3d\n                                value={item.value}\n                                position={[startPosX + (i * QUEUE_CUBE_INTERVAL_DISTANCE), 2, 0]}\n                                isSpRev={!state.randomDone}\n                                isActive={item.isActive}\n                                disappear={item.disappear}\n                            />\n                            {i === 0 || i === arr.length - 1 ?\n                                <Text\n                                    fillOpacity={state.randomDone ? 1 : 0}\n                                    color='black'\n                                    fontSize={0.5}\n                                    position={[startPosX + (i * QUEUE_CUBE_INTERVAL_DISTANCE), 1, 0]}\n                                >\n                                    {i === 0 ? 'head' : 'tail'}\n                                </Text> : <></>\n                            }\n                        </React.Fragment>\n                    ))}\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'inline-block' : 'none' }}\n                    showSilider={false}\n                    onAdd={handleEnqueue}\n                    onDelete={handleDequeue}\n                    addText='入队'\n                    deleteText='出队'\n                    isIndex={false}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.Enqueue:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`入队: v=${payload.enqueueValue}`}\n                                                description={`当前队列: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Dequeue:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`出队: v=${payload.dequeueValue}`}\n                                                description={`当前队列: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    default:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`当前队列: [${payload.toString()}]`}\n                                            />\n                                        )\n                                }\n                            })}\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                </Console>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Queue;","import * as THREE from 'three'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { animated, useSpring, config } from 'react-spring/three'\nimport { RoundedBox, Text } from \"@react-three/drei\";\nimport { IGeometryProps } from '../../../types';\n\ninterface IStackCube3dProps extends IGeometryProps {\n}\n\nconst StackCube3d: React.FC<IStackCube3dProps> = (props) => {\n\n    const {\n        position,\n        isActive,\n        isLock,\n        isSpRev,\n        value,\n        colorConfig,\n        disappear\n    } = props;\n\n    const [isHover, setIsHover] = useState(false)\n    const [isClick, setIsClick] = useState(false)\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    /** 扫描数组的时候，如果改变了 active 属性，则给它设置一个点击效果 */\n    useEffect(() => {\n        isActive ? setIsClick(true) : setIsClick(false);\n    }, [isActive])\n\n    /** 配置扩缩动画效果 */\n    const { scale } = useSpring({\n        reverse: disappear || isSpRev,\n        from: { scale: 0 },\n        to: { scale: isClick ? 1.10 : 1 },\n        config: (disappear || isSpRev) ? config.default : config.wobbly\n    })\n\n    /** 配置颜色过渡效果 */\n    const { color } = useSpring({\n        color: (\n            isClick ? colorConfig?.activeColor :\n                isHover ? colorConfig?.hoverColor :\n                    isLock ? colorConfig?.lockColor : colorConfig?.defaultColor\n        )\n    })\n\n    return (\n        <animated.mesh\n            scale={scale}\n            ref={meshRef}\n            position={position}\n        >\n            <Text\n                fontSize={0.5}\n                color='black'\n            >\n                {value}\n            </Text>\n            <RoundedBox\n                args={[2.5, .5, 2.5]}\n                onClick={() => setIsClick(!isClick)}\n                onPointerOver={() => setIsHover(true)}\n                onPointerOut={() => setIsHover(false)}\n            >\n                <animated.meshPhongMaterial\n                    color={color}\n                    opacity={0.5}\n                    transparent={true}\n                />\n            </RoundedBox>\n        </animated.mesh>\n    )\n}\n\nStackCube3d.defaultProps = {\n    colorConfig: {\n        defaultColor: 'wheat',\n        activeColor: 'orange',\n        hoverColor: 'skyblue',\n        lockColor: '#8076a3'\n    }\n}\n\nexport default React.memo(StackCube3d);","import { IStackCube } from \"../pages/Stack/stack\";\nimport { ActionTypes, STACK_CUBE_INTERVAL_DISTANCE } from \"../types\";\n\nexport function initCubes(values: number[]): IStackCube[] {\n    return values.map((value) => ({\n        value,\n        isActive: false,\n        isLock: false\n    }))\n}\n\n/** 返回压栈细节 */\nexport function pushSeq(value: number) {\n    let seq = [];\n    seq.push({ type: ActionTypes.Push, payload: value })\n    seq.push({ type: ActionTypes.Deactive });\n    return seq;\n}\n/** 返回弹栈细节 */\nexport function popSeq() {\n    let seq = [];\n    seq.push({ type: ActionTypes.Active });\n    seq.push({ type: ActionTypes.Pop })\n    seq.push({ type: ActionTypes.PopDone })\n    return seq;\n}\n\n/** 根据数组长度，计算出第一个 cube 的 position 的 y 坐标 */\nexport function getStartYPos(arrLen: number): number {\n    return -(arrLen - 1) * STACK_CUBE_INTERVAL_DISTANCE / 2;\n}","import { useHistory } from 'react-router';\nimport { Button, InputNumber, PageHeader, Steps, message } from 'antd';\nimport Scene3d from '../../components/Scene3d/scene3d'\nimport StackCube3d from './StackCube3d/stackCube3d';\nimport React, { useReducer, useState } from 'react';\nimport { Text } from '@react-three/drei';\nimport { ActionTypes, DISPATCH_INTERVAL, IGeometryProps, OpeDetailTypes, STACK_CUBE_INTERVAL_DISTANCE } from '../../types';\nimport { getStartYPos, initCubes, popSeq, pushSeq } from '../../utils/stack';\nimport { randomArr, randomNum } from '../../utils';\nimport Console, { Item } from '../../components/Console/console';\nimport { BarChartOutlined, DotChartOutlined } from '@ant-design/icons';\nimport './stack.scss'\n\nconst { Step } = Steps;\n\nexport interface IStackCube extends IGeometryProps {\n\n}\n\ninterface IState {\n    cubes: IStackCube[];\n    randomDone: boolean;\n    opeDetails: { type: OpeDetailTypes, payload?: any }[]\n    values: number[]\n}\n\nconst initState: IState = {\n    cubes: [],\n    randomDone: true,\n    opeDetails: [],\n    values: randomArr(randomNum(4, 10))\n}\n\ninterface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\ntype IReducer = (state: IState, action: IAction) => IState;\n\nfunction reducer(state: IState = initState, action: IAction): IState {\n    const { type, payload } = action;\n\n    switch (type) {\n        case ActionTypes.Active:\n            {\n                const newCubes: IStackCube[] = state.cubes.map((item, i, arr) => ({\n                    ...item,\n                    isActive: i === arr.length - 1\n                }))\n\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n        case ActionTypes.Deactive:\n            {\n                const newCubes: IStackCube[] = state.cubes.map((item, i, arr) => ({\n                    ...item,\n                    isActive: (i === arr.length - 1) ? false : item.isActive\n                }))\n\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n\n        case ActionTypes.Pop:\n            {\n                const newCubes: IStackCube[] = state.cubes.map((item, i, arr) => ({\n                    ...item,\n                    disappear: i === arr.length - 1\n                }));\n\n                const newValues = [...state.values];\n                const popValue = newValues.pop();\n\n                return {\n                    ...state,\n                    cubes: newCubes,\n                    opeDetails: [...state.opeDetails, {\n                        type: OpeDetailTypes.Pop,\n                        payload: {\n                            popValue,\n                            curValues: newValues\n                        }\n                    }],\n                    values: newValues\n                }\n            }\n\n        case ActionTypes.PopDone:\n            {\n                const newCubes: IStackCube[] = [...state.cubes];\n                newCubes.pop();\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n\n        case ActionTypes.Push:\n            {\n                const newCubes = [...state.cubes]\n                const newCube: IStackCube = {\n                    value: payload,\n                    isActive: true\n                };\n                const newValues = [...state.values]\n                newCubes.push(newCube);\n                newValues.push(payload);\n\n                return {\n                    ...state,\n                    cubes: newCubes,\n                    values: newValues,\n                    opeDetails: [...state.opeDetails, {\n                        type: OpeDetailTypes.Push,\n                        payload: {\n                            pushValue: payload,\n                            curValues: newValues\n                        }\n                    }]\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            }\n\n        case ActionTypes.RandomDone:\n            {\n                let newValues = randomArr(randomNum(4, 8));\n                return {\n                    ...state,\n                    cubes: initCubes(newValues),\n                    randomDone: true,\n                    values: newValues,\n                    opeDetails: [{ type: OpeDetailTypes.Default, payload: newValues }]\n                }\n            }\n\n        default:\n            return state;\n    }\n}\n\nconst Stack = () => {\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n            cubes: initCubes(state.values),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: initState.values }]\n        }\n    });\n\n    /** stackCube的起始坐标 */\n    const startPosY = getStartYPos(state.cubes.length);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 处理弹栈 */\n    const handlePop = () => {\n        if (state.values.length > 0) {\n            const sequence = popSeq();\n            sequence.forEach((event, i) => {\n                setTimeout(() => {\n                    dispatch(event)\n                }, i * DISPATCH_INTERVAL)\n            })\n        } else {\n            message.warning('弹栈失败，当前栈为空')\n        }\n\n    }\n\n    /** 处理压栈 */\n    const handlePush = (value: number) => {\n        if (state.values.length < 10) {\n            const sequence = pushSeq(value);\n            sequence.forEach((event, i) => {\n                setTimeout(() => {\n                    dispatch(event)\n                }, i * DISPATCH_INTERVAL)\n            })\n        } else {\n            message.warning('压栈失败，栈最大容量为10')\n        }\n\n    }\n\n    /** 处理随机元素 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400)\n    }\n\n    return (\n        <div className='stack-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace('/data-structure-visualization/')\n                    window.location.reload();\n                }}\n                title='栈'\n            />\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n                    {state.cubes.map((item, i) => (\n                        <React.Fragment key={i + '!'}>\n                            <StackCube3d\n                                value={item.value}\n                                position={[0, startPosY + (i * STACK_CUBE_INTERVAL_DISTANCE) + 2, 0]}\n                                isSpRev={!state.randomDone}\n                                isActive={item.isActive}\n                                disappear={item.disappear}\n\n                            />\n                            {(i === state.cubes.length - 1 && state.randomDone) ?\n                                <Text\n                                    fontSize={0.5}\n                                    color='black'\n                                    position={[-2.5, startPosY + (i * STACK_CUBE_INTERVAL_DISTANCE) + 2, 0]}\n                                >\n                                    {'Top ——>'}\n                                </Text> : <></>}\n                        </React.Fragment>\n                    ))}\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'inline-block' : 'none' }}\n                    showSilider={false}\n                    onAdd={handlePush}\n                    onDelete={handlePop}\n                    valueRange={[0, 90]}\n                    addText='压栈'\n                    deleteText='弹栈'\n                    isIndex={false}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.Pop:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`弹栈: v=${payload.popValue}`}\n                                                description={`当前栈: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Push:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`压栈: v=${payload.pushValue}`}\n                                                description={`当前栈: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    default:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`当前栈: [${payload.toString()}]`}\n                                            />\n                                        )\n                                }\n                            })}\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                </Console>\n            </div>\n        </div>\n    )\n}\n\nexport default Stack;","import { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Drawer, Input, PageHeader } from 'antd';\nimport { Map, List } from 'immutable'\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { randomArr, randomNum } from '../../utils/index'\nimport { ActionTypes, BASE_POSY, SORT_CUBE_INTERVAL_DISTANCE, DISPATCH_INTERVAL, IGeometryProps } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined,\n    MinusSquareOutlined,\n    PlusSquareOutlined,\n} from '@ant-design/icons';\nimport './hashTable.scss'\n\nexport interface IHashTableCube extends IGeometryProps {\n\n}\ntype IReducer = (state: IState, action: IAction) => IState;\n\ninterface IState {\n    // 是否随机化完毕\n    randomDone: boolean;\n}\n\ninterface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nconst initState: IState = {\n    randomDone: true,\n}\n\nfunction reducer(state: IState = initState, action: IAction): IState {\n\n    const { type, payload } = action;\n\n\n    switch (type) {\n        case ActionTypes.Active:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n            }\n\n\n        // case ActionTypes.Add:\n\n        // case ActionTypes.Delete:\n\n        case ActionTypes.RandomDone:\n            {\n                return {\n                    ...state,\n                    randomDone: true\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            };\n\n        // case ActionTypes.Search:\n\n        default:\n            return state;\n    }\n}\n\nconst HashTable = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n        }\n    })\n\n    /** 控制抽屉是否展开 */\n    const [isUnfold, setIsUnfold] = useState(false);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 传入数组长度，计算第一个元素的起始x坐标 */\n    // const startPosX = getStartXPos(state.cubes.length);\n\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n    return (\n        <div className='hashTable-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.goBack();\n                    window.location.reload();\n                }}\n                title='哈希表'\n            />\n\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'inline-block' : 'none' }}\n                >\n                    <Item\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='2'\n                        icon={<BarChartOutlined />}\n                        title='排序'\n                    >\n                        <Item>冒泡排序</Item>\n                        <Item>选择排序</Item>\n                        <Item>插入排序</Item>\n                        <Item>快速排序</Item>\n                        <Item>归并排序</Item>\n                    </SubMenu>\n\n                    <SubMenu\n                        icon={<PlusSquareOutlined />}\n                    >\n                        <Item>\n                            <Input />\n                            <Button>添加</Button>\n                        </Item>\n                    </SubMenu>\n\n                    <Item icon={<MinusSquareOutlined />}>删除</Item>\n\n                </Console>\n            </div>\n\n        </div>\n    )\n}\n\nexport default HashTable;\n\n\n","import { Line } from '@react-three/drei'\nimport { useEffect } from 'react';\nimport { Points } from '../../types';\n\ninterface IArrow3d {\n    points: Points;\n    hidden?: boolean;\n    lineWidth?: number;\n    ref?: any;\n}\n\nconst Arrow3d: React.FC<IArrow3d> = (props) => {\n\n    const {\n        points,\n        hidden,\n        lineWidth,\n        ref\n    } = props;\n\n    const point2 = points[1];\n\n\n    return (\n        <>\n            {/* <Line \n                lineWidth={(lineWidth as number) * 1.5}\n                points={[[point2[0] - 0.2, point2[1] + 0.2, 0], point2]}\n                color={'gray'}\n                opacity={hidden ? 0 : 1}\n                transparent={true}\n            /> */}\n            <Line\n                ref={ref}\n                lineWidth={lineWidth}\n                points={points}\n                color={'gray'}\n                opacity={hidden ? 0 : 1}\n                transparent={true}\n            />\n\n            {/* <Line \n                lineWidth={(lineWidth as number) * 1.5}\n                points={[[point2[0] - 0.2, point2[1] - 0.2, 0], point2]}\n                color={'gray'}\n                opacity={hidden ? 0 : 1}\n                transparent={true}\n            /> */}\n        </>\n\n    )\n}\n\nArrow3d.defaultProps = {\n    lineWidth: 1.5\n}\n\nexport default Arrow3d;","import * as THREE from 'three'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { animated, useSpring, config } from 'react-spring/three'\nimport { RoundedBox, Text } from \"@react-three/drei\";\nimport { useFrame } from '@react-three/fiber'\nimport { BASE_POSY, SORT_CUBE_INTERVAL_DISTANCE, IGeometryProps, DISPATCH_INTERVAL } from '../../../types';\nimport Arrow3d from '../../../components/Arrow3d/arrow3d';\n\n\ninterface ILinkCube3dProps extends IGeometryProps {\n    /** 第一个cube的位置 */\n    startPosX: any;\n    /** 该cube即将经历或者已经历过的所有位置 */\n    sortIndexes: number[];\n    /** 该cube的当前位置 */\n    sortIndex: number;\n    /** 从该cube开始，箭头指向的位置 */\n    arrowTo: any;\n    /** 该元素是否上移 */\n    moveTop: boolean;\n    /** 该元素是否下移 */\n    moveDown: boolean;\n}\n\nconst LinkCube3d: React.FC<ILinkCube3dProps> = (props) => {\n\n    const {\n        position,\n        isActive,\n        isLock,\n        isSpRev,\n        value,\n        startPosX,\n        colorConfig,\n        sortIndex,\n        sortIndexes,\n        arrowTo,\n        moveTop,\n        moveDown,\n        disappear\n    } = props;\n\n    const [isHover, setIsHover] = useState(false)\n    const [isClick, setIsClick] = useState(false)\n    // 箭头的 x, y 坐标\n    const [posY, setPosY] = useState(0);\n    const [posX, setPosX] = useState(0);\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    /** 根据传入的排序下标，获取到 cube 所在的 X 坐标 */\n    const getPosX = (sortIndex: number) => startPosX + (sortIndex * SORT_CUBE_INTERVAL_DISTANCE);\n\n    /** 移动元素时，获取其起始位置 */\n    const getOrginPosX = () => {\n        return getPosX(sortIndex);\n    }\n\n    /** 移动元素时，获取其目标位置 */\n    const getTargetPosX = () => {\n        return getPosX(sortIndexes[sortIndexes.length - 1]);\n    }\n\n    const oldPosX = getOrginPosX();\n    const targetPosX = getTargetPosX();\n\n    /** 扫描数组的时候，如果改变了 active 属性，则给它设置一个点击效果 */\n    useEffect(() => {\n        isActive ? setIsClick(true) : setIsClick(false);\n    }, [isActive])\n\n    /** 配置扩缩动画效果 */\n    const { scale } = useSpring({\n        reverse: isSpRev,\n        from: { scale: 0 },\n        to: { scale: isClick ? 1.10 : 1 },\n        config: isSpRev ? config.default : config.wobbly\n    })\n\n    /** 配置颜色过渡效果 */\n    const { color } = useSpring({\n        color: (\n            isClick ? colorConfig?.activeColor :\n                isHover ? colorConfig?.hoverColor :\n                    isLock ? colorConfig?.lockColor : colorConfig?.defaultColor\n        )\n    })\n\n    useFrame(() => {\n\n        /** 监听水平移动 */\n        const deltaX = Math.abs(oldPosX - targetPosX) / (DISPATCH_INTERVAL / 20);\n        // 如果当前 sortIndex 需要改变\n        if (deltaX) {\n\n            // mesh 需要往右移\n            if (oldPosX - targetPosX < 0 && meshRef.current.position.x < targetPosX) {\n                meshRef.current.translateX(deltaX);\n                // setPosX(meshRef.current.position.x);\n                if (meshRef.current.position.x >= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                    // setPosX(meshRef.current.position.x);\n                }\n            }\n\n            // mesh 需要往左移\n            else if (oldPosX - targetPosX > 0 && meshRef.current.position.x > targetPosX) {\n                meshRef.current.translateX(-deltaX);\n                setPosX(meshRef.current.position.x);\n                if (meshRef.current.position.x <= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                    setPosX(meshRef.current.position.x);\n                }\n            }\n        }\n\n\n        /** 监听上下移动 */\n        const deltaY = 0.2;\n\n        if (moveTop) {\n            // 如果要上移\n            if (meshRef.current.position.y < 2) {\n                meshRef.current.translateY(deltaY);\n                setPosY(meshRef.current.position.y)\n                if (meshRef.current.position.y >= 2) {\n                    meshRef.current.position.y = 2;\n                    setPosY(meshRef.current.position.y)\n                }\n            }\n\n        } \n        \n        else if (moveDown) {\n            // 如果要下移\n            if (meshRef.current.position.y > 0) {\n                meshRef.current.translateY(-deltaY);\n                setPosY(meshRef.current.position.y)\n                if (meshRef.current.position.y <= 0) {\n                    meshRef.current.position.y = 0;\n                    setPosY(meshRef.current.position.y)\n                }\n            }\n        }\n    })\n\n    return (\n        <>\n            <animated.mesh\n                scale={scale}\n                ref={meshRef}\n                position={position}\n            >\n                <Text\n                    fontSize={0.5}\n                    color='black'\n                >\n                    {value}\n                </Text>\n                <RoundedBox\n                    args={[2, 1, 1]}\n                    onClick={() => setIsClick(!isClick)}\n                    onPointerOver={() => setIsHover(true)}\n                    onPointerOut={() => setIsHover(false)}\n                >\n                    <animated.meshPhongMaterial\n                        color={color}\n                        opacity={0.5}\n                        transparent={true}\n                    />\n                </RoundedBox>\n            </animated.mesh>\n            {\n                (arrowTo && !isSpRev) && <Arrow3d points={[[position[0] + 1, posY, position[2]], arrowTo]} />\n            }\n        </>\n    )\n}\n\nLinkCube3d.defaultProps = {\n    colorConfig: {\n        defaultColor: 'wheat',\n        activeColor: 'orange',\n        hoverColor: 'skyblue',\n        lockColor: '#8076a3'\n    }\n}\n\nexport default React.memo(LinkCube3d);","import { ILinkCube } from \"../pages/LinkedList/linkedList\";\nimport { ActionTypes, LINK_CUBE_INTERVAL_DISTANCE } from \"../types\";\n\n/** 根据数组长度，计算出第一个 cube 的 position 的 x 坐标 */\nexport function getStartPosX(arrLen: number): number {\n    return -(arrLen - 1) * LINK_CUBE_INTERVAL_DISTANCE / 2;\n}\n\nexport function initCubes(values: number[]): ILinkCube[] {\n    // 箭头头部的起始位置\n    const arrowStartPosX = getStartPosX(values.length) + 2.5;\n    return values.map((value, index) => {\n        return {\n            value,\n            isActive: false,\n            isLock: false,\n            arrowTo: index === values.length - 1 ? null : [arrowStartPosX + (index * LINK_CUBE_INTERVAL_DISTANCE), 0, 0],\n            sortIndex: index,\n            sortIndexes: [index],\n            moveTop: false,\n            moveDown: false,\n            posY: 0\n        }\n    })\n}\n\n/** 返回头插法细节 */\nexport function headInsertSeq() {\n    const seq = [];\n    // 先生成一个激活状态，且在上方的 cube\n    seq.push({ type: ActionTypes.HeadInsert })\n    // 让这个新的 cube 的箭头指向其右下方的 cube\n    seq.push({ type: ActionTypes.ShowArrow })\n    // 向下移动该 cube\n    seq.push({ type: ActionTypes.MoveDown })\n    // 取消激活\n    seq.push({ type: ActionTypes.Deactive })\n    return seq;\n}\n\n/** 返回尾插法细节 */\nexport function tailInsertSeq() {\n\n}","import React, { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, InputNumber, PageHeader, Steps, message } from 'antd';\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport LinkCube3d from './LinkCube3d/linkCube3d'\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { randomArr, randomNum } from '../../utils/index'\nimport { ActionTypes, LINK_CUBE_INTERVAL_DISTANCE, IGeometryProps, OpeDetailTypes, DISPATCH_INTERVAL } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined,\n} from '@ant-design/icons'; import './linkedList.scss'\nimport { getStartPosX, headInsertSeq, initCubes } from '../../utils/linkedList';\n\nconst { Step } = Steps;\n\nexport interface ILinkCube extends IGeometryProps {\n    /** 该cube即将经历或者已经历过的所有位置 */\n    sortIndexes: number[];\n    /** 该cube的当前位置 */\n    sortIndex: number;\n    /** 从该cube开始，箭头指向的位置 */\n    arrowTo: any;\n    /** 是否让该元素上移 */\n    moveTop: boolean;\n    /** 元素的初始Y坐标 */\n    posY: number;\n    /** 是否让该元素下移 */\n    moveDown: boolean;\n}\ntype IReducer = (state: IState, action: IAction) => IState;\n\ninterface IState {\n    // 用来表示数组中各值的实时位置\n    values: number[];\n    // 用来表示每个 cube 的属性，其元素位置无意义，其中 sortIndex 才是对应的 values 的下标\n    cubes: ILinkCube[];\n    // 是否排序完毕\n    sortDone: boolean;\n    // 是否随机化完毕\n    randomDone: boolean;\n    // 第一个cube的起始x坐标\n    startPosX: number;\n    // 记录当前操作的细节\n    opeDetails: { type: OpeDetailTypes, payload?: any }[]\n}\n\ninterface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nconst initState: IState = {\n    values: [],\n    cubes: [],\n    sortDone: true,\n    randomDone: true,\n    startPosX: 0,\n    opeDetails: []\n}\n\nfunction reducer(state: IState = initState, action: IAction): IState {\n\n    const { type, payload } = action;\n\n\n    switch (type) {\n        case ActionTypes.Active:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.HeadInsert:\n            {\n                // 生成一个激活的 cube\n                const newCube: ILinkCube = {\n                    arrowTo: null,\n                    moveDown: false,\n                    moveTop: true,\n                    posY: 2,\n                    sortIndex: 0,\n                    sortIndexes: [0],\n                    value: randomNum(3, 40),\n                    isActive: true\n                }\n\n                const newCubes = state.cubes.map((item) => {\n                    return {\n                        ...item,\n                        sortIndexes: [...item.sortIndexes, item.sortIndex + 1]\n                    }\n                })\n\n                newCubes.push(newCube);\n\n                let newOpeDetail;\n\n                return {\n                    ...state,\n                    cubes: newCubes,\n                    // opeDetails: newOpeDetail ? [...state.opeDetails, newOpeDetail] : [...state.opeDetails]\n                }\n            }\n\n        // case ActionTypes.Add:\n\n        // case ActionTypes.Delete:\n\n        case ActionTypes.RandomDone:\n            {\n                let newValues = randomArr(randomNum(3, 5));\n                let newStartPosX = getStartPosX(newValues.length);\n                return {\n                    ...state,\n                    cubes: initCubes(newValues),\n                    values: newValues,\n                    randomDone: true,\n                    startPosX: newStartPosX\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false,\n                opeDetails: []\n            };\n\n        // case ActionTypes.Search:\n\n        default:\n            return state;\n    }\n}\n\nconst LinkedList = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer, IState>(reducer, initState, (state): IState => {\n\n        let initValues = randomArr(randomNum(3, 5));\n        let startPosX = getStartPosX(initValues.length);\n        return {\n            ...state,\n            values: initValues,\n            cubes: initCubes(initValues),\n            startPosX\n        }\n    })\n\n    /** 控制台的添加删除元素的value和index */\n    const [value, setValue] = useState(0);\n    const [index, setIndex] = useState(0);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n\n    /** 处理动画速度改变 */\n    const handleSliderChange = (value: number) => {\n        // console.log(value);\n    }\n\n    /** 处理头插 */\n    const handleHeadInsert = () => {\n        if (state.values.length < 10) {\n            const sequence = headInsertSeq();\n            sequence.forEach((event, i) => {\n                setTimeout(() => {\n                    dispatch(event);\n                }, i * DISPATCH_INTERVAL)\n            })\n        } else {\n            message.warning('插入失败，链表最大容量为10')\n        }\n    }\n\n    /** 处理尾插 */\n    const handleTailInsert = () => {\n        if (state.values.length < 10) {\n\n        } else {\n            message.warning('插入失败，链表最大容量为10')\n        }\n    }\n\n    /** 处理添加元素 */\n    const handleAddEle = () => {\n\n    }\n\n    /** 处理删除元素 */\n    const handleDeleteEle = () => {\n\n    }\n\n    return (\n        <div className='linkedList-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.goBack();\n                    window.location.reload();\n                }}\n                title='链表'\n            />\n\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n                    {state.cubes.map((item, i, arr) => {\n                        return (\n                            <React.Fragment key={'linkCube' + i}>\n                                <LinkCube3d\n                                    moveTop={item.moveTop}\n                                    moveDown={item.moveDown}\n                                    arrowTo={item.arrowTo}\n                                    sortIndex={item.sortIndex}\n                                    sortIndexes={item.sortIndexes}\n                                    startPosX={state.startPosX}\n                                    value={item.value}\n                                    isActive={item.isActive}\n                                    isLock={item.isLock}\n                                    isSpRev={!state.randomDone}\n                                    position={[state.startPosX + (item.sortIndex * LINK_CUBE_INTERVAL_DISTANCE), item.posY, 0]}\n                                />\n                                {i === 0 || i === arr.length - 1 ?\n                                    <Text\n                                        fillOpacity={state.randomDone ? 1 : 0}\n                                        color='black'\n                                        fontSize={0.5}\n                                        position={[state.startPosX + (item.sortIndex * LINK_CUBE_INTERVAL_DISTANCE), -1, 0]}\n                                    >\n                                        {i === 0 ? 'head' : 'tail'}\n                                    </Text> : <></>\n                                }\n                            </React.Fragment>\n                        )\n                    })}\n                    {/* <LinkCube3d\n                        value={1}\n                        position={[-3.5, 0, 0]}\n                    />\n                    <Arrow3d points={[[-2.5, 0, 0], [-1, 0, 0]]} />\n                    <LinkCube3d\n                        value={2}\n                        position={[0, 0, 0]}\n                    />\n                    <Arrow3d points={[[1, 0, 0], [2.5, 0, 0]]} />\n                    <LinkCube3d\n                        value={3}\n                        position={[3.5, 0, 0]}\n                    />\n                    <Arrow3d points={[[4.5, 0, 0], [6, 0, 0]]} />\n                    <LinkCube3d\n                        value={4}\n                        position={[7, 0, 0]}\n                    /> */}\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'inline-block' : 'none' }}\n                    onSliderChange={handleSliderChange}\n                    operation={\n                        <>\n                            <div className='btn-group'>\n                                <div className='row'>\n                                    <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                                    <Button icon={<BarChartOutlined />} onClick={handleHeadInsert}>头插</Button>\n                                    <Button icon={<BarChartOutlined />} onClick={handleTailInsert}>尾插</Button>\n                                </div>\n                            </div>\n\n                            <div className='input-group'>\n                                <label>\n                                    <span className='lable-name'>数值:</span>\n                                    <InputNumber onChange={(value) => setValue(value as number)} />\n                                </label>\n                                <label>\n                                    <span className='lable-name'>序号:</span>\n                                    <InputNumber onChange={(index) => setIndex(index as number)} />\n                                </label>\n                                <Button type='primary' onClick={handleAddEle}>添加</Button>\n                                <Button onClick={handleDeleteEle}>删除</Button>\n                            </div>\n                        </>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.Swap:\n                                        return (\n                                            <Step\n                                                title={`交换元素: i1=${payload.indexes[0]}, i2=${payload.indexes[1]}`}\n                                                description={`当前数组: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Add:\n                                        return (\n                                            <Step\n                                                title={`新增元素: i=${payload.index}, v=${payload.value}`}\n                                                description={`当前数组: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Delete:\n                                        return (\n                                            <Step\n                                                title={`删除元素: i=${payload.index}, v=${payload.value}`}\n                                                description={`当前数组: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n                                    default:\n                                        return <></>\n                                }\n                            })}\n\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='item2'\n                        icon={<BarChartOutlined />}\n                        title='插入元素'\n                    >\n                        <Item onClick={handleHeadInsert}>头插</Item>\n                        <Item onClick={handleTailInsert}>尾插</Item>\n                    </SubMenu>\n                </Console>\n            </div>\n\n        </div>\n    )\n}\n\nexport default LinkedList;","import { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Drawer, Input, PageHeader } from 'antd';\nimport { Map, List } from 'immutable'\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { randomArr, randomNum } from '../../utils/index'\nimport { ActionTypes, BASE_POSY, SORT_CUBE_INTERVAL_DISTANCE, DISPATCH_INTERVAL, IGeometryProps } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined,\n    MinusSquareOutlined,\n    PlusSquareOutlined,\n} from '@ant-design/icons';\nimport './redBlackTree.scss'\n\nexport interface IBinaryHeapCube extends IGeometryProps {\n\n}\ntype IReducer = (state: IState, action: IAction) => IState;\n\ninterface IState {\n    // 是否随机化完毕\n    randomDone: boolean;\n}\n\ninterface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nconst initState: IState = {\n    randomDone: true,\n}\n\nfunction reducer(state: IState = initState, action: IAction): IState {\n\n    const { type, payload } = action;\n\n\n    switch (type) {\n        case ActionTypes.Active:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n            }\n\n\n        // case ActionTypes.Add:\n\n        // case ActionTypes.Delete:\n\n        case ActionTypes.RandomDone:\n            {\n                return {\n                    ...state,\n                    randomDone: true\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            };\n\n        // case ActionTypes.Search:\n\n        default:\n            return state;\n    }\n}\n\nconst RedBlackTree = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n        }\n    })\n\n    /** 控制抽屉是否展开 */\n    const [isUnfold, setIsUnfold] = useState(false);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 传入数组长度，计算第一个元素的起始x坐标 */\n    // const startPosX = getStartXPos(state.cubes.length);\n\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n    return (\n        <div className='redBlackTree-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.goBack();\n                    window.location.reload();\n                }}\n                title='红黑树'\n            />\n\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'inline-block' : 'none' }}\n                >\n                    <Item\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='2'\n                        icon={<BarChartOutlined />}\n                        title='排序'\n                    >\n                        <Item>冒泡排序</Item>\n                        <Item>选择排序</Item>\n                        <Item>插入排序</Item>\n                        <Item>快速排序</Item>\n                        <Item>归并排序</Item>\n                    </SubMenu>\n\n                    <SubMenu\n                        icon={<PlusSquareOutlined />}\n                    >\n                        <Item>\n                            <Input />\n                            <Button>添加</Button>\n                        </Item>\n                    </SubMenu>\n                    <Item icon={<MinusSquareOutlined />}>删除</Item>\n                </Console>\n            </div>\n\n        </div>\n    )\n}\n\nexport default RedBlackTree;\n\n\n","import { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Drawer, Input, PageHeader } from 'antd';\nimport { Map, List } from 'immutable'\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { randomArr, randomNum } from '../../utils/index'\nimport { ActionTypes, BASE_POSY, SORT_CUBE_INTERVAL_DISTANCE, DISPATCH_INTERVAL, IGeometryProps } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined,\n    MinusSquareOutlined,\n    PlusSquareOutlined,\n} from '@ant-design/icons';\nimport './bPlusTree.scss'\n\nexport interface IBinaryHeapCube extends IGeometryProps {\n\n}\ntype IReducer = (state: IState, action: IAction) => IState;\n\ninterface IState {\n    // 是否随机化完毕\n    randomDone: boolean;\n}\n\ninterface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nconst initState: IState = {\n    randomDone: true,\n}\n\nfunction reducer(state: IState = initState, action: IAction): IState {\n\n    const { type, payload } = action;\n\n\n    switch (type) {\n        case ActionTypes.Active:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n            }\n\n\n        // case ActionTypes.Add:\n\n        // case ActionTypes.Delete:\n\n        case ActionTypes.RandomDone:\n            {\n                return {\n                    ...state,\n                    randomDone: true\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            };\n\n        // case ActionTypes.Search:\n\n        default:\n            return state;\n    }\n}\n\nconst BPlusTree = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n        }\n    })\n\n    /** 控制抽屉是否展开 */\n    const [isUnfold, setIsUnfold] = useState(false);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 传入数组长度，计算第一个元素的起始x坐标 */\n    // const startPosX = getStartXPos(state.cubes.length);\n\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n    return (\n        <div className='bPlusTree-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.goBack();\n                    window.location.reload();\n                }}\n                title='B+树'\n            />\n\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'inline-block' : 'none' }}\n                >\n                    <Item\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='2'\n                        icon={<BarChartOutlined />}\n                        title='排序'\n                    >\n                        <Item>冒泡排序</Item>\n                        <Item>选择排序</Item>\n                        <Item>插入排序</Item>\n                        <Item>快速排序</Item>\n                        <Item>归并排序</Item>\n                    </SubMenu>\n\n                    <SubMenu\n                        icon={<PlusSquareOutlined />}\n                    >\n                        <Item>\n                            <Input />\n                            <Button>添加</Button>\n                        </Item>\n                    </SubMenu>\n\n                    <Item icon={<MinusSquareOutlined />}>删除</Item>\n\n                </Console>\n\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default BPlusTree;\n\n\n","import { randomArr, randomNum } from '.';\nimport { IBSTCube3d } from '../pages/BinarySearchTree/store';\nimport { ActionTypes } from '../types';\nimport { log } from './math';\n\n/** 获取传入结点的父结点数据值 */\nexport function getFatherValue<T>(binaryTree: T[], indexOfNode: number) {\n    return binaryTree[Math.floor((indexOfNode - 1) / 2)];\n}\n\n/** 获取传入结点的左孩子数据值 */\nexport function getLChildValue<T>(binaryTree: T[], indexOfNode: number) {\n    return binaryTree[indexOfNode * 2 + 1];\n}\n\n/** 获取传入结点的右孩子数据值 */\nexport function getRChildValue<T>(binaryTree: T[], indexOfNode: number) {\n    return binaryTree[indexOfNode * 2 + 2]\n}\n\n/** 为传入的结点设置左孩子 */\nexport function setLChild<T>(binaryTree: T[], indexOfNode: number, lChild: T) {\n    const root = binaryTree[indexOfNode];\n    if (root) binaryTree[indexOfNode * 2 + 1] = lChild;\n    else throw 'node is null';\n}\n\n/** 为传入的结点设置右孩子 */\nexport function setRChild<T>(binaryTree: T[], indexOfNode: number, rChild: T) {\n    const root = binaryTree[indexOfNode];\n    if (root) binaryTree[indexOfNode * 2 + 2] = rChild;\n    else throw 'node is null';\n}\n\n/** 根据传入的下标获取结点所在的二叉树层数 */\nexport function getDeepthByNodeIndex(indexOfNode: number) {\n    return Math.floor(log(2, indexOfNode + 1));\n}\n\n/** 随机生成结点数为n的二叉树 */\nfunction binaryTreeGenerator(n: number, binaryTree: (number | null)[], indexOfRoot: number) {\n    if (n === 0) return;\n\n    // 左孩子的值\n    const lChildV = randomNum(1, 80);\n    // 右孩子的值\n    const rChildV = randomNum(1, 80);\n\n    // 根结点的左子树的结点个数\n    const leftN = randomNum(0, n - 1);\n    const rightN = n - leftN - 1;\n\n    // 递归建立每棵子树\n    setLChild(binaryTree, indexOfRoot, leftN > 0 ? lChildV : null);\n    binaryTreeGenerator(leftN, binaryTree, indexOfRoot * 2 + 1)\n\n    setRChild(binaryTree, indexOfRoot, rightN > 0 ? rChildV : null);\n    binaryTreeGenerator(rightN, binaryTree, indexOfRoot * 2 + 2)\n}\n\n/** 生成层数小于3且结点数在 5 ～ 15 的二叉树 */\nexport function randomBinaryTree(): (number | null)[] {\n\n    let cache = new Array(500);\n\n    // 如果生成的二叉树的层数大于了3则重新生成\n    while (getDeepthByNodeIndex(cache.length - 1) > 3) {\n        cache.fill(null);\n        cache[0] = randomNum(1, 80);\n        binaryTreeGenerator(randomNum(5, 15), cache, 0);\n\n        // 找到 cache 中最后一个不为 null 的元素的下标\n        for (let i = 500; i >= 0; i--) {\n            if (cache[i] !== null) {\n                cache.length = i + 1;\n                break;\n            }\n        }\n    }\n    return cache;\n}\n\n/** 为二叉搜索树添加结点 */\nexport function addToBST(bts: any[], indexOfRoot: number ,nodeV: number) {\n    // 传入的 bts 必须有一个根结点\n    if (bts.length === 0) throw 'the length of bts is 0';\n\n    if (!bts[indexOfRoot]) return;\n\n    // 判断传入结点的值和当前子树根结点的值的关系\n    if (nodeV > bts[indexOfRoot]) {\n        // 当前结点的右孩子不存在，则直接挂上去\n        if (!getRChildValue(bts, indexOfRoot)) {\n            setRChild(bts, indexOfRoot, nodeV);\n        } else {\n            addToBST(bts, indexOfRoot * 2 + 2, nodeV);\n        }\n    } else {\n        // 当前结点的左孩子不存在，则直接挂上去\n        if (!getLChildValue(bts, indexOfRoot)) {\n            setLChild(bts, indexOfRoot, nodeV);\n        } else {\n            addToBST(bts, indexOfRoot * 2 + 1, nodeV);\n        }\n    }\n}\n\n/** 生成二叉搜索树结点数在 5 ~ 15，且层数小于3的二叉搜索树 */\nexport function randomBST() {\n    // 初始化 cache\n    let cache = new Array(500);\n\n    // 如果生成的二叉搜索树的层数大于了3则重新生成\n    while (getDeepthByNodeIndex(cache.length - 1) > 3) {\n        const arr = randomArr(randomNum(5, 15));\n        cache.fill(null);\n        cache[0] = randomNum(20, 80);\n\n        // 用 arr 向 cache 中添加结点\n        arr.forEach((value) => {\n            addToBST(cache, 0, value)\n        })\n\n        // 找到 cache 中最后一个不为 null 的元素的下标\n        for (let i = 500; i >= 0; i--) {\n            if (cache[i] !== null) {\n                cache.length = i + 1;\n                break;\n            }\n        }\n    }\n    return cache;\n}\n\n/** 初始化二叉树sphere */\nexport function initSpheres(values: (number | null)[]): IBSTCube3d[] {\n    return values.map((value, index) => ({\n        sortIndex: index,\n        value,\n        isActive: false,\n        isLock: false,\n    }))\n}\n\n/** 获取二叉树前序遍历的细节 */\nexport function preOrderSeq(binaryTree: (number | null)[], indexOfNode: number, sequence: any[]) {\n    sequence.push({ type: ActionTypes.Active, index: indexOfNode });\n    // sequence.push({ type: ActionTypes.ActiveLeft, index: indexOfNode })\n    sequence.push({ type: ActionTypes.Deactive, index: indexOfNode });\n    sequence.push({ type: ActionTypes.Lock, index: indexOfNode });\n    if (getLChildValue(binaryTree, indexOfNode)) preOrderSeq(binaryTree, indexOfNode * 2 + 1, sequence);\n    if (getRChildValue(binaryTree, indexOfNode)) preOrderSeq(binaryTree, indexOfNode * 2 + 2, sequence);\n}\n\n/** 获取二叉树中序遍历的细节 */\nexport function inOrderSeq(binaryTree: (number | null)[], indexOfNode: number, sequence: any[]) {\n    if (getLChildValue(binaryTree, indexOfNode)) inOrderSeq(binaryTree, indexOfNode * 2 + 1, sequence);\n    sequence.push({ type: ActionTypes.Active, index: indexOfNode });\n    // sequence.push({ type: ActionTypes.ActiveRight, index: indexOfNode })\n    sequence.push({ type: ActionTypes.Deactive, index: indexOfNode });\n    sequence.push({ type: ActionTypes.Lock, index: indexOfNode })\n    if (getRChildValue(binaryTree, indexOfNode)) inOrderSeq(binaryTree, indexOfNode * 2 + 2, sequence);\n}\n\n/** 获取二叉树后序遍历的细节 */\nexport function postOrderSeq(binaryTree: (number | null)[], indexOfNode: number, sequence: any[]) {\n    if (getLChildValue(binaryTree, indexOfNode)) postOrderSeq(binaryTree, indexOfNode * 2 + 1, sequence);\n    if (getRChildValue(binaryTree, indexOfNode)) postOrderSeq(binaryTree, indexOfNode * 2 + 2, sequence);\n    sequence.push({ type: ActionTypes.Active, index: indexOfNode });\n    sequence.push({ type: ActionTypes.ActiveLeft, index: indexOfNode })\n    sequence.push({ type: ActionTypes.Deactive, index: indexOfNode });\n    sequence.push({ type: ActionTypes.Lock, index: indexOfNode })\n}\n\n\n","/**\n * 计算对数\n * @param base 底数\n * @param truth 真数\n */\nexport function log(base: number, truth: number) {\n    return Math.log(truth) / Math.log(base)\n}","import { Points } from \"../../types\";\n\n/** 满二叉树的各点坐标 */\nexport const cdnOfNodes: Points = [\n    // 第一排\n    [0, 5, 0],\n    // 第二排\n    [-4, 2, 0], [4, 2, 0],\n    // 第三排\n    [-6, -1, 0], [-2, -1, 0], [2, -1, 0], [6, -1, 0],\n    // 第四排\n    [-7, -4, 0], [-5, -4, 0], [-3, -4, 0], [-1, -4, 0], [1, -4, 0], [3, -4, 0], [5, -4, 0], [7, -4, 0]\n]","import { ActionTypes, IReducer, OpeDetailTypes } from \"../../types\";\nimport { initSpheres, randomBST } from \"../../utils/binaryTree\";\nimport { IBSTSphere3dProps } from \"./BSTSphere3d/bstSphere3d\";\n\nexport interface IBSTCube3d extends IBSTSphere3dProps {\n\n}\n\nexport interface IState {\n    // 表示二叉树当前真实的结构\n    binaryTree: (number | null)[];\n    // 用来表示每个 sphere 的属性，其元素位置无意义，其中 sortIndex 才是对应的 values 的下标\n    spheres: IBSTCube3d[];\n    randomDone: boolean;\n    opeDetails: any[];\n}\n\nexport const initState: IState = {\n    binaryTree: [],\n    spheres: [],\n    opeDetails: [],\n    randomDone: true,\n\n}\n\nexport const reducer: IReducer<IState> = (state = initState, action) => {\n    const { type, payload } = action;\n    switch (type) {\n\n\n        case ActionTypes.StartPreorder:\n            return {\n                ...state,\n                spheres: state.spheres.map(\n                    (item) => ({ ...item, isLock: false })\n                ),\n                opeDetails: [...state.opeDetails, { type: OpeDetailTypes.PreOrderDetails, payload }]\n            }\n\n        case ActionTypes.StartInOrder:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isLock: false,\n                    activeLeft: false,\n                    activeRight: false\n                })),\n                opeDetails: [...state.opeDetails, { type: OpeDetailTypes.InOrderDetails, payload }]\n            }\n\n        case ActionTypes.StartPostOrder:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isLock: false,\n                    activeLeft: false,\n                    activeRight: false\n                })),\n                opeDetails: [...state.opeDetails, { type: OpeDetailTypes.PostOrderDetails, payload }]\n            }\n\n        case ActionTypes.Active:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isActive: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.ActiveLeft:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    activeLeft: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.ActiveRight:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    activeRight: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isActive: payload === item.sortIndex ? false : item.isActive\n                }))\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n                spheres: state.spheres.map(\n                    (item) => payload === item.sortIndex ? { ...item, isLock: true } : { ...item }\n                )\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n                spheres: state.spheres.map(\n                    (item) => payload === item.sortIndex ? { ...item, isLock: false } : { ...item }\n                )\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            }\n\n        case ActionTypes.RandomDone:\n            {\n                let newBinaryTree = randomBST();\n\n                const treeToString = newBinaryTree.map((item) => {\n                    if (!item) return 'null'\n                    return item;\n                }).toString();\n\n                return {\n                    ...state,\n                    binaryTree: newBinaryTree,\n                    spheres: initSpheres(newBinaryTree),\n                    randomDone: true,\n                    opeDetails: [{ type: OpeDetailTypes.Default, payload: treeToString }]\n                }\n            }\n\n        default:\n            return {\n                ...state\n            }\n    }\n}","import { Line } from '@react-three/drei'\nimport { Points } from '../../types';\n\ninterface ILine3dProps {\n    points: Points;\n    hidden: boolean;\n    lineWidth?: number;\n    isActive?: boolean;\n}\n\nconst Line3d:React.FC<ILine3dProps> = (props) => {\n\n    const {\n        points,\n        hidden,\n        lineWidth,\n        isActive\n    } = props;\n\n    return (\n        <Line\n            lineWidth={lineWidth}\n            points={points}\n            color={isActive ? 'orange' : 'gray'}\n            opacity={hidden ? 0 : 1}\n            transparent={true}\n        />\n\n    )\n}\n\nLine3d.defaultProps = {\n    lineWidth: 1.5\n}\n\nexport default Line3d;","import { IColorConfig, IGeometryProps } from '../../types';\nimport { Icosahedron, Text } from '@react-three/drei'\nimport { animated, config, useSpring } from 'react-spring/three';\nimport { useEffect, useRef, useState } from 'react';\n\nexport interface ISphere3dProps extends IGeometryProps {\n\n}\n\nconst Sphere3d: React.FC<ISphere3dProps> = (props) => {\n\n    const {\n        position,\n        value,\n        isActive,\n        isLock,\n        isSpRev,\n        colorConfig,\n    } = props;\n\n    const [isHover, setIsHover] = useState(false)\n    const [isClick, setIsClick] = useState(false)\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    /** 配置颜色过渡效果 */\n    const { color } = useSpring({\n        color: (\n            isClick ? colorConfig?.activeColor :\n                isHover ? colorConfig?.hoverColor :\n                    isLock ? colorConfig?.lockColor : colorConfig?.defaultColor\n        )\n    })\n\n    /** 配置扩缩动画效果 */\n    const { scale } = useSpring({\n        reset: isSpRev,\n        reverse: isSpRev,\n        from: { scale: 0 },\n        to: { scale: isClick ? 1.20 : 1 },\n        config: isSpRev ? config.default : config.wobbly\n    })\n\n    /** 扫描数组的时候，如果改变了 active 属性，则给它设置一个点击效果 */\n    useEffect(() => {\n        isActive ? setIsClick(true) : setIsClick(false);\n    }, [isActive])\n\n    return (\n        <animated.mesh\n            position={position}\n            ref={meshRef}\n            scale={scale}\n        >\n            <Icosahedron\n                args={[0.7, 10]}\n                onClick={() => setIsClick(!isClick)}\n                onPointerOver={() => setIsHover(true)}\n                onPointerOut={() => setIsHover(false)}\n            >\n                <Text\n                    position={[0, 0, 0.7]}\n                    fontSize={0.5}\n                    color='black'\n                >\n                    {value}\n                </Text>\n\n                <animated.meshPhongMaterial\n                    color={color}\n                    opacity={1}\n                />\n            </Icosahedron>\n        </animated.mesh>\n    )\n}\n\nSphere3d.defaultProps = {\n    colorConfig: {\n        defaultColor: 'wheat',\n        activeColor: 'orange',\n        hoverColor: 'skyblue',\n        lockColor: '#8076a3'\n    }\n}\n\nexport default Sphere3d;","import React from \"react\";\nimport Line3d from \"../../../components/Line3d/line3d\";\nimport Sphere3d, { ISphere3dProps } from \"../../../components/Sphere3d/sphere3d\";\n\nexport interface IBSTSphere3dProps extends ISphere3dProps {\n    /** 结点的实际顺序 */\n    sortIndex?: number;\n    /** 左线条位置 */\n    lChildPos?: any;\n    /** 右线条位置 */\n    rChildPos?: any;\n    /** 激活左线条 */\n    activeLeft?: boolean;\n    /** 激活右线条 */\n    activeRight?: boolean;\n}\n\nconst BSTCube3d: React.FC<IBSTSphere3dProps> = (props) => {\n\n    const {\n        lChildPos,\n        rChildPos,\n        isSpRev,\n        position,\n        activeLeft,\n        activeRight\n        // position,\n        // value,\n        // isActive,\n        // isLock,\n        // isSpRev,\n        // colorConfig,\n        // lChildPos,\n        // rChildPos,\n        // disappear,\n        // sortIndex\n    } = props;\n\n    return (\n        <>\n            <Sphere3d\n                {...props}\n            />\n            {\n                lChildPos &&\n                <Line3d\n                    hidden={isSpRev as boolean}\n                    points={[position, lChildPos]}\n                    isActive={activeLeft}\n                />\n            }\n            {\n                rChildPos &&\n                <Line3d\n                    hidden={isSpRev as boolean}\n                    points={[position, rChildPos]}\n                    isActive={activeRight}\n                />\n            }\n        </>\n    )\n}\n\nexport default BSTCube3d;","import { useReducer, useState } from 'react'\nimport { useHistory } from 'react-router'\nimport { Button, PageHeader, Steps } from 'antd'\nimport { BarChartOutlined, DotChartOutlined } from '@ant-design/icons'\nimport Console, { Item, SubMenu } from '../../components/Console/console'\nimport Scene3d from '../../components/Scene3d/scene3d'\nimport { ActionTypes, DISPATCH_INTERVAL, IReducer, OpeDetailTypes } from '../../types'\nimport { randomBST, getDeepthByNodeIndex, getLChildValue, getRChildValue, initSpheres, inOrderSeq, postOrderSeq, preOrderSeq } from '../../utils/binaryTree'\nimport { cdnOfNodes } from './config'\nimport { initState, IState, reducer } from './store'\nimport './binarySearchTree.scss'\nimport BSTCube3d from './BSTSphere3d/bstSphere3d'\n\nconst { Step } = Steps;\n\nconst BinarySearchTree = () => {\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer<IState>, IState>(reducer, initState, (state): IState => {\n        const initBinaryTree = randomBST();\n        const treeToString = initBinaryTree.map((item) => {\n            if (!item) return 'null'\n            return item;\n        }).toString();\n        return {\n            ...state,\n            binaryTree: initBinaryTree,\n            spheres: initSpheres(initBinaryTree),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: treeToString }]\n        }\n    });\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 获取二叉树的最大层数 */\n    const maxDeepth = getDeepthByNodeIndex(state.binaryTree.length - 1);\n\n    /** 添加元素 */\n    const handleAddEle = () => {\n        // console.log(value, index);\n    }\n\n    /** 删除元素 */\n    const handleDeleteEle = () => {\n\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n\n    /** 前序遍历 */\n    const handlePreorder = () => {\n        let sequence: any[] = [];\n        preOrderSeq(state.binaryTree, 0, sequence);\n        const preOrderRes: number[] = [];\n        sequence.forEach((event) => {\n            if (event.type === ActionTypes.Active) preOrderRes.push(state.binaryTree[event.index] as number)\n        })\n        dispatch({ type: ActionTypes.StartPreorder, payload: preOrderRes });\n        sequence.forEach((event, i) => {\n            setTimeout(() => {\n                dispatch({ type: event.type, payload: event.index })\n            }, i * DISPATCH_INTERVAL)\n        })\n\n    }\n\n    /** 中序遍历 */\n    const handleInorder = () => {\n        let sequence: any[] = [];\n        inOrderSeq(state.binaryTree, 0, sequence);\n        const inOrderRes: number[] = [];\n        sequence.forEach((event) => {\n            if (event.type === ActionTypes.Active) inOrderRes.push(state.binaryTree[event.index] as number)\n        })\n        dispatch({ type: ActionTypes.StartInOrder, payload: inOrderRes });\n        sequence.forEach((event, i) => {\n            setTimeout(() => {\n                dispatch({ type: event.type, payload: event.index })\n            }, i * DISPATCH_INTERVAL)\n        })\n    }\n\n    /** 后序遍历 */\n    const handlePostorder = () => {\n        let sequence: any[] = [];\n        postOrderSeq(state.binaryTree, 0, sequence);\n        const postOrderRes: number[] = [];\n        sequence.forEach((event) => {\n            if (event.type === ActionTypes.Active) postOrderRes.push(state.binaryTree[event.index] as number)\n        })\n        dispatch({ type: ActionTypes.StartPostOrder, payload: postOrderRes });\n        sequence.forEach((event, i) => {\n            setTimeout(() => {\n                dispatch({ type: event.type, payload: event.index })\n            }, i * DISPATCH_INTERVAL)\n        })\n    }\n\n    return (\n        <div className='binarySearchTree-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace('/data-structure-visualization/')\n                    window.location.reload();\n                }}\n                title='二叉搜索树'\n            />\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n                    {state.spheres.map((sphere, i) => {\n                        // 判断当前结点是否有左孩子\n                        const hasLChild = getLChildValue(state.spheres, i)?.value;\n\n                        // 获取左结点的位置\n                        const lChildPos = getLChildValue(cdnOfNodes, i);\n\n                        // 判断当前结点是否有右孩子\n                        const hasRChild = getRChildValue(state.spheres, i)?.value;\n\n                        // 获取右结点的位置\n                        const rChildPos = getRChildValue(cdnOfNodes, i);\n\n                        return (\n                            sphere.value &&\n                            <BSTCube3d\n                                key={'sphere' + i}\n                                value={sphere.value}\n                                position={cdnOfNodes[i]}\n                                isActive={sphere.isActive}\n                                activeLeft={sphere.activeLeft}\n                                activeRight={sphere.activeRight}\n                                isLock={sphere.isLock}\n                                isSpRev={!state.randomDone}\n                                lChildPos={hasLChild && lChildPos}\n                                rChildPos={hasRChild && rChildPos}\n\n                            />\n                        )\n                    })}\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'inline-block' : 'none' }}\n                    // onSliderChange={handleSliderChange}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handlePreorder}>前序遍历</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handleInorder}>中序遍历</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handlePostorder}>后序遍历</Button>\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.InOrderDetails:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`中序遍历: [${payload}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.PreOrderDetails:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`前序遍历: [${payload}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.PostOrderDetails:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`后序遍历: [${payload}]`}\n                                            />\n                                        )\n\n                                    default:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`当前二叉树: [${payload}]`}\n                                            />\n                                        )\n                                }\n                            })}\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='item2'\n                        icon={<BarChartOutlined />}\n                        title='遍历'\n                    >\n                        <Item onClick={handlePreorder}>前序遍历</Item>\n                        <Item onClick={handleInorder}>中序遍历</Item>\n                        <Item onClick={handlePostorder}>后序遍历</Item>\n                    </SubMenu>\n                </Console>\n\n            </div>\n        </div>\n    )\n}\n\nexport default BinarySearchTree;","import Home from '../../pages/Home/home'\nimport Sort from '../../pages/Sort/sort'\nimport AVLTree from '../../pages/AVLTree/avlTree'\nimport Graph from '../../pages/Graph/graph'\nimport BinaryHeap from '../../pages/BinaryHeap/binaryHeap'\nimport BTree from '../../pages/BTree/bTree'\nimport Queue from '../../pages/Queue/queue'\nimport Stack from '../../pages/Stack/stack'\nimport HashTable from '../../pages/HashTable/hashTable'\nimport LinkedList from '../../pages/LinkedList/linkedList'\nimport RedBlackTree from '../../pages/RedBlackTree/redBlackTree'\nimport BPlusTree from '../../pages/BPlusTree/bPlusTree'\nimport BinarySearchTree from '../../pages/BinarySearchTree/binarySearchTree'\n\nconst routerView = [\n    {\n        path: \"/data-structure-visualization/home/\",\n        page: Home\n    },\n    {\n        path: \"/data-structure-visualization/sort\",\n        page: Sort\n    },\n    {\n        path: \"/data-structure-visualization/linkedList\",\n        page: LinkedList\n    },\n    {\n        path: \"/data-structure-visualization/queue\",\n        page: Queue\n    },\n    {\n        path: \"/data-structure-visualization/stack\",\n        page: Stack\n    },\n    {\n        path: \"/data-structure-visualization/binarySearchTree\",\n        page: BinarySearchTree\n    },\n    {\n        path: \"/data-structure-visualization/binaryHeap\",\n        page: BinaryHeap\n    },\n    {\n        path: \"/data-structure-visualization/hashTable\",\n        page: HashTable\n    },\n    {\n        path: \"/data-structure-visualization/avlTree\",\n        page: AVLTree\n    },\n    {\n        path: \"/data-structure-visualization/redBlackTree\",\n        page: RedBlackTree\n    },\n    {\n        path: \"/data-structure-visualization/bTree\",\n        page: BTree\n    },\n\n    {\n        path: \"/data-structure-visualization/bPlusTree\",\n        page: BPlusTree\n    },\n    {\n        path: \"/data-structure-visualization/graph\",\n        page: Graph\n    },\n];\n\n\nexport default routerView\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport routerMap from \"./config\";\n\n\nconst RouterView = () => {\n  return (\n\n    <Router>\n      <Redirect to=\"/data-structure-visualization/home\" />\n      <Switch>\n        {routerMap.map((item, index) => (\n          <Route key={index} path={item.path} component={item.page} />\n        ))}\n      </Switch>\n    </Router>\n  \n  );\n};\n\nexport default RouterView;\n","import { Layout } from 'antd';\nimport RouterView from './configs/router';\nimport './App.scss';\nconst { Header, Content, Footer } = Layout;\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout className='layout'>\n        <Header className='header'>\n          <a href=\"/data-structure-visualization/\">Data Structure Visualization</a>\n        </Header>\n        <Content className='content'>\n          <RouterView />\n        </Content>\n        <Footer className='footer'>\n          DSV DC ©2021 Created by 孔磊 and 亢江林\n        </Footer>\n      </Layout>\n    </div>\n  );\n}\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  // <React.StrictMode>\n      <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}