{"version":3,"sources":["types/index.ts","utils/index.ts","components/Tag/tag.tsx","components/HomeItem/homeItem.tsx","assets/homeItemCovers/Sort.jpg","assets/homeItemCovers/Stack.jpg","assets/homeItemCovers/Queue.jpg","assets/homeItemCovers/BinarySearchTree.jpg","assets/homeItemCovers/84993086_p0.jpg","pages/Home/config.ts","pages/Home/home.tsx","components/Console/console.tsx","configs/page/defaultConfig.ts","components/Cube3d/cube3d.tsx","pages/Sort/config.ts","pages/Sort/SortCube3d/sortCube3d.tsx","components/Scene3d/scene3d.tsx","utils/array.ts","pages/Sort/utils.ts","pages/Sort/store.ts","pages/Sort/sort.tsx","pages/BinaryHeap/config.ts","pages/BinaryHeap/store.ts","components/Line3d/line3d.tsx","components/Sphere3d/sphere3d.tsx","pages/BinaryHeap/BinaryHeapSphere3d/binaryHeapSphere3d.tsx","utils/binaryTree.ts","utils/math.ts","pages/BinarySearchTree/utils.ts","pages/BinaryHeap/binaryHeap.tsx","pages/Queue/QueueCube3d/queueCube3d.tsx","pages/Queue/config.ts","pages/Queue/utils.ts","pages/Queue/store.ts","pages/Queue/queue.tsx","pages/Stack/StackCube3d/stackCube3d.tsx","pages/Stack/config.ts","pages/Stack/utils.ts","pages/Stack/store.ts","pages/Stack/stack.tsx","pages/BinarySearchTree/config.ts","pages/BinarySearchTree/store.ts","pages/BinarySearchTree/BSTSphere3d/bstSphere3d.tsx","pages/BinarySearchTree/binarySearchTree.tsx","pages/HashTable/hashTable.tsx","pages/Graph/graph.tsx","configs/router/config.ts","configs/router/index.tsx","App.tsx","index.tsx"],"names":["DataStrucTypes","OpeDetailTypes","ActionTypes","excuteSeq","seq","speed","dispatch","Promise","resolve","type","Loading","forEach","event","i","setTimeout","e","length","CancelLoading","randomNum","range","Math","random","toFixed","randomArr","valueRange","arr","value","includes","push","useHover","useState","setValue","ref","useRef","handleMouseOver","handleMouseOut","useEffect","node","current","addEventListener","removeEventListener","Tag","props","color","defaultProps","HomeItem","title","src","tags","onClick","hoverRef","isHover","scale","useSpring","config","stiff","div","className","style","hoverable","cover","alt","Meta","description","map","tagName","homeItemsConfig","SortPic","Sort","StackPic","Stack","QueuePic","Queue","Pic","BinaryHeap","BinarySearchTree","HashTable","Graph","Home","history","useHistory","open","setOpen","handleClick","root","LinkedList","AVLTree","RedBlackTree","BTree","BPlusTree","from","size","opacity","to","row","gutter","xs","sm","md","col","j","lg","xl","width","height","Item","SubMenu","Console","children","operation","displayer","drawerHeight","showSilider","addText","defaultIndex","defaultSearchValue","defaultValue","indexRange","deleteText","isUpdate","isAddIndex","isDeleteIndex","isSearch","spinning","onSliderChange","onAdd","onDelete","onSearch","onIndexChange","onValueChange","onSearchValueChange","onRenderChange","onRender","hoverLeftRef","isLeftHover","hoverRenderRef","isRenderHover","isUnfold","setIsUnfold","index","setIndex","searchValue","setSearchValue","renderValue","setRenderValue","radioActived","setRadioActived","displayConRef","leftOpacity","renderOpacity","gentle","scrollTop","scrollHeight","mode","theme","inlineCollapsed","selectable","display","icon","MenuUnfoldOutlined","visible","placement","mask","onClose","onChange","tip","indicator","LoadingOutlined","fontSize","spin","Group","target","bordered","trim","defaultGeoColor","defaultColor","activeColor","hoverColor","lockColor","Cube3d","forwardRef","args","position","isActive","isLock","colorConfig","disappear","setIsHover","isClick","setIsClick","meshRef","reverse","default","wobbly","mesh","Text","RoundedBox","onPointerOver","onPointerOut","meshPhongMaterial","transparent","geoBaseDistance","geoNumRange","geoValueRange","geoBasePosY","cameraPosZ","animationSpeed","SortCube3d","sortIndexes","sortIndex","startPosX","restProps","getPosX","oldPosX","targetPosX","useFrame","delta","abs","x","translateX","React","memo","SceneLoader","progress","useProgress","onLoaded","Html","center","marginTop","Scene3d","cameraRef","PerspectiveCamera","makeDefault","intensity","fallback","OrbitControls","maxDistance","Environment","background","files","path","judgeSorted","initCubes","values","getStartPosX","arrLen","initSeq","Disappear","Generate","payload","Appear","quickSortSeq","l","r","sortSeq","Lock","Active","Deactive","Swap","temp","SwapDone","initState","cubes","loading","disappearAll","opeDetails","reducer","state","action","Default","item","sortDone","UnLock","index1","index2","newCubes","curSortIndex","newSortIndexes","newValues","newOpeDetail","indexes","curValues","newSortIndex","SortDone","Move","oldIndexes","targetIndexes","findIndex","splice","Delete","AddDone","newEle","targetIndex","newCube","pop","Add","DeleteDone","Step","useReducer","isSceneLoaded","setIsSceneLoaded","handleRandom","handleBubbleSort","backup","bubbleSortSeq","handleSelectSort","max","indexOfMax","selectSortSeq","handleQuickSort","sequence","onBack","replace","window","location","reload","_","fillOpacity","message","warning","addEleSeq","deleteEleSeq","parseRes","substring","split","test","parseValue","Array","isArray","BarChartOutlined","direction","toString","DotChartOutlined","maxDeepth","cdnOfNodes","binaryTree","spheres","randomDone","StartPreorder","PreOrderDetails","StartInOrder","activeLeft","activeRight","InOrderDetails","StartPostOrder","PostOrderDetails","ActiveLeft","ActiveRight","Random","RandomDone","Line3d","points","hidden","lineWidth","Line","Sphere3d","BSTSphere3d","lChildPos","rChildPos","oldPosY","targetPosY","deltaX","deltaY","y","translateY","formatSpheres","sphere","formatBinaryTree","treeToString","initSpheres","getFatherIndex","indexOfNode","floor","getChildrenIndexes","undefined","getLChildValue","getRChildValue","setLChild","lChild","Error","setRChild","rChild","getDeepthByNodeIndex","base","truth","log","judgeNode","childNum","preOrderSeq","inOrderSeq","postOrderSeq","addToBST","bst","indexOfRoot","nodeV","randomBST","nodeNumsRange","nodeValueRange","cache","fill","addNodeSeq","deleteNodeSeq","oldSortIndexes","searchSeq","initBinaryTree","handlePreorder","preOrderRes","handleInorder","inOrderRes","handlePostorder","postOrderRes","hasLChild","hasRChild","Fragment","cur","QueueCube3d","key","uuidv4","Enqueue","enqueueValue","Dequeue","shift","dequeueValue","enqueueSeq","dequeueSeq","StackCube3d","Pop","popValue","PopDone","Push","pushValue","startPosY","pushSeq","popSeq","deleteType","newSpheres","newBst","fatherIndex","isLeft","newSphere","childrenIndexes","childIndex","oldSortIndex","newSperes","find","newNode","events","console","isNaN","goBack","PlusSquareOutlined","MinusSquareOutlined","routers","page","RouterView","component","Header","Content","Footer","App","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2810fd49.chunk.js","sourcesContent":["import React from \"react\";\n\n\n/** 520 ~ 120\n \n\n\n */\n\n/** 遍历细节数组，分发任务的间隔时间 */\n// export const DISPATCH_INTERVAL = 320;\n\nexport interface IBaseProps {\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nexport interface IBaseState {\n    loading: boolean;\n    disappearAll: boolean;\n    opeDetails: { type: OpeDetailTypes, payload?: any }[]\n}\n\n/** 主页的item类型 */\nexport enum DataStrucTypes {\n    Sort,\n    LinkedList,\n    Queue,\n    Stack,\n    HashTable,\n    BinarySearchTree,\n    BinaryHeap,\n    AVLTree,\n    BTree,\n    BPlusTree,\n    RedBlackTree,\n    Graph\n}\n\n/** 每个立方体页面的配置 */\nexport interface IPageConfig {\n    /** 设置几何体之间的水平距离 */\n    geoBaseDistance: number;\n    /** 设置几何体出现的数量范围 */\n    geoNumRange: Range;\n    /** 设置几何体取值范围 */\n    geoValueRange: Range;\n    /** 设置动画的播放速度 */\n    animationSpeed: number;\n    /** 设置页面几何体的基础y坐标 */\n    geoBasePosY: number;\n    /** 设置摄像机的z坐标 */\n    cameraPosZ?: number;\n    /** 设置几何体的颜色 */\n    colorConfig?: IColorConfig;\n}\n\nexport interface ISpherePageConfig extends IPageConfig {\n    /** 设置树的最大层数 */\n    maxDeepth: number;\n}\n\n/** 3d几何体通用配置 */\nexport interface IGeometryProps {\n    ref?: any;\n    /** 构造参数 */\n    args?: any;\n    /** 取值 */\n    value: number | null;\n    /** 是否消失 */\n    disappear?: boolean;\n    /** 颜色配置 */\n    colorConfig?: IColorConfig\n    /** 位置 */\n    position?: any;\n    /** 是否激活 */\n    isActive?: boolean;\n    /** 是否锁定 */\n    isLock?: boolean;\n}\n\n/** 控制台操作细节类型 */\nexport enum OpeDetailTypes {\n    Swap = '交换',\n    Add = '新增元素',\n    Delete = '删除元素',\n    HeadInsert = '头部插入',\n    TailInsert = '尾部插入',\n    Pop = '弹栈',\n    Push = '压栈',\n    Enqueue = '入队',\n    Dequeue = '出队',\n    PreOrderDetails = '前序遍历',\n    InOrderDetails = '中序遍历',\n    PostOrderDetails = '后序遍历',\n    Default = '数据源'\n}\n\n\nexport type IReducer<T> = (state: T, action: IAction) => T;\n\nexport interface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nexport type SeqType = IAction[][];\n\nexport enum ActionTypes {\n    Pop,\n    PopDone,\n    Push,\n    PushDone,\n    Active,\n    ActiveLeft,\n    ActiveRight,\n    Deactive,\n    Swap,\n    SwapDone,\n    Lock,\n    UnLock,\n    SortDone,\n    RandomDone,\n    Random,\n    Add,\n    AddDone,\n    Delete,\n    DeleteDone,\n    Search,\n    Move,\n    Enqueue,\n    Dequeue,\n    DequeueDone,\n    Disappear,\n    Appear,\n    HeadInsert,\n    TailInsert,\n    ShowArrow,\n    MoveDown,\n    MoveTop,\n    StartPreorder,\n    StartInOrder,\n    StartPostOrder,\n    Generate,\n    Loading,\n    CancelLoading,\n}\n\nexport interface IColorConfig {\n    /** 默认颜色 */\n    defaultColor?: string;\n    /** hover颜色 */\n    hoverColor?: string;\n    /** active颜色 */\n    activeColor?: string;\n    /** lock颜色 */\n    lockColor?: string;\n}\n\n\nexport type Points = [number, number, number][];\nexport type Range = [number, number];\n","import { useEffect, useRef, useState } from \"react\"\nimport { ActionTypes, IAction, Range, SeqType } from \"../types\";\n\n\nexport function excuteSeq(seq: SeqType, speed: number, dispatch: React.Dispatch<IAction>) {\n    return new Promise((resolve) => {\n        dispatch({ type: ActionTypes.Loading })\n        seq.forEach((event, i) => {\n            setTimeout(() => {\n                event.forEach((e) => { dispatch(e) })\n                if (i === seq.length - 1) {\n                    resolve('Seq has been excuted.')\n                    dispatch({ type: ActionTypes.CancelLoading })\n                }\n            }, i * speed)\n        })\n    })\n\n}\n\n\n/** 随机生成一个 start ~ end 的整数 */\nexport function randomNum(range: Range): number {\n    return +(Math.random() * (range[1] - range[0]) + range[0]).toFixed(0);\n}\n\n/** 随机生成指定长度且无重复的数组 */\nexport function randomArr(length: number, valueRange: Range): number[] {\n    const arr: number[] = [];\n    for (let i = 0; i < length; i++) {\n        let value = randomNum(valueRange);\n        while (arr.includes(value)) {\n            value = randomNum(valueRange);\n        }\n        arr.push(value);\n    }\n    return arr;\n}\n\n/** 判断某个元素是否 hover */\nexport function useHover() {\n    const [value, setValue] = useState(false);\n    const ref = useRef<any>();\n    const handleMouseOver = () => setValue(true);\n    const handleMouseOut = () => setValue(false);\n    useEffect(\n        () => {\n            const node = ref.current;\n            if (node) {\n                node.addEventListener(\"mouseover\", handleMouseOver);\n                node.addEventListener(\"mouseout\", handleMouseOut);\n                return () => {\n                    node.removeEventListener(\"mouseover\", handleMouseOver);\n                    node.removeEventListener(\"mouseout\", handleMouseOut);\n                };\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [ref.current] // Recall only if ref changes\n    );\n    return [ref, value];\n}","import { Tag as AntdTag } from 'antd'\nimport { IBaseProps } from '../../types';\nimport './tag.scss'\n\nexport type TagType = '数组' | 'avl树' | 'B+树' | 'B树' | '二叉搜索树' | '图论' | '哈希表' | '二叉堆' | '链表' | '队列' | '红黑树' | '栈' | '排序' | '冒泡' | '快排' | '插入' | '选择' | '归并' | '遍历' | '压栈' | '弹栈' | '入队' | '出队' | '搜索' | '二分'\n\n\ninterface ITagsProps extends IBaseProps {\n    /** 标签组类型 */\n    type: TagType\n    /** 颜色 */\n    color?: 'geekblue' | 'orange'\n}\n\nconst Tag: React.FC<ITagsProps> = (props) => {\n    const { type, color } = props;\n    return (\n        <AntdTag color={color}>\n            {type}\n        </AntdTag>\n    )\n}\n\nTag.defaultProps = {\n    color: 'geekblue'\n}\n\nexport default Tag;","import { useSpring, animated, config } from 'react-spring'\nimport { Card } from 'antd'\nimport { DataStrucTypes, IBaseProps } from '../../types'\nimport { useHover } from '../../utils'\nimport './homeItem.scss'\nimport Tag, { TagType } from '../Tag/tag'\n\nexport interface IHomeItemProps extends IBaseProps {\n    /** 数据结构类型 */\n    type: DataStrucTypes;\n    /** 卡片标题 */\n    title?: string;\n    /** 图片资源 */\n    src?: string;\n    /** 标签 */\n    tags?: TagType[];\n    /** 点击事件 */\n    onClick?: (type: DataStrucTypes) => void;\n}\n\nconst HomeItem: React.FC<IHomeItemProps> = (props) => {\n    const { title, src, tags, type, onClick } = props;\n    const [hoverRef, isHover] = useHover();\n\n    const { scale } = useSpring({\n        scale: (\n            isHover ? 1.05 : 1\n        ),\n        config: config.stiff\n    });\n\n    return (\n        <animated.div\n            ref={hoverRef as any}\n            className='homeItem'\n            style={{ scale }}\n        >\n            <Card\n                hoverable\n                cover={<img src={src} alt='pic' />}\n                onClick={() => { setTimeout(() => { onClick?.(type) }, 250) }}\n            >\n                <Card.Meta\n                    title={title}\n                    description={tags?.map((tagName: TagType, i) => (\n                        <Tag key={i} type={tagName} />\n                    ))}\n                />\n            </Card>\n        </animated.div>\n\n    )\n}\n\nexport default HomeItem;","export default __webpack_public_path__ + \"static/media/Sort.af83f2f6.jpg\";","export default __webpack_public_path__ + \"static/media/Stack.83affc03.jpg\";","export default __webpack_public_path__ + \"static/media/Queue.5d3f80d2.jpg\";","export default __webpack_public_path__ + \"static/media/BinarySearchTree.0ea5af15.jpg\";","export default __webpack_public_path__ + \"static/media/84993086_p0.33708829.jpg\";","import { IHomeItemProps } from \"../../components/HomeItem/homeItem\";\nimport { DataStrucTypes } from \"../../types\";\nimport SortPic from '../../assets/homeItemCovers/Sort.jpg';\nimport StackPic from '../../assets/homeItemCovers/Stack.jpg';\n// import LinkedListPic from '../../assets/homeItemCovers/LinkedList.jpg';\nimport QueuePic from '../../assets/homeItemCovers/Queue.jpg';\nimport BinarySearchTree from '../../assets/homeItemCovers/BinarySearchTree.jpg';\nimport Pic from '../../assets/homeItemCovers/84993086_p0.jpg'\n\n/** home 的 item 数据配置 */\nexport const homeItemsConfig: Omit<IHomeItemProps, 'onClick'>[][] = [\n    // 第一排\n    [\n        {\n            src: SortPic,\n            tags: ['数组', '冒泡', '选择', '插入', '快排', '归并'],\n            title: '排序',\n            type: DataStrucTypes.Sort\n        },\n        // {\n        //     src: LinkedListPic,\n        //     tag: <Tags type={DataStrucTypes.LinkedList} />,\n        //     title: '链表',\n        //     type: DataStrucTypes.LinkedList\n        // },\n        {\n            src: StackPic,\n            tags: ['栈', '压栈', '弹栈'],\n            title: '栈',\n            type: DataStrucTypes.Stack\n        },\n        {\n            src: QueuePic,\n            tags: ['队列', '入队', '出队'],\n            title: '队列',\n            type: DataStrucTypes.Queue\n        },\n        {\n            src: Pic,\n            tags: ['二叉堆'],\n            title: '二叉堆',\n            type: DataStrucTypes.BinaryHeap\n        },\n\n    ],\n    [\n        {\n            src: BinarySearchTree,\n            tags: ['二叉搜索树', '遍历'],\n            title: '二叉搜索树',\n            type: DataStrucTypes.BinarySearchTree\n        },\n        {\n            src: Pic,\n            tags: ['哈希表'],\n            title: '哈希表',\n            type: DataStrucTypes.HashTable\n        },\n        {\n            src: Pic,\n            tags: ['图论'],\n            title: '图结构',\n            type: DataStrucTypes.Graph\n        },\n    ]\n    // 第二排\n    // [\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.AVLTree} />,\n    //         title: 'AVL树',\n    //         type: DataStrucTypes.AVLTree\n    //     },\n    // ],\n    // // 第三排\n    // [\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.RedBlackTree} />,\n    //         title: '红黑树',\n    //         type: DataStrucTypes.RedBlackTree\n    //     },\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.BTree} />,\n    //         title: 'B树',\n    //         type: DataStrucTypes.BTree\n    //     },\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.BPlusTree} />,\n    //         title: 'B+树',\n    //         type: DataStrucTypes.BPlusTree\n    //     },\n    //     {\n    //         src: Pic,\n    //         tag: <Tags type={DataStrucTypes.Graph} />,\n    //         title: '图结构',\n    //         type: DataStrucTypes.Graph\n    //     },\n\n    // ],\n];","import { useState } from 'react'\nimport { Col, Row } from 'antd';\nimport { useHistory } from 'react-router';\nimport { useSpring, animated, config, useSpringRef, useTransition, useChain } from 'react-spring/web'\nimport HomeItem from '../../components/HomeItem/homeItem';\nimport { DataStrucTypes } from '../../types';\nimport { homeItemsConfig } from './config';\nimport { root } from '../../configs/router/config'\nimport './home.scss'\nimport { Link } from 'react-router-dom';\n\n\nconst Home = () => {\n    const history = useHistory();\n    const [open, setOpen] = useState(false)\n\n    // const springApi = useSpringRef()\n    // const { size, ...rest } = useSpring({\n    //     ref: springApi,\n    //     config: config.stiff,\n    //     from: { size: '20%', opacity: 0 },\n    //     to: {\n    //         size: open ? '20' : '100%',\n    //         opacity: open ? 0 : 1,\n    //     },\n    // })\n\n    // const transApi = useSpringRef()\n    // const transition = useTransition(open ? data : [], {\n    //     ref: transApi,\n    //     trail: 400 / 12,\n    //     from: { opacity: 0, scale: 0 },\n    //     enter: { opacity: 1, scale: 1 },\n    //     leave: { opacity: 0, scale: 0 },\n    // })\n\n    // // This will orchestrate the two animations above, comment the last arg and it creates a sequence\n    // useChain(open ? [transApi, springApi] : [springApi, transApi], [\n    //     0,\n    //     open ? 0.1 : 0.6,\n    // ])\n\n\n    const handleClick = (type: DataStrucTypes) => {\n        switch (type) {\n            case DataStrucTypes.Sort:\n                return history.push(root + '/sort');\n            case DataStrucTypes.LinkedList:\n                return history.push(root + '/linkedList')\n            case DataStrucTypes.Stack:\n                return history.push(root + '/stack')\n            case DataStrucTypes.Queue:\n                return history.push(root + '/queue')\n            case DataStrucTypes.HashTable:\n                return history.push(root + '/hashTable')\n            case DataStrucTypes.BinarySearchTree:\n                return history.push(root + '/binarySearchTree')\n            case DataStrucTypes.BinaryHeap:\n                return history.push(root + '/binaryHeap')\n            case DataStrucTypes.AVLTree:\n                return history.push(root + '/avlTree')\n            case DataStrucTypes.RedBlackTree:\n                return history.push(root + '/redBlackTree')\n            case DataStrucTypes.BTree:\n                return history.push(root + '/bTree')\n            case DataStrucTypes.BPlusTree:\n                return history.push(root + '/bPlusTree')\n            case DataStrucTypes.Graph:\n                return history.push(root + '/graph')\n        }\n    }\n    const { size, opacity } = useSpring({\n        from: {\n            size: '20%',\n            opacity: '0',\n        },\n        to: {\n            size: open ? '20%' : '100%',\n            opacity: open ? '0' : '1',\n        },\n        config: config.stiff\n    })\n    return (\n        <div className='home-warp'>\n            {homeItemsConfig.map((row, i) => (\n                <Row gutter={{ xs: 8, sm: 16, md: 24 }} key={i + '&'}>\n                    {row.map((col, j) => (\n                        <Col xs={12} sm={12} md={6} lg={6} xl={6} key={i + '&' + j}>\n                            {/* <Link to={root + '/sort/023012423'}> */}\n                            <animated.div\n                                className='homeItem-warp'\n                                style={{ width: size, height: size, opacity }}\n                                onClick={() => setOpen(true)}\n                            >\n\n                                <HomeItem\n                                    src={col.src}\n                                    tags={col.tags}\n                                    title={col.title}\n                                    type={col.type}\n                                    onClick={handleClick}\n                                />\n                            </animated.div>\n                            {/* </Link> */}\n                        </Col>\n                    ))}\n                </Row>\n            ))\n            }\n        </div >\n    )\n}\n\nexport default Home;","import { Fragment, useEffect, useRef, useState } from \"react\";\nimport { Menu, InputNumber, Button, Drawer, Slider, Radio, Divider, Spin, Input } from \"antd\";\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { MenuUnfoldOutlined } from \"@ant-design/icons\";\nimport { useHover } from \"../../utils\";\nimport { IBaseProps, Range } from \"../../types\";\nimport { animated, config, useSpring } from \"react-spring/web\";\nimport './console.scss'\n\nconst { Item, SubMenu } = Menu;\n\ninterface IConsoleProps extends IBaseProps {\n    /** 控制台左边的操作界面 */\n    operation?: React.ReactNode;\n    /** 控制台右边的显示器 */\n    displayer?: React.ReactNode;\n    /** drawer的高度 */\n    drawerHeight?: number;\n    /** 是否有silider */\n    showSilider?: boolean;\n    /** 是否可以添加、删除元素 */\n    isUpdate?: boolean;\n    /** 是否可以搜索元素 */\n    isSearch?: boolean;\n    /** 添加元素时是否显示序号输入框 */\n    isAddIndex?: boolean;\n    /** 删除元素时是否显示序号输入框 */\n    isDeleteIndex?: boolean;\n    /** 设置value范围 */\n    valueRange?: Range;\n    /** 设置index范围 */\n    indexRange?: Range;\n    /** 设置value默认值 */\n    defaultValue?: number;\n    /** 设置index默认值 */\n    defaultIndex?: number;\n    /** 设置searchValue默认值 */\n    defaultSearchValue?: number;\n    /** 添加按钮的文字 */\n    addText?: string;\n    /** 删除按钮的文字 */\n    deleteText?: string;\n    /** 操作是否正在执行 */\n    spinning?: boolean;\n    /** slider变化时的回调 */\n    onSliderChange?: (value: number) => void;\n    /** value改变时的回调 */\n    onValueChange?: (value: number) => void;\n    /** index改变时的回调 */\n    onIndexChange?: (index: number) => void;\n    /** searchValue改变时的回调 */\n    onSearchValueChange?: (value: number) => void;\n    /** 点击添加时的回调 */\n    onAdd?: (value: number, index: number) => void;\n    /** 点击删除时的回调 */\n    onDelete?: (index: number) => void;\n    /** 点击搜索时的回调 */\n    onSearch?: (value: number) => void;\n    /** 渲染器输入框变化时的回调 */\n    onRenderChange?: (value: string) => void;\n    /** 点击渲染按钮时的回调 */\n    onRender?: (value: string) => void;\n}\n\nconst Console: React.FC<IConsoleProps> = (props) => {\n\n    const {\n        children,\n        style,\n        operation,\n        displayer,\n        drawerHeight,\n        showSilider,\n        addText,\n        defaultIndex,\n        defaultSearchValue,\n        valueRange,\n        indexRange,\n        defaultValue,\n        deleteText,\n        isUpdate,\n        isAddIndex,\n        isDeleteIndex,\n        isSearch,\n        spinning,\n        onSliderChange,\n        onAdd,\n        onDelete,\n        onSearch,\n        onIndexChange,\n        onValueChange,\n        onSearchValueChange,\n        onRenderChange,\n        onRender\n    } = props;\n\n    const [hoverLeftRef, isLeftHover] = useHover();\n    const [hoverRenderRef, isRenderHover] = useHover();\n\n    const [isUnfold, setIsUnfold] = useState(false);\n    /** 控制台的添加删除元素的value和index */\n    const [value, setValue] = useState(defaultValue || 8);\n    const [index, setIndex] = useState(defaultIndex || 0);\n    const [searchValue, setSearchValue] = useState(defaultSearchValue || 32);\n    const [renderValue, setRenderValue] = useState('');\n\n    // 被激活的 radio\n    const [radioActived, setRadioActived] = useState(1);\n\n    const displayConRef = useRef<HTMLDivElement>();\n    const { leftOpacity, renderOpacity } = useSpring({\n        leftOpacity: isLeftHover ? 0.7 : 0.2,\n        renderOpacity: isRenderHover ? 0.7 : 0.2,\n        config: config.gentle\n    })\n\n    /** 当 displayer 里面的内容变多的时候，始终保持其滚动条位于底部 */\n    useEffect(() => {\n        if (displayConRef.current) displayConRef.current.scrollTop = displayConRef.current.scrollHeight;\n    }, [displayConRef.current?.scrollHeight])\n\n    return (\n        <>\n            <animated.div\n                className='console-left'\n                ref={hoverLeftRef as any}\n                style={{ ...style, opacity: leftOpacity }}\n            >\n                {/* 右侧栏 */}\n                <Menu\n                    className='console'\n                    mode=\"inline\"\n                    theme=\"dark\"\n                    inlineCollapsed={true}\n                    selectable={false}\n                    style={{ display: isUnfold ? 'none' : 'inline-block' }}\n                >\n                    <Item\n                        icon={<MenuUnfoldOutlined />}\n                        key='item0'\n                        onClick={() => {\n                            setIsUnfold(true);\n                        }}\n                    >\n                        展开操作台\n                </Item>\n                    {children}\n                </Menu>\n                {/*  */}\n\n                {/* 抽屉 */}\n                <Drawer\n                    className='console-drawer'\n                    title='操作台'\n                    height={drawerHeight}\n                    visible={isUnfold}\n                    placement='bottom'\n                    mask={false}\n                    onClose={() => { setIsUnfold(false) }}\n                >\n\n                    <div className='operation'>\n                        {showSilider &&\n                            <div className='slider-warp'>\n                                动画速度：\n                            <Slider\n                                    className='slider'\n                                    defaultValue={32}\n                                    onChange={(value: number) => onSliderChange?.(value)}\n                                />\n                            </div>\n                        }\n\n\n                        <Spin\n                            tip='操作执行中...'\n                            spinning={spinning}\n                            indicator={<LoadingOutlined style={{ fontSize: 40 }} spin />}\n                        >\n                            <div className='operation-main'>\n                                {/* 显示操作按钮 */}\n                                {operation}\n\n                                {/* 显示添加、删除 */}\n                                {\n                                    isUpdate &&\n                                    <div className='input-group'>\n                                        <Radio.Group\n                                            className='radio-group'\n                                            defaultValue={1}\n                                            onChange={(e) => setRadioActived(e.target.value)}\n                                        >\n                                            <Radio value={1}>{addText}</Radio>\n                                            <Radio value={2}>{deleteText}</Radio>\n                                            {isSearch && <Radio value={3}>查找</Radio>}\n                                        </Radio.Group>\n\n                                        <div className='label-group'>\n                                            {\n                                                radioActived === 1 ?\n                                                    (\n                                                        <>\n                                                            {\n                                                                isAddIndex &&\n                                                                // 序号input\n                                                                (<label>\n                                                                    <span className='label-name'>序号:</span>\n                                                                    <InputNumber\n                                                                        // min={(indexRange as unknown as number[])?.[0]}\n                                                                        // max={(indexRange as unknown as number[])?.[0]}\n                                                                        defaultValue={defaultIndex}\n                                                                        onChange={(index) => {\n                                                                            setIndex(index as number)\n                                                                            onIndexChange?.(index)\n                                                                        }}\n                                                                    />\n                                                                </label>)\n                                                            }\n                                                            {/* 数值input */}\n                                                            <label>\n                                                                <span className='label-name'>数值:</span>\n                                                                <InputNumber\n                                                                    // min={(valueRange as unknown as number[])?.[0]}\n                                                                    // max={(valueRange as unknown as number[])?.[1]}\n                                                                    defaultValue={defaultValue}\n                                                                    onChange={(value) => {\n                                                                        setValue(value as number)\n                                                                        onValueChange?.(value)\n                                                                    }}\n                                                                />\n                                                            </label>\n                                                        </>\n                                                    ) : radioActived === 2 ?\n                                                        (\n                                                            isDeleteIndex &&\n                                                            // 序号input\n                                                            (<label>\n                                                                <span className='label-name'>序号:</span>\n                                                                <InputNumber\n                                                                    // min={(indexRange as unknown as number[])?.[0]}\n                                                                    // max={(indexRange as unknown as number[])?.[0]}\n                                                                    defaultValue={defaultIndex}\n                                                                    onChange={(index) => {\n                                                                        setIndex(index as number)\n                                                                        onIndexChange?.(index)\n                                                                    }}\n                                                                />\n                                                            </label>)\n                                                        ) : isSearch &&\n                                                        (\n                                                            // 搜索input\n                                                            (<label>\n                                                                <span className='label-name'>数值:</span>\n                                                                <InputNumber\n                                                                    // min={(valueRange as unknown as number[])?.[0]}\n                                                                    // max={(valueRange as unknown as number[])?.[0]}\n                                                                    defaultValue={defaultSearchValue}\n                                                                    onChange={(value) => {\n                                                                        setSearchValue(value as number)\n                                                                        onSearchValueChange?.(value)\n                                                                    }}\n                                                                />\n                                                            </label>)\n                                                        )\n                                            }\n\n                                            {radioActived === 1 && <Button type='primary' onClick={() => onAdd?.(value, index)}>{addText}</Button>}\n                                            {radioActived === 2 && <Button type='primary' onClick={() => onDelete?.(index)}>{deleteText}</Button>}\n                                            {radioActived === 3 && <Button type='primary' onClick={() => onSearch?.(searchValue)}>查找</Button>}\n\n                                        </div>\n                                    </div>\n                                }\n                            </div>\n                        </Spin>\n\n                    </div>\n\n                    <Divider\n                        className='divider'\n                        type='vertical'\n                    />\n\n                    <div className='displayer'>\n                        <div className='content' ref={displayConRef as any}>\n                            {displayer}\n                        </div>\n                    </div>\n                </Drawer>\n            </animated.div>\n            <animated.div\n                className='console-render'\n                ref={hoverRenderRef as any}\n                style={{ ...style ,opacity: renderOpacity }}\n            >\n                <Input\n                    bordered={false}\n                    onChange={(e) => {\n                        setRenderValue(e.target.value.trim());\n                        onRenderChange?.(e.target.value.trim());\n                    }}\n                />\n                <Button type='primary' onClick={() => { onRender?.(renderValue) }}>渲染</Button>\n            </animated.div>\n        </>\n    )\n}\n\nConsole.defaultProps = {\n    showSilider: true,\n    addText: '添加',\n    deleteText: '删除',\n    defaultIndex: 2,\n    defaultValue: 3,\n    defaultSearchValue: 27,\n    valueRange: [3, 90] as Range,\n    indexRange: [0, 10] as Range,\n    isUpdate: true,\n    isSearch: false,\n    isAddIndex: true,\n    isDeleteIndex: true,\n    spinning: false\n}\n\nexport { Item, SubMenu };\nexport default Console;\n\n\n\n\n","import { IColorConfig } from \"../../types\";\n\n/**\n * 该文件用于配置某些组件的默认 props\n */\n\nexport const defaultGeoColor: IColorConfig = {\n    defaultColor: 'wheat',\n    activeColor: 'orange',\n    hoverColor: 'skyblue',\n    lockColor: '#8076a3'\n}\n","import { useEffect, useRef, useState, forwardRef } from \"react\";\nimport { RoundedBox, Text } from \"@react-three/drei\";\nimport { animated, config, useSpring } from \"react-spring/three\";\nimport { IGeometryProps } from \"../../types\";\nimport { defaultGeoColor } from \"../../configs/page/defaultConfig\";\n\nexport interface ICube3dProps extends IGeometryProps { }\n\nconst Cube3d: React.FC<ICube3dProps> = forwardRef<any, ICube3dProps>((props, ref) => {\n    const {\n        args,\n        position,\n        isActive,\n        isLock,\n        value,\n        colorConfig,\n        disappear\n    } = props;\n\n    const [isHover, setIsHover] = useState(false)\n    const [isClick, setIsClick] = useState(false)\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    /** 配置扩缩动画效果 */\n    const { scale } = useSpring({\n        reverse: disappear,\n        from: { scale: 0 },\n        to: { scale: isClick ? 1.10 : 1 },\n        config: disappear ? config.default : config.wobbly\n    })\n\n    /** 配置颜色过渡效果 */\n    const { color } = useSpring({\n        color: (\n            isClick ? colorConfig?.activeColor :\n                isHover ? colorConfig?.hoverColor :\n                    isLock ? colorConfig?.lockColor : colorConfig?.defaultColor\n        )\n    })\n\n    /** 扫描数组的时候，如果改变了 active 属性，则给它设置一个点击效果 */\n    useEffect(() => {\n        isActive ? setIsClick(true) : setIsClick(false);\n    }, [isActive])\n\n\n    return (\n        <animated.mesh\n            scale={scale}\n            position={position}\n            ref={ref}\n        >\n            <Text\n                fontSize={0.5}\n                color='black'\n            >\n                {value}\n            </Text>\n            <RoundedBox\n                args={args}\n                ref={meshRef}\n                onClick={() => setIsClick(!isClick)}\n                onPointerOver={() => setIsHover(true)}\n                onPointerOut={() => setIsHover(false)}\n            >\n                <animated.meshPhongMaterial\n                    color={color}\n                    opacity={0.5}\n                    transparent={true}\n                />\n            </RoundedBox>\n        </animated.mesh>\n    )\n})\n\nCube3d.defaultProps = {\n    colorConfig: defaultGeoColor\n}\n\nexport default Cube3d;","import { IPageConfig } from \"../../types\";\n\nlet config: IPageConfig = {\n    geoBaseDistance: 2,\n    geoNumRange: [3, 7],\n    geoValueRange: [3, 37],\n    geoBasePosY: 0,\n    cameraPosZ: 19,\n    animationSpeed: 400,\n}\n\n\nexport default config;","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useFrame } from '@react-three/fiber'\nimport Cube3d, { ICube3dProps } from '../../../components/Cube3d/cube3d';\nimport config from '../config'\n\ninterface ISortCube3dProps extends ICube3dProps {\n    sortIndexes: number[];\n    sortIndex: number;\n    startPosX: any;\n}\n\nconst SortCube3d: React.FC<ISortCube3dProps> = (props) => {\n\n    const {\n        sortIndexes,\n        sortIndex,\n        startPosX,\n        value,\n        ...restProps\n    } = props;\n\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    /** 根据传入的排序下标，获取到 cube 所在的 X 坐标 */\n    const getPosX = (sortIndex: number) => startPosX + (sortIndex * config.geoBaseDistance);\n\n    /** 移动元素时，获取其起始位置 */\n    const getOrginPosX = () => {\n        return getPosX(sortIndex);\n    }\n\n    /** 移动元素时，获取其目标位置 */\n    const getTargetPosX = () => {\n        return getPosX(sortIndexes[sortIndexes.length - 1]);\n    }\n\n    const oldPosX = getOrginPosX();\n    const targetPosX = getTargetPosX();\n\n\n    useFrame(() => {\n\n        const delta = Math.abs(oldPosX - targetPosX) / (config.animationSpeed / 20);\n\n        // 如果当前 sortIndex 需要改变\n        if (delta) {\n\n            // mesh 需要往右移\n            if (oldPosX - targetPosX < 0 && meshRef.current.position.x < targetPosX) {\n                meshRef.current.translateX(delta);\n                if (meshRef.current.position.x >= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n\n            // mesh 需要往左移\n            else if (oldPosX - targetPosX > 0 && meshRef.current.position.x > targetPosX) {\n                meshRef.current.translateX(-delta);\n                if (meshRef.current.position.x <= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n        }\n    })\n\n    return (\n        <Cube3d\n            args={[1, value ? value * 0.2 : 0, 1]}\n            value={value}\n            ref={meshRef}\n            {...restProps}\n        />\n    )\n}\n\nSortCube3d.defaultProps = {\n    colorConfig: {\n        defaultColor: 'wheat',\n        activeColor: 'orange',\n        hoverColor: 'skyblue',\n        lockColor: '#8076a3'\n    }\n}\n\nexport default React.memo(SortCube3d);","import * as THREE from 'three'\nimport { Spin } from 'antd';\nimport { Canvas } from '@react-three/fiber';\nimport { Suspense, useEffect, useRef } from 'react';\nimport { Environment, Html, OrbitControls, PerspectiveCamera, useProgress } from \"@react-three/drei\";\nimport './scene3d.scss'\n\nfunction SceneLoader(props: any) {\n    const { progress } = useProgress();\n    const { onLoaded } = props;\n    useEffect(() => {\n        if (progress === 100) {\n            onLoaded?.();\n        }\n    }, [progress])\n\n    return (\n        <Html center style={{ marginTop: '200px' }}>\n            <Spin size='large' />\n        </Html>\n    );\n}\n\ninterface IScene3dProps {\n    /** 场景加载完毕后的回调 */\n    onLoaded?: () => void;\n    /** 设置相机的z坐标 */\n    cameraPosZ?: number;\n}\n\nconst Scene3d: React.FC<IScene3dProps> = (props) => {\n    const {\n        children,\n        cameraPosZ,\n        onLoaded\n    } = props;\n\n    const cameraRef = useRef<THREE.PerspectiveCamera>(null!);\n\n    // useEffect(() => {\n    //     cameraRef.current?.lookAt(new THREE.Vector3(10, 10, 1))\n    // })\n\n\n    // const [cameraPos, setCameraPos] = useState<THREE.Vector3>(new THREE.Vector3(0, 0, 5));\n\n    // const upDate = () => {\n    //     // console.log(123);\n    //     // return new THREE.Camera()\n    // }\n\n\n    // const handleKeyDown = (ev: KeyboardEvent) => {\n    //     // const delta = new THREE.Clock(true).getDelta();\n    //     const moveDistance = 1;\n    //     switch (ev.key) {\n    //         case 'w':\n    //             // setCameraPos((pre) => (new THREE.Vector3(pre.x, pre.y, pre.z - moveDistance)));\n    //             break;\n    //         case 'a':\n    //             setCameraPos((pre) => (new THREE.Vector3(pre.x - moveDistance, pre.y, pre.z)));\n    //             break;\n    //         case 'd':\n    //             setCameraPos((pre) => (new THREE.Vector3(pre.x + moveDistance, pre.y, pre.z)));\n    //             break;\n    //         case 's':\n    //             setCameraPos((pre) => (new THREE.Vector3(pre.x, pre.y, pre.z + moveDistance)));\n\n    //             break;\n    //     }\n    // }\n\n    // useEffect(() => {\n    //     document.addEventListener('keydown', handleKeyDown);\n    //     return () => {\n    //         document.removeEventListener('keydown', handleKeyDown);\n    //     }\n    // }, [])\n\n\n\n    // useEffect(() => {\n    //     if (cameraRef.current) {\n    //         cameraRef.current.lookAt(new THREE.Vector3(0, -10, 16))\n    //     }\n    //     // console.log(cameraRef.current);\n    //     // cameraRef.current?.lookAt(new THREE.Vector3(0, -10, 16))\n    // })\n\n\n    return (\n        <div className='scene3d-warp'>\n            <Canvas>\n                <PerspectiveCamera\n                    ref={cameraRef}\n                    makeDefault\n                    position={[0, 0, cameraPosZ as number]}\n                />\n                <ambientLight intensity={0.3} />\n                <directionalLight color=\"white\" position={[1, 1, 1]} />\n\n                <Suspense fallback={<SceneLoader onLoaded={onLoaded} />}>\n                    {/** <Reflector\n                    resolution={1024}\n                    args={[10, 10]}\n                    mirror={0.75}\n                    // mixBlur={mixBlur || 0}\n                    mixStrength={1}\n                    rotation={[-Math.PI / 2, 0, Math.PI / 2]}\n                    minDepthThreshold={0.8}\n                    maxDepthThreshold={1.2}\n                    // depthScale={depthScale || 0}\n                    depthToBlurRatioBias={0.2}\n                    debug={0}\n                    // distortion={distortion || 0}\n                    // distortionMap={distortionMap}\n                >\n                    \n                    {(Material, props) => (\n                        <Material\n                            color=\"#ddd\"\n                            metalness={0}\n                            // roughnessMap={roughness}\n                            roughness={1}\n                            // normalMap={normal}\n                            // normalScale={_normalScale}\n                            {...props}\n                        />\n                    )}\n                </Reflector> */}\n                    {/** <TransformControls> */}\n                    {children}\n                    {/** </TransformControls> */}\n\n\n                    <OrbitControls\n                        maxDistance={30}\n                    />\n                    <Environment\n                        // preset='night'  \n\n                        background\n                        files={['ev.jpg', 'ev.jpg', 'ev.jpg', 'ev.jpg', 'ev.jpg', 'ev.jpg']}\n                        path='./'\n                    />\n                </Suspense>\n            </Canvas>\n        </div>\n\n    )\n}\n\nScene3d.defaultProps = {\n    cameraPosZ: 16\n}\n\nexport default Scene3d;","export const judgeSorted = (arr: number[]) => {\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] > arr[i + 1]) return false\n    }\n    return true\n}","import { ISortCube } from \"./store\";\nimport { ActionTypes, SeqType } from \"../../types\";\nimport config from './config'\nimport { judgeSorted } from \"../../utils/array\";\n\n/** 初始化 cubes */\nexport function initCubes(values: number[]): ISortCube[] {\n    return values.map((value, index) => ({\n        value,\n        isActive: false,\n        isLock: false,\n        disappear: false,\n        sortIndexes: [index],\n        sortIndex: index\n    }));\n}\n\n/** 根据数组长度，计算出第一个 cube 的 position 的 x 坐标 */\nexport function getStartPosX(arrLen: number): number {\n    return -(arrLen - 1) * config.geoBaseDistance / 2;\n}\n\n/** input输入的value解析为数组，如果输入的不合法则返回 undefined */\nexport function parseValue(value: string) {\n    // 去掉前后括，然后按照逗号划分，再转换成数字数组\n    let parseRes = value.substring(1, value.length - 1).split(/[,，]/g).map(item => +item);\n    // console.log(parseRes);\n\n    // 1. 格式不正确：不是类似 [x,xx,x] 这样的格式\n    // 2. 元素取值不能是小数 [1.2,3.2,3]\n    // 3. 元素不能为空 []\n\n    if (/\\[\\s*\\]/g.test(value)) return '数据不能为空'\n    return parseRes;\n}\n\n/** 返回初始化数组的细节 */\nexport function initSeq(values: number[]): SeqType {\n    const seq = [];\n    seq.push([{ type: ActionTypes.Disappear }])\n    seq.push([\n        { type: ActionTypes.Generate, payload: values },\n        { type: ActionTypes.Appear }])\n    return seq;\n}\n\n/** 返回向数组插值时，数组位移的细节 */\nexport function addEleSeq(arr: number[], newEle: number, targetIndex: number): SeqType {\n    // 记录动画细节\n    const seq = [];\n\n    // 记录待位移的元素下标\n    const oldIndexes: number[] = [];\n    arr.forEach((_, i) => { i >= targetIndex && oldIndexes.push(i) });\n\n    // 记录位移元素的目标下标\n    const targetIndexes: number[] = [];\n    oldIndexes.forEach((value) => { targetIndexes.push(value + 1) });\n\n    // 先激活需要位移的元素\n    seq.push([{ type: ActionTypes.Active, payload: oldIndexes }]);\n\n    // 开始位移，并扩容出现新的下标\n    seq.push([{\n        type: ActionTypes.Move,\n        payload: {\n            oldIndexes,\n            targetIndexes\n        }\n    }]);\n\n    // 取消激活\n    seq.push([{ type: ActionTypes.Deactive, payload: targetIndexes }])\n\n    // 在 targetIndex 处添加元素\n    seq.push([{\n        type: ActionTypes.AddDone,\n        payload: {\n            newEle,\n            targetIndex\n        }\n    }]);\n\n    return seq;\n}\n\n/** 返回向数组删除元素时，数组位移的细节 */\nexport function deleteEleSeq(arr: number[], targetIndex: number): SeqType {\n\n    // 记录动画细节\n    const seq = [];\n\n    // 记录待位移的元素下标\n    const oldIndexes: number[] = [];\n    arr.forEach((_, i) => { i >= targetIndex && oldIndexes.push(i) });\n\n    // 记录位移元素的目标下标\n    const targetIndexes: number[] = [];\n    oldIndexes.forEach((value) => { targetIndexes.push(value - 1) });\n\n    // 先删除 targetIndex 位置的元素\n    seq.push([{ type: ActionTypes.Delete, payload: targetIndex }]);\n\n    // 激活需要位移的元素\n    seq.push([{ type: ActionTypes.Active, payload: oldIndexes }]);\n\n    // 开始位移，同时缩容\n    seq.push([{\n        type: ActionTypes.Move,\n        payload: {\n            oldIndexes,\n            targetIndexes\n        }\n    }]);\n\n    // 取消激活\n    seq.push([{ type: ActionTypes.Deactive, payload: targetIndexes }])\n\n    // 删除完毕，修改内部的 sortIndex\n    seq.push([{ type: ActionTypes.DeleteDone, payload: targetIndex }])\n\n    return seq;\n}\n\n/** 返回冒泡排序细节 */\nexport function bubbleSortSeq(arr: number[]): SeqType {\n    if (judgeSorted(arr)) return [[{ type: ActionTypes.Lock }]];\n    let backup = [...arr];\n    let sortSeq = [];\n    for (let i = backup.length - 1; i >= 0; i--) {\n        for (let j = 0; j < i; j++) {\n            sortSeq.push([{ type: ActionTypes.Active, payload: [j, j + 1] }]);\n            if (backup[j] > backup[j + 1]) {\n                let temp = backup[j];\n                backup[j] = backup[j + 1];\n                backup[j + 1] = temp;\n                sortSeq.push([{ type: ActionTypes.Swap, payload: [j, j + 1] }]);\n                sortSeq.push([{ type: ActionTypes.SwapDone, payload: [j, j + 1] }]);\n            }\n            sortSeq.push([{ type: ActionTypes.Deactive, payload: [j, j + 1] }])\n        }\n        sortSeq.push([{ type: ActionTypes.Lock, payload: [i] }]);\n    }\n    sortSeq.push([{ type: ActionTypes.SortDone }])\n    return sortSeq;\n}\n\n/** 返回选择排序细节 */\nexport function selectSortSeq(arr: number[]): SeqType {\n    if (judgeSorted(arr)) return [[{ type: ActionTypes.Lock }]];\n    \n    let backup = [...arr];\n    let sortSeq = [];\n    for (let i = backup.length - 1; i >= 0; i--) {\n        let max = -Infinity;\n        let indexOfMax = -1;\n        for (let j = 0; j <= i; j++) {\n            sortSeq.push([{ type: ActionTypes.Active, payload: [j] }]);\n            if (backup[j] > max) {\n                sortSeq.push([{ type: ActionTypes.UnLock, payload: [indexOfMax] }])\n                max = backup[j];\n                indexOfMax = j;\n                sortSeq.push([{ type: ActionTypes.Lock, payload: [j] }])\n            }\n            sortSeq.push([{ type: ActionTypes.Deactive, payload: [j] }]);\n        }\n        sortSeq.push([{ type: ActionTypes.Lock, payload: [indexOfMax] }])\n        let temp = backup[i];\n        backup[i] = max;\n        backup[indexOfMax] = temp;\n        sortSeq.push([{ type: ActionTypes.Swap, payload: [indexOfMax, i] }])\n        sortSeq.push([{ type: ActionTypes.SwapDone, payload: [indexOfMax, i] }]);\n    }\n    sortSeq.push([{ type: ActionTypes.SortDone }]);\n    return sortSeq\n}\n\n/** 返回快速排序细节 */\nexport function quickSortSeq(arr: number[], l: number, r: number, sortSeq: SeqType) {\n    if (judgeSorted(arr)) return sortSeq.push([{ type: ActionTypes.Lock }]);\n    if (l >= r) return;\n\n    let i = l - 1, j = r + 1, x = arr[l + r >> 1];\n    while (i < j) {\n        do {\n            i++;\n            sortSeq.push([{ type: ActionTypes.Active, payload: [i] }]);\n            sortSeq.push([{ type: ActionTypes.Deactive, payload: [i] }]);\n        } while (arr[i] < x);\n        // sortSeq.push({ type: ActionTypes.Lock, payload: [i] });\n\n        do {\n            j--;\n            sortSeq.push([{ type: ActionTypes.Active, payload: [j] }]);\n            sortSeq.push([{ type: ActionTypes.Deactive, payload: [j] }]);\n        } while (arr[j] > x);\n        // sortSeq.push({ type: ActionTypes.Lock, payload: [j] });\n\n        if (i < j) {\n            sortSeq.push([{ type: ActionTypes.Swap, payload: [i, j] }])\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            sortSeq.push([{ type: ActionTypes.SwapDone, payload: [i, j] }]);\n        }\n    }\n    quickSortSeq(arr, l, j, sortSeq);\n    quickSortSeq(arr, j + 1, r, sortSeq);\n}\n\n\n\n","import { ActionTypes, IGeometryProps, IReducer, OpeDetailTypes } from \"../../types\";\nimport { randomArr, randomNum } from \"../../utils\";\nimport { getStartPosX, initCubes } from \"./utils\";\nimport config from './config'\n\nexport interface ISortCube extends IGeometryProps {\n    // 记录 cube 将要经历或者已经历过的下标\n    sortIndexes: number[];\n    // 记录 cube 当前页面中正处于的下标\n    sortIndex: number;\n}\n\nexport interface IState {\n    // 用来表示数组中各值的实时位置\n    values: number[];\n    // 用来表示每个 cube 的属性，其元素位置无意义，其中 sortIndex 才是对应的 values 的下标\n    cubes: ISortCube[];\n    // 操作执行中\n    loading: boolean;\n    // 全部消失\n    disappearAll: boolean;\n    // 第一个cube的起始x坐标\n    startPosX: number;\n    // 记录当前操作的细节\n    opeDetails: { type: OpeDetailTypes, payload?: any }[]\n}\n\nexport const initState: IState = {\n    values: randomArr(randomNum(config.geoNumRange), config.geoValueRange),\n    cubes: [],\n    loading: false,\n    disappearAll: false,\n    startPosX: 0,\n    opeDetails: []\n}\n\nexport const reducer: IReducer<IState> = (state = initState, action) => {\n\n    const { type, payload } = action;\n\n    switch (type) {\n\n        case ActionTypes.Loading:\n            return {\n                ...state,\n                loading: true\n            }\n        \n        case ActionTypes.CancelLoading:\n            return {\n                ...state,\n                loading: false\n            }\n\n        case ActionTypes.Generate: {\n            return {\n                ...state,\n                values: payload,\n                cubes: initCubes(payload),\n                startPosX: getStartPosX(payload.length),\n                opeDetails: [{ type: OpeDetailTypes.Default, payload }]\n            }\n        }\n\n        case ActionTypes.Appear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, disappear: false })),\n                    disappearAll: false,\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Disappear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, disappear: true })),\n                    disappearAll: true\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Active:\n            return {\n                ...state,\n                cubes: state.cubes.map(\n                    (item) => (payload?.includes(item.sortIndexes[item.sortIndexes.length - 1]) ? { ...item, isActive: true } : { ...item })\n                ),\n                sortDone: false\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n                cubes: state.cubes.map(\n                    (item) => payload?.includes(item.sortIndexes[item.sortIndexes.length - 1]) ? { ...item, isActive: false } : { ...item }\n                )\n            }\n\n        case ActionTypes.Lock: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, isLock: true }))\n                }\n            } else {\n                return {\n                    ...state,\n                    cubes: state.cubes.map(\n                        (item) => payload?.includes(item.sortIndexes[item.sortIndexes.length - 1]) ? { ...item, isLock: true } : { ...item }\n                    )\n                }\n            }\n        }\n\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n                cubes: state.cubes.map(\n                    (item) => payload?.includes(item.sortIndexes[item.sortIndexes.length - 1]) ? { ...item, isLock: false } : { ...item }\n                )\n            }\n\n        case ActionTypes.Swap: {\n\n            // 取出需要交换的两个下标\n            // 取出需要交换的两个下标\n            let index1 = (payload as number[])[0];\n            let index2 = (payload as number[])[1];\n\n            // 向 cube 对应的 sortIndexes 中 push 新的下标\n            const newCubes: ISortCube[] = state.cubes.map((item) => {\n                const curSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                if (curSortIndex === index1) {\n                    const newSortIndexes = [...item.sortIndexes, index2]\n                    return { ...item, sortIndexes: newSortIndexes }\n                } else if (curSortIndex === index2) {\n                    const newSortIndexes = [...item.sortIndexes, index1]\n                    return { ...item, sortIndexes: newSortIndexes }\n                }\n                return { ...item };\n            })\n\n            // 交换 values 的值\n            let newValues = [...state.values];\n            let temp = newValues[index1];\n            newValues[index1] = newValues[index2];\n            newValues[index2] = temp;\n\n            const newOpeDetail = {\n                type: OpeDetailTypes.Swap,\n                payload: {\n                    indexes: [index1, index2],\n                    curValues: [...newValues]\n                }\n            }\n\n            return {\n                ...state,\n                cubes: newCubes,\n                opeDetails: [...state.opeDetails, newOpeDetail],\n                values: newValues\n            }\n        }\n\n        case ActionTypes.SwapDone: {\n\n            // 交换完毕后，将对应的cube的sortIndex改为最新的sortIndex\n            const newCubes: ISortCube[] = state.cubes.map((item) => {\n                const newSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                if (item.sortIndex !== newSortIndex) return { ...item, sortIndex: newSortIndex }\n                return { ...item }\n            })\n\n            return {\n                ...state,\n                cubes: newCubes,\n            }\n        }\n\n        case ActionTypes.SortDone:\n            return {\n                ...state,\n                sortDone: true\n            }\n\n        case ActionTypes.Move: {\n            const { oldIndexes, targetIndexes }: { oldIndexes: number[], targetIndexes: number[] } = payload;\n            // 把包含在 oldIndexes 中的 sortIndex 找出来\n            const newCubes = state.cubes.map((item) => {\n                // 看 sortIndex 在 oldIndexes 中处于哪个位置，也对应 targetIndexes 的位置\n                let i = oldIndexes.findIndex((value) => value === item.sortIndex);\n                // 如果找到了，则往 sortIndexes 中添加 targetIndexes[i]\n                if (i >= 0) {\n                    return {\n                        ...item,\n                        sortIndexes: [...item.sortIndexes, targetIndexes[i]]\n                    }\n                }\n                return { ...item }\n            })\n\n\n            let newValues: number[] = [...state.values];\n\n            let newOpeDetail;\n\n            // 判断是扩容还是缩容\n            if (targetIndexes[0] > oldIndexes[0]) {\n                // 扩容下标\n                newValues.push(-1);\n            } else {\n                // 缩容下标\n                newValues.splice(oldIndexes[0], 1);\n                newOpeDetail = { type: OpeDetailTypes.Delete, payload: { index: oldIndexes[0], value: state.values[oldIndexes[0]], curValues: [...newValues] } }\n            }\n\n            return {\n                ...state,\n                cubes: newCubes,\n                values: newValues,\n                opeDetails: newOpeDetail ? [...state.opeDetails, newOpeDetail] : [...state.opeDetails]\n            }\n        }\n\n        case ActionTypes.AddDone: {\n            const { newEle, targetIndex } = payload;\n\n            // 生成新 cube\n            const newCube: ISortCube = {\n                sortIndex: targetIndex,\n                sortIndexes: [targetIndex],\n                value: newEle\n            }\n\n            // 更新 cube 的 sortIndex 到最新\n            let newCubes = state.cubes.map((item, i) => {\n                const curSortIndex = item.sortIndex;\n                const newSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                if (curSortIndex !== newSortIndex) {\n                    return { ...item, sortIndex: newSortIndex };\n                }\n                return { ...item };\n            })\n\n            // 添加新 cube\n            newCubes.push(newCube);\n\n            // 更新 values\n            let newValues = [...state.values];\n            newValues.splice(targetIndex, 0, newEle);\n            newValues.pop();\n\n            const newOpeDetail = { type: OpeDetailTypes.Add, payload: { index: targetIndex, value: newEle, curValues: [...newValues] } }\n\n            return {\n                ...state,\n                cubes: newCubes,\n                values: newValues,\n                opeDetails: [...state.opeDetails, newOpeDetail]\n            }\n        }\n\n        case ActionTypes.Delete: {\n            const newCubes = state.cubes.map((item) => item.sortIndex === payload ? { ...item, disappear: true } : { ...item });\n\n            return {\n                ...state,\n                cubes: newCubes\n            }\n        }\n\n        case ActionTypes.DeleteDone: {\n\n            let newCubes = [...state.cubes];\n\n            // 先把删除的元素真正意义上从 cubes 中删除\n            newCubes.splice(payload, 1);\n\n            // 更新 cube 的 sortIndex 到最新\n            newCubes = state.cubes.map((item) => {\n                const curSortIndex = item.sortIndex;\n                const newSortIndex = item.sortIndexes[item.sortIndexes.length - 1];\n                if (curSortIndex !== newSortIndex) {\n                    return { ...item, sortIndex: newSortIndex };\n                }\n                return { ...item };\n            })\n\n            return {\n                ...state,\n                cubes: newCubes\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n","import { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, PageHeader, Steps, message } from 'antd';\nimport { BarChartOutlined, DotChartOutlined } from '@ant-design/icons';\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport SortCube3d from './SortCube3d/sortCube3d';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { addEleSeq, bubbleSortSeq, deleteEleSeq, getStartPosX, initCubes, parseValue, quickSortSeq, initSeq, selectSortSeq } from './utils';\nimport { OpeDetailTypes, IReducer } from '../../types';\nimport { initState, IState, reducer } from './store';\nimport config from './config'\nimport { root } from '../../configs/router/config';\nimport { excuteSeq, randomArr, randomNum } from '../../utils';\n\nconst { Step } = Steps;\n\nconst Sort = () => {\n    const history = useHistory();\n\n    const [state, dispatch] = useReducer<IReducer<IState>, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n            cubes: initCubes(state.values),\n            startPosX: getStartPosX(state.values.length),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: initState.values }]\n        }\n    })\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 渲染器生成数组 */\n    const handleRender = (value: string) => {\n        const parseRes = parseValue(value);\n        if (Array.isArray(parseRes)) {\n            let sequence = initSeq(parseRes);\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n        } else {\n            message.warning(parseRes)\n        }\n    }\n\n    /** 随机生成数组 */\n    const handleRandom = () => {\n        let sequence = initSeq(randomArr(randomNum(config.geoNumRange), config.geoValueRange));\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 处理冒泡排序 */\n    const handleBubbleSort = () => {\n        let sequence = bubbleSortSeq(state.values);\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 处理选择排序 */\n    const handleSelectSort = () => {\n        let sequence = selectSortSeq(state.values);\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 处理快速排序 */\n    const handleQuickSort = () => {\n        let sequence: any[] = [];\n        quickSortSeq([...state.values], 0, state.values.length - 1, sequence);\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 处理添加元素 */\n    const handleAddEle = (value: number, index: number) => {\n        if (state.values.length < config.geoNumRange[1] + 3) {\n            if (index > state.values.length - 1 || index < 0) {\n                message.warning('输入的序号不合法')\n            } else {\n                const sequence = addEleSeq(state.values, value, index);\n                excuteSeq(sequence, config.animationSpeed, dispatch);\n            }\n\n        } else {\n            message.warning(`添加失败，数组最大容量为${config.geoNumRange[1] + 3}`)\n        }\n\n    }\n\n    /** 处理删除元素 */\n    const handleDeleteEle = (index: number) => {\n        if (state.values.length > 0) {\n            if (index > state.values.length - 1 || index < 0) {\n                message.warning('输入的序号不合法')\n            } else {\n                const sequence = deleteEleSeq(state.values, index);\n                excuteSeq(sequence, config.animationSpeed, dispatch);\n            }\n        } else {\n            message.warning('删除失败，当前数组为空')\n        }\n    }\n\n    /** 处理动画速度改变 */\n    const handleSliderChange = (value: number) => {\n        // console.log(value);\n    }\n\n    return (\n        <div className='sort-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace(root)\n                    window.location.reload();\n                }}\n                title='排序'\n            />\n            <div className='main'>\n                <Scene3d\n                    onLoaded={handleSceneLoaded}\n                    cameraPosZ={config.cameraPosZ}\n                >\n                    {\n                        state.cubes.map((item, index) => (\n                            <SortCube3d\n                                key={index + '@'}\n                                sortIndexes={item.sortIndexes}\n                                sortIndex={item.sortIndex}\n                                value={item.value}\n                                startPosX={state.startPosX}\n                                isActive={item.isActive}\n                                isLock={item.isLock}\n                                // 由于 cube 的重心决定其位置，那么高度变化会导致其底部覆盖掉下面的 text，所以要改变其重心位置\n                                position={[state.startPosX + (item.sortIndex * config.geoBaseDistance), ((item.value as number) * 0.2) / 2 + config.geoBasePosY, 0]}\n                                disappear={item.disappear}\n                            />\n                        ))\n                    }\n                    {\n                        state.values.map((_, index) => (\n                            <Text\n                                key={index + '*'}\n                                fillOpacity={state.disappearAll ? 0 : 1}\n                                color='black'\n                                fontSize={0.5}\n                                position={[state.startPosX + (index * config.geoBaseDistance), -1 + config.geoBasePosY, 0]}\n                            >\n                                {index}\n                            </Text>\n                        ))\n                    }\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'flex' : 'none' }}\n                    onSliderChange={handleSliderChange}\n                    onAdd={handleAddEle}\n                    onDelete={handleDeleteEle}\n                    indexRange={[0, 10]}\n                    valueRange={[3, 35]}\n                    spinning={state.loading}\n                    onRender={handleRender}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handleBubbleSort}>冒泡排序</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handleSelectSort}>选择排序</Button>\n                            </div>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />}>插入排序</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handleQuickSort}>快速排序</Button>\n                                <Button icon={<BarChartOutlined />}>归并排序</Button>\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.Swap:\n                                        return (\n                                            <Step\n                                                key={i + 'step'}\n                                                title={`交换元素: i1=${payload.indexes[0]}, i2=${payload.indexes[1]}`}\n                                                description={`当前数组: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Add:\n                                        return (\n                                            <Step\n                                                key={i + 'step'}\n                                                title={`新增元素: i=${payload.index}, v=${payload.value}`}\n                                                description={`当前数组: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Delete:\n                                        return (\n                                            <Step\n                                                key={i + 'step'}\n                                                title={`删除元素: i=${payload.index}, v=${payload.value}`}\n                                                description={`当前数组: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n                                    default:\n                                        return (\n                                            <Step\n                                                key={i + 'step'}\n                                                title={`当前数组: [${payload.toString()}]`}\n                                            />\n                                        )\n                                }\n                            })}\n\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='item2'\n                        icon={<BarChartOutlined />}\n                        title='排序'\n                    >\n                        <Item onClick={handleBubbleSort}>冒泡排序</Item>\n                        <Item onClick={handleSelectSort}>选择排序</Item>\n                        <Item>插入排序</Item>\n                        <Item onClick={handleQuickSort}>快速排序</Item>\n                        <Item>归并排序</Item>\n                    </SubMenu>\n                </Console>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Sort;","import { ISpherePageConfig } from \"../../types\";\nimport { Points } from \"../../types\";\n\nlet config: ISpherePageConfig = {\n    geoBaseDistance: 2,\n    geoNumRange: [5, 15],\n    geoValueRange: [10, 70],\n    geoBasePosY: 3,\n    cameraPosZ: 21,\n    animationSpeed: 400,\n    maxDeepth: 3\n}\n\n/** 满二叉树的各点坐标 */\nexport const cdnOfNodes: Points = [\n    // 第一排\n    [0, 5 + config.geoBasePosY, 0],\n    // 第二排\n    [-4, 2 + config.geoBasePosY, 0], [4, 2 + config.geoBasePosY, 0],\n    // 第三排\n    [-6, -1 + config.geoBasePosY, 0], [-2, -1 + config.geoBasePosY, 0], [2, -1 + config.geoBasePosY, 0], [6, -1 + config.geoBasePosY, 0],\n    // 第四排\n    [-7, -4 + config.geoBasePosY, 0], [-5, -4 + config.geoBasePosY, 0], [-3, -4 + config.geoBasePosY, 0], [-1, -4 + config.geoBasePosY, 0], [1, -4 + config.geoBasePosY, 0], [3, -4 + config.geoBasePosY, 0], [5, -4 + config.geoBasePosY, 0], [7, -4 + config.geoBasePosY, 0]\n]\n\nexport default config;","import { ActionTypes, IReducer, OpeDetailTypes } from \"../../types\";\nimport { IBinaryHeapSphere3dProps } from \"./BinaryHeapSphere3d/binaryHeapSphere3d\";\nimport config, { cdnOfNodes } from \"./config\";\n\nexport interface IBinaryHeapSphere3d extends IBinaryHeapSphere3dProps { }\n\nexport interface IState {\n    // 表示二叉树当前真实的结构\n    binaryTree: (number | null)[];\n    // 用来表示每个 sphere 的属性，其元素位置无意义，其中 sortIndex 才是对应的 values 的下标\n    spheres: IBinaryHeapSphere3d[];\n    randomDone: boolean;\n    opeDetails: any[];\n}\n\nexport const initState: IState = {\n    binaryTree: [],\n    spheres: [],\n    opeDetails: [],\n    randomDone: true,\n}\n\nexport const reducer: IReducer<IState> = (state = initState, action) => {\n    const { type, payload } = action;\n    switch (type) {\n\n\n        case ActionTypes.Move: {\n\n\n            return {\n                ...state,\n            }\n        }\n\n\n        case ActionTypes.StartPreorder:\n            return {\n                ...state,\n                spheres: state.spheres.map(\n                    (item) => ({ ...item, isLock: false })\n                ),\n                opeDetails: [...state.opeDetails, { type: OpeDetailTypes.PreOrderDetails, payload }]\n            }\n\n        case ActionTypes.StartInOrder:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isLock: false,\n                    activeLeft: false,\n                    activeRight: false\n                })),\n                opeDetails: [...state.opeDetails, { type: OpeDetailTypes.InOrderDetails, payload }]\n            }\n\n        case ActionTypes.StartPostOrder:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isLock: false,\n                    activeLeft: false,\n                    activeRight: false\n                })),\n                opeDetails: [...state.opeDetails, { type: OpeDetailTypes.PostOrderDetails, payload }]\n            }\n\n        case ActionTypes.Active:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isActive: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.ActiveLeft:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    activeLeft: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.ActiveRight:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    activeRight: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isActive: payload === item.sortIndex ? false : item.isActive\n                }))\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n                spheres: state.spheres.map(\n                    (item) => payload === item.sortIndex ? { ...item, isLock: true } : { ...item }\n                )\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n                spheres: state.spheres.map(\n                    (item) => (!payload && payload !== 0) ? { ...item, isLock: false } : (payload === item.sortIndex) ? { ...item, isLock: false } : { ...item }\n                )\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            }\n\n        case ActionTypes.RandomDone: {\n            // let newBinaryTree = randomBST(config.geoNumRange, config.geoValueRange, config.maxDeepth);\n\n            return {\n                ...state,\n                // binaryTree: formatBinaryTree(newBinaryTree),\n                // spheres: initSpheres(newBinaryTree),\n                // randomDone: true,\n                // opeDetails: [{ type: OpeDetailTypes.Default, payload: treeToString(newBinaryTree) }]\n            }\n        }\n\n        default:\n            return state\n    }\n}","import { Line } from '@react-three/drei'\nimport { Points } from '../../types';\n\ninterface ILine3dProps {\n    points: Points;\n    hidden: boolean;\n    lineWidth?: number;\n    isActive?: boolean;\n}\n\nconst Line3d:React.FC<ILine3dProps> = (props) => {\n\n    const {\n        points,\n        hidden,\n        lineWidth,\n        isActive\n    } = props;\n\n    return (\n        <Line\n            lineWidth={lineWidth}\n            points={points}\n            color={isActive ? 'orange' : 'gray'}\n            opacity={hidden ? 0 : 1}\n            transparent={true}\n        />\n\n    )\n}\n\nLine3d.defaultProps = {\n    lineWidth: 1.5\n}\n\nexport default Line3d;","import { forwardRef, useEffect, useRef, useState } from 'react';\nimport { animated, config, useSpring } from 'react-spring/three';\nimport { Icosahedron, Text } from '@react-three/drei'\nimport { defaultGeoColor } from '../../configs/page/defaultConfig';\nimport { IGeometryProps } from '../../types';\n\nexport interface ISphere3dProps extends IGeometryProps {\n    /** 结点的实际顺序 */\n    sortIndex: number;\n    /** 该sphere过去已存在或者未来将要到达的位置 */\n    sortIndexes: number[];\n    /** 左线条位置 */\n    lChildPos?: any;\n    /** 右线条位置 */\n    rChildPos?: any;\n    /** 激活左线条 */\n    activeLeft?: boolean;\n    /** 激活右线条 */\n    activeRight?: boolean;\n}\n\nconst Sphere3d: React.FC<ISphere3dProps> = forwardRef<any, ISphere3dProps>((props, ref) => {\n\n    const {\n        position,\n        value,\n        isActive,\n        isLock,\n        colorConfig,\n        disappear\n    } = props;\n\n    const [isHover, setIsHover] = useState(false)\n    const [isClick, setIsClick] = useState(false)\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    /** 配置颜色过渡效果 */\n    const { color } = useSpring({\n        color: (\n            isClick ? colorConfig?.activeColor :\n                isHover ? colorConfig?.hoverColor :\n                    isLock ? colorConfig?.lockColor : colorConfig?.defaultColor\n        )\n    })\n\n    /** 配置扩缩动画效果 */\n    const { scale } = useSpring({\n        reverse: disappear,\n        from: { scale: 0 },\n        to: { scale: isClick ? 1.20 : 1 },\n        config: disappear ? config.default : config.wobbly\n    })\n\n    /** 扫描数组的时候，如果改变了 active 属性，则给它设置一个点击效果 */\n    useEffect(() => {\n        isActive ? setIsClick(true) : setIsClick(false);\n    }, [isActive])\n\n    return (\n        <animated.mesh\n            position={position}\n            ref={ref}\n            scale={scale}\n        >\n            <Icosahedron\n                ref={meshRef}\n                args={[0.7, 10]}\n                onClick={() => setIsClick(!isClick)}\n                onPointerOver={() => setIsHover(true)}\n                onPointerOut={() => setIsHover(false)}\n            >\n                <Text\n                    position={[0, 0, 0.7]}\n                    fontSize={0.5}\n                    color='black'\n                >\n                    {value}\n                </Text>\n\n                <animated.meshPhongMaterial\n                    color={color}\n                    opacity={1}\n                />\n            </Icosahedron>\n        </animated.mesh>\n    )\n})\n\nSphere3d.defaultProps = {\n    colorConfig: defaultGeoColor\n}\n\nexport default Sphere3d;","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport Line3d from \"../../../components/Line3d/line3d\";\nimport Sphere3d, { ISphere3dProps } from \"../../../components/Sphere3d/sphere3d\";\nimport config, { cdnOfNodes } from '../config'\n\nexport interface IBinaryHeapSphere3dProps extends ISphere3dProps { }\n\nconst BSTSphere3d: React.FC<IBinaryHeapSphere3dProps> = (props) => {\n\n    const {\n        lChildPos,\n        rChildPos,\n        position,\n        activeLeft,\n        activeRight,\n        disappear,\n        sortIndex,\n        sortIndexes,\n        // position,\n        // value,\n        // isActive,\n        // isLock,\n        // colorConfig,\n        // lChildPos,\n        // rChildPos,\n        // disappear,\n        // sortIndex\n    } = props;\n\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    const oldPosX = cdnOfNodes[sortIndex][0];\n    const oldPosY = cdnOfNodes[sortIndex][1];\n\n    const targetPosX = cdnOfNodes[sortIndexes[sortIndexes.length - 1]][0];\n    const targetPosY = cdnOfNodes[sortIndexes[sortIndexes.length - 1]][1];\n\n    useFrame(() => {\n        const deltaX = Math.abs(oldPosX - targetPosX) / (config.animationSpeed / 20);\n        const deltaY = Math.abs(oldPosY - targetPosY) / (config.animationSpeed / 20);\n\n        // 如果当前sphere需要水平移动\n        if (deltaX) {\n\n            // sphere 需要往右移\n            if (oldPosX - targetPosX < 0 && meshRef.current.position.x < targetPosX) {\n                meshRef.current.translateX(deltaX);\n                if (meshRef.current.position.x >= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n\n            // sphere 需要往左移\n            else if (oldPosX - targetPosX > 0 && meshRef.current.position.x > targetPosX) {\n                meshRef.current.translateX(-deltaX);\n                if (meshRef.current.position.x <= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n        }\n\n        // 如果当前sphere需要竖直移动\n        if (deltaY) {\n\n            // sphere 需要往上移\n            if (oldPosY - targetPosY < 0 && meshRef.current.position.y < targetPosY) {\n                meshRef.current.translateY(deltaY);\n                if (meshRef.current.position.y >= targetPosY) {\n                    meshRef.current.position.y = targetPosY;\n                }\n            }\n\n            // sphere 需要往下移\n            else if (oldPosY - targetPosY > 0 && meshRef.current.position.y > targetPosY) {\n                meshRef.current.translateY(-deltaY);\n                if (meshRef.current.position.y <= targetPosY) {\n                    meshRef.current.position.y = targetPosY;\n                }\n            }\n        }\n    })\n\n    return (\n        <>\n            <Sphere3d\n                ref={meshRef as any}\n                {...props}\n            />\n            {\n                lChildPos &&\n                <Line3d\n                    hidden={disappear as boolean}\n                    points={[position, lChildPos]}\n                    isActive={activeLeft}\n                />\n            }\n            {\n                rChildPos &&\n                <Line3d\n                    hidden={disappear as boolean}\n                    points={[position, rChildPos]}\n                    isActive={activeRight}\n                />\n            }\n        </>\n    )\n}\n\nexport default BSTSphere3d;","import { randomNum } from './index';\nimport { ActionTypes, Range } from '../types';\nimport { log } from './math';\nimport { ISphere3dProps } from '../components/Sphere3d/sphere3d';\n\n\n/** input输入的value解析为数组，如果输入的不合法则返回 undefined */\nexport function parseValue(value: string) {\n    // 去掉前后括，然后按照逗号划分，再转换成数字数组\n    let parseRes = value.substring(1, value.length - 1).split(/[,，]/g).map(item => +item);\n\n    return parseRes.map((value) => isNaN(value) ? null : value);\n}\n\n/** 返回初始化二叉树的细节 */\nexport function initSeq(values: (number | null)[]) {\n    const seq = [];\n    seq.push([{ type: ActionTypes.Disappear }])\n    seq.push([\n        { type: ActionTypes.Generate, payload: values },\n        { type: ActionTypes.Appear }])\n    return seq;\n}\n\n/** 传入结点下标，返回二叉树中以该结点为根结点的子树 */\nexport function getSubTree(binaryTree: (number | null)[], indexOfNode: number) {\n    const queue: any[] = [];\n    const subTree: any[] = [];\n\n    if (binaryTree.length !== 0) {\n        queue.push({ value: binaryTree[indexOfNode], index: indexOfNode });   //根节点进队列\n    }\n    //队列不为空判断\n    while (queue.length !== 0) {\n\n        const lChildV = getLChildValue(binaryTree, queue[0].index);\n        const rChildV = getRChildValue(binaryTree, queue[0].index);\n\n        //如果有左孩子，leftChild入队列\n        if (lChildV || lChildV === 0) {\n            queue.push({ value: lChildV, index: queue[0].index * 2 + 1 })\n        }\n\n        //如果有右孩子，rightChild入队列\n        if (rChildV || rChildV === 0) {\n            queue.push({ value: rChildV, index: queue[0].index * 2 + 2 })\n        }\n        //已经遍历过的节点出队列\n        subTree.push(queue.shift())\n    }\n    return subTree;\n}\n\n/** 格式化二叉树：将spheres中的空元素设置为value为空的sphere */\nexport function formatSpheres<T extends ISphere3dProps>(spheres: T[]) {\n    return spheres.map<T>((sphere, i, arr) => {\n        if (!sphere) return { ...arr[0], value: null, sortIndex: i }\n        return sphere\n    })\n}\n\n/** 格式化二叉树：将数组内的空数组全部设置为null */\nexport function formatBinaryTree(binaryTree: (number | null)[]) {\n    for (let i = 0; i < binaryTree.length; i++) {\n        if (!binaryTree[i]) {\n            binaryTree[i] = null;\n        }\n    }\n    // 将尾部所有的null去掉\n    for (let i = binaryTree.length - 1; i >= 0; i--) {\n        if (binaryTree[i] !== null) {\n            binaryTree.length = i + 1;\n            break;\n        }\n    }\n    return [...binaryTree]\n}\n\n/** 将传入的二叉树数组转为字符串 */\nexport function treeToString(binaryTree: (number | null)[]) {\n    return '[' + binaryTree.map((value) => !value ? 'null' : value).toString() + ']'\n}\n\n/** 初始化二叉树sphere */\nexport function initSpheres(values: (number | null)[]) {\n    return values.map((value, index) => ({ sortIndex: index, sortIndexes: [index], value }))\n}\n\n/** 获取传入结点的父结点数据值 */\nexport function getFatherValue<T>(binaryTree: T[], indexOfNode: number) {\n    return binaryTree[Math.floor((indexOfNode - 1) / 2)];\n}\n\n/** 获取传入结点的父结点的下标 */\nexport function getFatherIndex(indexOfNode: number) {\n    return Math.floor((indexOfNode - 1) / 2);\n}\n\n/** 获取传入结点子结点下标 */\nexport function getChildrenIndexes(binaryTree: (number | null)[], indexOfNode: number) {\n    let indexes: any[] = [undefined, undefined];\n    if (getLChildValue(binaryTree, indexOfNode)) indexes[0] = indexOfNode * 2 + 1;\n    if (getRChildValue(binaryTree, indexOfNode)) indexes[1] = indexOfNode * 2 + 2;\n    return indexes;\n}\n\n/** 获取传入结点的左孩子数据值 */\nexport function getLChildValue<T>(binaryTree: T[], indexOfNode: number) {\n    return binaryTree[indexOfNode * 2 + 1];\n}\n\n/** 获取传入结点的右孩子数据值 */\nexport function getRChildValue<T>(binaryTree: T[], indexOfNode: number) {\n    return binaryTree[indexOfNode * 2 + 2]\n}\n\n/** 为传入的结点设置左孩子 */\nexport function setLChild<T>(binaryTree: T[], indexOfNode: number, lChild: T) {\n    const root = binaryTree[indexOfNode];\n    if (root) binaryTree[indexOfNode * 2 + 1] = lChild;\n    else throw new Error('node is null');\n}\n\n/** 为传入的结点设置右孩子 */\nexport function setRChild<T>(binaryTree: T[], indexOfNode: number, rChild: T) {\n    const root = binaryTree[indexOfNode];\n    if (root) binaryTree[indexOfNode * 2 + 2] = rChild;\n    else throw new Error('node is null');\n}\n\n/** 根据传入的下标获取结点所在的二叉树层数 */\nexport function getDeepthByNodeIndex(indexOfNode: number) {\n    return Math.floor(log(2, indexOfNode + 1));\n}\n\n/** 获取二叉树最大层数 */\nexport function getMaxDeepth(binaryTree: (number | null)[]) {\n    return getDeepthByNodeIndex(binaryTree.length - 1);\n}\n\n/** 随机生成结点数为n的二叉树 */\nexport function binaryTreeGenerator(n: number, binaryTree: (number | null)[], nodeValueRange: Range, indexOfRoot: number,) {\n    if (n === 0) return;\n\n    // 左孩子的值\n    const lChildV = randomNum(nodeValueRange);\n    // 右孩子的值\n    const rChildV = randomNum(nodeValueRange);\n\n    // 根结点的左子树的结点个数\n    const leftN = randomNum([0, n - 1]);\n    const rightN = n - leftN - 1;\n\n    // 递归建立每棵子树\n    setLChild(binaryTree, indexOfRoot, leftN > 0 ? lChildV : null);\n    binaryTreeGenerator(leftN, binaryTree, nodeValueRange, indexOfRoot * 2 + 1)\n\n    setRChild(binaryTree, indexOfRoot, rightN > 0 ? rChildV : null);\n    binaryTreeGenerator(rightN, binaryTree, nodeValueRange, indexOfRoot * 2 + 2)\n}\n\n/** 生成层数小于3且结点数在 5 ～ 15 的二叉树 */\nexport function randomBinaryTree(nodeNumsRange: Range, nodeValueRange: Range, maxDeepth: number): (number | null)[] {\n\n    let cache = new Array(500);\n\n    // 如果生成的二叉树的层数大于了3则重新生成\n    while (getDeepthByNodeIndex(cache.length - 1) > 3) {\n        cache.fill(null);\n        cache[0] = randomNum(nodeValueRange);\n        binaryTreeGenerator(randomNum(nodeNumsRange), cache, nodeValueRange, 0,);\n\n        // 找到 cache 中最后一个不为 null 的元素的下标\n        for (let i = 500; i >= 0; i--) {\n            if (cache[i] !== null) {\n                cache.length = i + 1;\n                break;\n            }\n        }\n    }\n    return cache;\n}\n\n/** 为二叉搜索树添加结点 */\nexport function addToBST(bst: any[], indexOfRoot: number, nodeV: number) {\n    // 传入的 bst 必须有一个根结点\n    if (bst.length === 0) throw new Error('the length of bst is 0');\n\n    if (!bst[indexOfRoot]) return;\n\n    // 判断传入结点的值和当前子树根结点的值的关系\n    if (nodeV > bst[indexOfRoot]) {\n        // 当前结点的右孩子不存在，则直接挂上去\n        if (!getRChildValue(bst, indexOfRoot)) {\n            setRChild(bst, indexOfRoot, nodeV);\n        } else {\n            addToBST(bst, indexOfRoot * 2 + 2, nodeV);\n        }\n    } else {\n        // 当前结点的左孩子不存在，则直接挂上去\n        if (!getLChildValue(bst, indexOfRoot)) {\n            setLChild(bst, indexOfRoot, nodeV);\n        } else {\n            addToBST(bst, indexOfRoot * 2 + 1, nodeV);\n        }\n    }\n}\n\n/** 判断二叉树的某个结点有几个子结点 */\nexport function judgeNode(binaryTree: (number | null)[], indexOfNode: number) {\n    let childNum = 0;\n    if (getLChildValue(binaryTree, indexOfNode)) childNum++;\n    if (getRChildValue(binaryTree, indexOfNode)) childNum++;\n    return childNum;\n}\n\n/** 获取二叉树前序遍历的细节 */\nexport function preOrderSeq(binaryTree: (number | null)[], indexOfNode: number, seq: any[]) {\n    seq.push([{ type: ActionTypes.Active, payload: indexOfNode }]);\n    // seq.push({ type: ActionTypes.ActiveLeft, payload: indexOfNode })\n    seq.push([{ type: ActionTypes.Deactive, payload: indexOfNode }]);\n    seq.push([{ type: ActionTypes.Lock, payload: indexOfNode }]);\n    if (getLChildValue(binaryTree, indexOfNode)) preOrderSeq(binaryTree, indexOfNode * 2 + 1, seq);\n    if (getRChildValue(binaryTree, indexOfNode)) preOrderSeq(binaryTree, indexOfNode * 2 + 2, seq);\n}\n\n/** 获取二叉树中序遍历的细节 */\nexport function inOrderSeq(binaryTree: (number | null)[], indexOfNode: number, seq: any[]) {\n    if (getLChildValue(binaryTree, indexOfNode)) inOrderSeq(binaryTree, indexOfNode * 2 + 1, seq);\n    seq.push([{ type: ActionTypes.Active, payload: indexOfNode }]);\n    // seq.push({ type: ActionTypes.ActiveRight, payload: indexOfNode })\n    seq.push([{ type: ActionTypes.Deactive, payload: indexOfNode }]);\n    seq.push([{ type: ActionTypes.Lock, payload: indexOfNode }])\n    if (getRChildValue(binaryTree, indexOfNode)) inOrderSeq(binaryTree, indexOfNode * 2 + 2, seq);\n}\n\n/** 获取二叉树后序遍历的细节 */\nexport function postOrderSeq(binaryTree: (number | null)[], indexOfNode: number, seq: any[]) {\n    if (getLChildValue(binaryTree, indexOfNode)) postOrderSeq(binaryTree, indexOfNode * 2 + 1, seq);\n    if (getRChildValue(binaryTree, indexOfNode)) postOrderSeq(binaryTree, indexOfNode * 2 + 2, seq);\n    seq.push([{ type: ActionTypes.Active, payload: indexOfNode }]);\n    // seq.push([{ type: ActionTypes.ActiveLeft, payload: indexOfNode }])\n    seq.push([{ type: ActionTypes.Deactive, payload: indexOfNode }]);\n    seq.push([{ type: ActionTypes.Lock, payload: indexOfNode }])\n}\n\n\n","/**\n * 计算对数\n * @param base 底数\n * @param truth 真数\n */\nexport function log(base: number, truth: number) {\n    return Math.log(truth) / Math.log(base)\n}","import { randomArr, randomNum } from '../../utils';\nimport { ActionTypes, Range } from '../../types';\nimport { getChildrenIndexes, getDeepthByNodeIndex, getLChildValue, getRChildValue, judgeNode, setLChild, setRChild } from '../../utils/binaryTree';\n\n/** 为二叉搜索树添加结点 */\nexport function addToBST(bst: any[], indexOfRoot: number, nodeV: number) {\n    // 传入的 bst 必须有一个根结点\n    if (bst.length === 0) throw new Error('the length of bst is 0');\n\n    if (!bst[indexOfRoot]) return;\n\n    // 判断传入结点的值和当前子树根结点的值的关系\n    if (nodeV > bst[indexOfRoot]) {\n        // 当前结点的右孩子不存在，则直接挂上去\n        if (!getRChildValue(bst, indexOfRoot)) {\n            setRChild(bst, indexOfRoot, nodeV);\n        } else {\n            addToBST(bst, indexOfRoot * 2 + 2, nodeV);\n        }\n    } else {\n        // 当前结点的左孩子不存在，则直接挂上去\n        if (!getLChildValue(bst, indexOfRoot)) {\n            setLChild(bst, indexOfRoot, nodeV);\n        } else {\n            addToBST(bst, indexOfRoot * 2 + 1, nodeV);\n        }\n    }\n}\n\n/**\n * @param nodeNumsRange 结点数量范围\n * @param maxDeepth 二叉树的最大层数(从0开始计数)\n * @returns 返回二叉搜索数的顺序存储结构\n */\nexport function randomBST(nodeNumsRange: Range, nodeValueRange: Range, maxDeepth: number) {\n    // 初始化 cache\n    let cache = new Array(500);\n\n    // 如果生成的二叉搜索树的层数大于了3则重新生成\n    while (getDeepthByNodeIndex(cache.length - 1) > maxDeepth) {\n        const arr = randomArr(randomNum(nodeNumsRange), nodeValueRange);\n        cache.fill(null);\n        cache[0] = randomNum(nodeValueRange);\n\n        // 用 arr 向 cache 中添加结点\n        arr.forEach((value) => {\n            addToBST(cache, 0, value)\n        })\n\n        // 找到 cache 中最后一个不为 null 的元素的下标\n        for (let i = 500; i >= 0; i--) {\n            if (cache[i]) {\n                cache.length = i + 1;\n                break;\n            }\n        }\n    }\n    return cache;\n}\n\n/** 获取向二叉搜索树添加结点的细节 */\nexport function addNodeSeq(bst: any[], indexOfRoot: number, nodeV: number, seq: any[]) {\n    // 传入的 bst 必须有一个根结点\n    if (bst.length === 0) throw new Error('the length of bst is 0');\n\n    if (!bst[indexOfRoot]) return;\n\n    seq.push([{ type: ActionTypes.Active, payload: indexOfRoot }])\n    seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot }])\n\n    // 判断传入结点的值和当前子树根结点的值的关系\n    if (nodeV > bst[indexOfRoot]) {\n        // 当前结点的右孩子不存在，则直接挂上去\n        if (!getRChildValue(bst, indexOfRoot)) {\n            seq.push([{\n                type: ActionTypes.Add,\n                payload: { value: nodeV, index: indexOfRoot * 2 + 2 }\n            }])\n        } else {\n            addNodeSeq(bst, indexOfRoot * 2 + 2, nodeV, seq);\n        }\n    } else {\n        // 当前结点的左孩子不存在，则直接挂上去\n        if (!getLChildValue(bst, indexOfRoot)) {\n            seq.push([{\n                type: ActionTypes.Add,\n                payload: { value: nodeV, index: indexOfRoot * 2 + 1 }\n            }])\n        } else {\n            addNodeSeq(bst, indexOfRoot * 2 + 1, nodeV, seq);\n        }\n    }\n}\n\n/** 获取向二叉树删除结点的细节 */\nexport function deleteNodeSeq(bst: any[], targetIndex: number, indexOfRoot: number, seq: any[]) {\n\n    // 传入的 bst 必须有一个根结点\n    if (bst.length === 0) throw new Error('the length of bst is 0');\n\n    if (!bst[indexOfRoot]) return;\n\n    seq.push([{ type: ActionTypes.Active, payload: indexOfRoot }])\n    seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot }])\n\n    if (judgeNode(bst, targetIndex) === 0) {\n        // 如果删除的结点是叶子结点\n        // 判断传入结点的值和当前子树根结点的值的关系\n        if (bst[targetIndex] > bst[indexOfRoot]) {\n            // 如果传入的值大于当前子树根结点的值\n            // 则看其右子树\n            if (getRChildValue(bst, indexOfRoot) === bst[targetIndex]) {\n                // 如果右结点等于nodeV则删除\n                seq.push([{ type: ActionTypes.Active, payload: indexOfRoot * 2 + 2 }])\n                seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot * 2 + 2 }]);\n                seq.push([{ type: ActionTypes.Disappear, payload: indexOfRoot * 2 + 2 }])\n                seq.push([{ type: ActionTypes.Delete, payload: indexOfRoot * 2 + 2 }])\n            } else {\n                // 否则递归搜索其右子树\n                deleteNodeSeq(bst, targetIndex, indexOfRoot * 2 + 2, seq);\n            }\n\n        } else if (bst[targetIndex] < bst[indexOfRoot]) {\n            // 如果传入的值小于当前子树根结点的值\n            // 则看其左子树\n            if (getLChildValue(bst, indexOfRoot) === bst[targetIndex]) {\n                // 如果左结点等于nodeV则删除\n                seq.push([{ type: ActionTypes.Active, payload: indexOfRoot * 2 + 1 }])\n                seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot * 2 + 1 }])\n                seq.push([{ type: ActionTypes.Disappear, payload: indexOfRoot * 2 + 1 }])\n                seq.push([{ type: ActionTypes.Delete, payload: indexOfRoot * 2 + 1 }])\n            } else {\n                // 否则递归搜索其右子树\n                deleteNodeSeq(bst, targetIndex, indexOfRoot * 2 + 1, seq);\n            }\n        } else {\n            // 如果当前结点等于nodeV则删除\n            seq.push([{ type: ActionTypes.Active, payload: indexOfRoot }])\n            seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot }])\n            seq.push([{ type: ActionTypes.Disappear, payload: indexOfRoot }])\n            seq.push([{ type: ActionTypes.Delete, payload: indexOfRoot }])\n        }\n    } else if (judgeNode(bst, targetIndex) === 1) {\n        // 如果删除的结点有一个子结点\n        // 判断传入结点的值和当前子树根结点的值的关系\n        if (bst[targetIndex] > bst[indexOfRoot]) {\n            // 如果传入的值大于当前子树根结点的值\n            // 则看其右子树\n            if (getRChildValue(bst, indexOfRoot) === bst[targetIndex]) {\n                // 如果右结点等于nodeV则删除\n                seq.push([{ type: ActionTypes.Active, payload: indexOfRoot * 2 + 2 }])\n                seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot * 2 + 2 }]);\n                seq.push([{ type: ActionTypes.Disappear, payload: indexOfRoot * 2 + 2 }]);\n                seq.push([{\n                    type: ActionTypes.Move,\n                    // 需要 move 的结点应该是多个 ⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️\n                    payload: {\n                        oldSortIndexes: getChildrenIndexes(bst, indexOfRoot * 2 + 2)[0] || getChildrenIndexes(bst, indexOfRoot * 2 + 2)[1],\n                        targetIndexes: indexOfRoot * 2 + 2\n                    }\n                }])\n                seq.push([{ type: ActionTypes.Delete, payload: indexOfRoot * 2 + 2 }])\n            } else {\n                // 否则递归搜索其右子树\n                deleteNodeSeq(bst, targetIndex, indexOfRoot * 2 + 2, seq);\n            }\n\n        } else if (bst[targetIndex] < bst[indexOfRoot]) {\n            // 如果传入的值小于当前子树根结点的值\n            // 则看其左子树\n            if (getLChildValue(bst, indexOfRoot) === bst[targetIndex]) {\n                // 如果左结点等于nodeV则删除\n                seq.push([{ type: ActionTypes.Active, payload: indexOfRoot * 2 + 1 }])\n                seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot * 2 + 1 }])\n                seq.push([{ type: ActionTypes.Disappear, payload: indexOfRoot * 2 + 1 }])\n                seq.push([{ type: ActionTypes.Delete, payload: indexOfRoot * 2 + 1 }])\n            } else {\n                // 否则递归搜索其右子树\n                deleteNodeSeq(bst, targetIndex, indexOfRoot * 2 + 1, seq);\n            }\n        } else {\n            // 如果当前结点等于nodeV则删除\n            seq.push([{ type: ActionTypes.Active, payload: indexOfRoot }])\n            seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot }])\n            seq.push([{ type: ActionTypes.Disappear, payload: indexOfRoot }])\n            seq.push([{ type: ActionTypes.Delete, payload: indexOfRoot }])\n        }\n    }\n}\n\n/** 获取查找细节 */\nexport function searchSeq(bst: any[], nodeV: number, indexOfRoot: number, seq: any[]) {\n    // 传入的 bst 必须有一个根结点\n    if (bst.length === 0) throw new Error('the length of bst is 0');\n\n    // 如果结点不存在则直接返回\n    if (!bst[indexOfRoot]) return;\n\n    seq.push([{ type: ActionTypes.Active, payload: indexOfRoot }])\n    seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot }])\n\n    // 判断传入结点的值和当前子树根结点的值的关系\n    if (nodeV > bst[indexOfRoot]) {\n        // 如果传入的值大于当前子树根结点的值\n        // 则看其右子树\n        if (getRChildValue(bst, indexOfRoot) === nodeV) {\n            // 如果右结点等于nodeV则锁定\n            seq.push([{ type: ActionTypes.Active, payload: indexOfRoot * 2 + 2 }])\n            seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot * 2 + 2 }])\n            seq.push([{ type: ActionTypes.Lock, payload: indexOfRoot * 2 + 2 }])\n        } else {\n            // 否则递归搜索其右子树\n            searchSeq(bst, nodeV, indexOfRoot * 2 + 2, seq);\n        }\n\n    } else if (nodeV < bst[indexOfRoot]) {\n        // 如果传入的值小于当前子树根结点的值\n        // 则看其左子树\n        if (getLChildValue(bst, indexOfRoot) === nodeV) {\n            // 如果左结点等于nodeV则锁定\n            seq.push([{ type: ActionTypes.Active, payload: indexOfRoot * 2 + 1 }])\n            seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot * 2 + 1 }])\n            seq.push([{ type: ActionTypes.Lock, payload: indexOfRoot * 2 + 1 }])\n        } else {\n            // 否则递归搜索其右子树\n            searchSeq(bst, nodeV, indexOfRoot * 2 + 1, seq);\n        }\n    } else {\n        // 如果当前结点等于nodeV则锁定\n        seq.push([{ type: ActionTypes.Active, payload: indexOfRoot }])\n        seq.push([{ type: ActionTypes.Deactive, payload: indexOfRoot }])\n        seq.push([{ type: ActionTypes.Lock, payload: indexOfRoot }])\n    }\n}\n\n\n","import React, { useReducer, useState } from 'react'\nimport { useHistory } from 'react-router'\nimport { Text } from '@react-three/drei'\nimport { Button, PageHeader, Steps, message } from 'antd'\nimport { BarChartOutlined, DotChartOutlined } from '@ant-design/icons'\nimport Console, { Item, SubMenu } from '../../components/Console/console'\nimport Scene3d from '../../components/Scene3d/scene3d'\nimport { ActionTypes, IReducer, OpeDetailTypes } from '../../types'\nimport { cdnOfNodes } from './config'\nimport { initState, IState, reducer } from './store'\nimport BSTSphere3d from './BinaryHeapSphere3d/binaryHeapSphere3d'\nimport config from './config'\nimport { root } from '../../configs/router/config'\nimport { addNodeSeq, randomBST } from '../BinarySearchTree/utils'\nimport { getLChildValue, getRChildValue, initSpheres, inOrderSeq, postOrderSeq, preOrderSeq, treeToString } from '../../utils/binaryTree'\n\nconst { Step } = Steps;\n\nconst BinarySearchTree = () => {\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer<IState>, IState>(reducer, initState, (state): IState => {\n        const initBinaryTree = randomBST(config.geoNumRange, config.geoValueRange, config.maxDeepth);\n        return {\n            ...state,\n            binaryTree: initBinaryTree,\n            spheres: initSpheres(initBinaryTree),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: treeToString(initBinaryTree) }]\n        }\n    });\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 添加元素 */\n    const handleAddEle = (value: number, _: unknown) => {\n        dispatch({ type: ActionTypes.UnLock })\n        let sequence: any[] = [];\n\n    }\n\n    /** 删除元素 */\n    const handleDeleteEle = (index: number) => {\n        dispatch({ type: ActionTypes.UnLock })\n\n        // 验证一下输入的序号\n        if (!state.binaryTree[index]) {\n            return message.warning('删除失败，输入的结点序号不存在')\n        }\n\n        let sequence: any[] = [];\n\n\n    }\n\n    /** 搜索元素 */\n    const handleSearch = (value: number) => {\n        dispatch({ type: ActionTypes.UnLock })\n\n        let sequence: any[] = [];\n\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, config.animationSpeed);\n    }\n\n    /** 前序遍历 */\n    const handlePreorder = () => {\n\n        let sequence: any[] = [];\n        preOrderSeq(state.binaryTree, 0, sequence);\n\n        // 获取遍历的结果\n        const preOrderRes: number[] = [];\n        sequence.forEach((event) => {\n            if (event.type === ActionTypes.Active) preOrderRes.push(state.binaryTree[event.index] as number)\n        })\n\n        dispatch({ type: ActionTypes.StartPreorder, payload: preOrderRes });\n        sequence.forEach((event, i) => {\n            setTimeout(() => {\n                dispatch({ type: event.type, payload: event.index })\n            }, i * config.animationSpeed)\n        })\n\n    }\n\n    /** 中序遍历 */\n    const handleInorder = () => {\n        let sequence: any[] = [];\n        inOrderSeq(state.binaryTree, 0, sequence);\n\n        // 获取遍历的结果\n        const inOrderRes: number[] = [];\n        sequence.forEach((event) => {\n            if (event.type === ActionTypes.Active) inOrderRes.push(state.binaryTree[event.index] as number)\n        })\n\n        dispatch({ type: ActionTypes.StartInOrder, payload: inOrderRes });\n        sequence.forEach((event, i) => {\n            setTimeout(() => {\n                dispatch({ type: event.type, payload: event.index })\n            }, i * config.animationSpeed)\n        })\n    }\n\n    /** 后序遍历 */\n    const handlePostorder = () => {\n        let sequence: any[] = [];\n        postOrderSeq(state.binaryTree, 0, sequence);\n        const postOrderRes: number[] = [];\n        sequence.forEach((event) => {\n            if (event.type === ActionTypes.Active) postOrderRes.push(state.binaryTree[event.index] as number)\n        })\n        dispatch({ type: ActionTypes.StartPostOrder, payload: postOrderRes });\n        sequence.forEach((event, i) => {\n            setTimeout(() => {\n                dispatch({ type: event.type, payload: event.index })\n            }, i * config.animationSpeed)\n        })\n    }\n\n    return (\n        <div className='binarySearchTree-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace(root)\n                    window.location.reload();\n                }}\n                title='二叉搜索树'\n            />\n            <div className='main'>\n                <Scene3d\n                    onLoaded={handleSceneLoaded}\n                    cameraPosZ={config.cameraPosZ}\n                >\n                    {state.spheres.map((sphere, i) => {\n                        // 判断当前结点是否有左孩子\n                        const hasLChild = getLChildValue(state.spheres, sphere.sortIndex)?.value;\n\n                        // 获取左结点的位置(加上前面的这个判断是为了在删除元素时，会设置与之连接的父结点的那条线为null)\n                        const lChildPos = sphere.lChildPos !== null && getLChildValue(cdnOfNodes, sphere.sortIndex);\n\n                        // 判断当前结点是否有右孩子\n                        const hasRChild = sphere.rChildPos !== null && getRChildValue(state.spheres, sphere.sortIndex)?.value;\n\n                        // 获取右结点的位置\n                        const rChildPos = getRChildValue(cdnOfNodes, sphere.sortIndex);\n\n                        return (\n                            sphere.value && (\n                                <React.Fragment key={'sphere' + i}>\n                                    <BSTSphere3d\n                                        value={sphere.value}\n                                        sortIndex={sphere.sortIndex}\n                                        sortIndexes={sphere.sortIndexes}\n                                        position={cdnOfNodes[sphere.sortIndex]}\n                                        isActive={sphere.isActive}\n                                        activeLeft={sphere.activeLeft}\n                                        activeRight={sphere.activeRight}\n                                        isLock={sphere.isLock}\n                                        disappear={sphere.disappear || !state.randomDone}\n                                        lChildPos={hasLChild && lChildPos}\n                                        rChildPos={hasRChild && rChildPos}\n                                    />\n                                    <Text\n                                        position={[cdnOfNodes[i][0], cdnOfNodes[i][1] - 1.2, cdnOfNodes[i][2]]}\n                                        fontSize={0.4}\n                                        fillOpacity={!sphere.disappear && state.randomDone ? 1 : 0}\n                                        color='black'\n                                    >\n                                        {i}\n                                    </Text>\n                                </React.Fragment>\n\n                            )\n                        )\n                    })}\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'flex' : 'none' }}\n                    // onSliderChange={handleSliderChange}\n                    isAddIndex={false}\n                    isSearch={true}\n                    onAdd={handleAddEle}\n                    onDelete={handleDeleteEle}\n                    onSearch={handleSearch}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handlePreorder}>前序遍历</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handleInorder}>中序遍历</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handlePostorder}>后序遍历</Button>\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.InOrderDetails:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`中序遍历: [${payload}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.PreOrderDetails:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`前序遍历: [${payload}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.PostOrderDetails:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`后序遍历: [${payload}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Add: {\n                                        const { index, value, cur } = payload;\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`新增结点: i=${index}, v=${value}`}\n                                                description={`当前二叉树: ${treeToString(cur)}`}\n                                            />\n                                        )\n                                    }\n\n                                    case OpeDetailTypes.Delete: {\n                                        const { index, value, cur } = payload;\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`删除结点: i=${index}, v=${value}`}\n                                                description={`当前二叉树: ${treeToString(cur)}`}\n                                            />\n                                        )\n                                    }\n\n                                    default:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`当前二叉树: ${payload}`}\n                                            />\n                                        )\n                                }\n                            })}\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='item2'\n                        icon={<BarChartOutlined />}\n                        title='遍历'\n                    >\n                        <Item onClick={handlePreorder}>前序遍历</Item>\n                        <Item onClick={handleInorder}>中序遍历</Item>\n                        <Item onClick={handlePostorder}>后序遍历</Item>\n                    </SubMenu>\n                </Console>\n\n            </div>\n        </div>\n    )\n}\n\nexport default BinarySearchTree;","import React from 'react'\nimport Cube3d, { ICube3dProps } from '../../../components/Cube3d/cube3d';\n\ninterface IQueueCube3dProps extends ICube3dProps {\n}\n\nconst QueueCube3d: React.FC<IQueueCube3dProps> = (props) => {\n\n    return (\n        <Cube3d\n            args={[2, 1, 1]}\n            {...props}\n        />\n    )\n}\n\nexport default React.memo(QueueCube3d);","import { IPageConfig } from \"../../types\";\n\nlet config: IPageConfig = {\n    geoBaseDistance: 2.5,\n    geoNumRange: [3, 5],\n    geoValueRange: [0, 90],\n    geoBasePosY: 2,\n    cameraPosZ: 19,\n    animationSpeed: 400,\n\n}\n\n\nexport default config;","import { v4 as uuidv4 } from 'uuid';\nimport { IQueueCube } from \"./store\";\nimport { ActionTypes } from \"../../types\";\nimport config from './config'\n\n/** 根据数组长度，计算出第一个 cube 的 position 的 x 坐标 */\nexport function getStartPosX(arrLen: number): number {\n    return -(arrLen - 1) * config.geoBaseDistance / 2;\n}\n\nexport function initCubes(values: number[]): IQueueCube[] {\n    return values.map((value) => ({\n        value,\n        isActive: false,\n        isLock: false,\n        key: uuidv4()\n    }))\n}\n\n/** 返回初始化数组的细节 */\nexport function initSeq(values: number[]) {\n    const seq = [];\n    seq.push([{ type: ActionTypes.Disappear }])\n    seq.push([\n        { type: ActionTypes.Generate, payload: values },\n        { type: ActionTypes.Appear }])\n    return seq;\n}\n\n/** 返回入队细节 */\nexport function enqueueSeq(value: number, arrLen: number) {\n    let seq = [];\n    // 入队时自动激活\n    seq.push([{ type: ActionTypes.Enqueue, payload: value }])\n    seq.push([{ type: ActionTypes.Deactive, payload: arrLen }]);\n    return seq;\n}\n\n/** 返回出队细节 */\nexport function dequeueSeq() {\n    let seq = [];\n    // seq.push({ type: ActionTypes.Active, payload: 0 });\n    seq.push([{ type: ActionTypes.Disappear, payload: 0 }]);\n    seq.push([{ type: ActionTypes.Dequeue }])\n    return seq;\n}","import { v4 as uuidv4 } from 'uuid';\nimport { ActionTypes, IBaseState, IGeometryProps, IReducer, OpeDetailTypes } from \"../../types\";\nimport { randomArr, randomNum } from \"../../utils\";\nimport { initCubes } from './utils';\nimport config from './config';\n\nexport interface IQueueCube extends IGeometryProps {\n    key: any;\n}\n\nexport interface IState extends IBaseState {\n    values: number[];\n    cubes: IQueueCube[];\n}\n\n\n\nexport const initState: IState = {\n    values: randomArr(randomNum(config.geoNumRange), config.geoValueRange),\n    disappearAll: false,\n    loading: false,\n    cubes: [],\n    opeDetails: []\n}\n\nexport const reducer: IReducer<IState> = (state = initState, action) => {\n    const { type, payload } = action;\n\n    switch (type) {\n\n        case ActionTypes.Loading:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case ActionTypes.CancelLoading:\n            return {\n                ...state,\n                loading: false\n            }\n\n        case ActionTypes.Generate: {\n            return {\n                ...state,\n                values: payload,\n                cubes: initCubes(payload),\n                opeDetails: [{ type: OpeDetailTypes.Default, payload }]\n            }\n        }\n\n        case ActionTypes.Appear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, disappear: false })),\n                    disappearAll: false,\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Disappear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, disappear: true })),\n                    disappearAll: true,\n                    opeDetails: []\n                }\n            } else {\n                const newCubes: IQueueCube[] = state.cubes.map((item, i) => ({\n                    ...item,\n                    disappear: i === payload\n                }))\n\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n        }\n\n        case ActionTypes.Active: {\n            const newCubes: IQueueCube[] = state.cubes.map((item, i) => ({\n                ...item,\n                isActive: i === payload\n            }))\n\n            return {\n                ...state,\n                cubes: newCubes\n            }\n        }\n        case ActionTypes.Deactive: {\n            const newCubes: IQueueCube[] = state.cubes.map((item, i) => ({\n                ...item,\n                isActive: i === payload ? false : item.isActive\n            }))\n\n            return {\n                ...state,\n                cubes: newCubes\n            }\n        }\n\n        case ActionTypes.Enqueue: {\n            const newCubes = [...state.cubes]\n            const newCube: IQueueCube = {\n                value: payload,\n                isActive: true,\n                key: uuidv4()\n            };\n            const newValues = [...state.values]\n            newCubes.push(newCube);\n            newValues.push(payload);\n\n            return {\n                ...state,\n                cubes: newCubes,\n                values: newValues,\n                opeDetails: [...state.opeDetails, {\n                    type: OpeDetailTypes.Enqueue,\n                    payload: {\n                        enqueueValue: payload,\n                        curValues: newValues\n                    }\n                }]\n            }\n        }\n\n        case ActionTypes.Dequeue: {\n            const newCubes: IQueueCube[] = [...state.cubes];\n            newCubes.shift();\n            const newValues = [...state.values];\n            const dequeueValue = newValues.shift();\n\n            return {\n                ...state,\n                opeDetails: [...state.opeDetails, {\n                    type: OpeDetailTypes.Dequeue,\n                    payload: {\n                        dequeueValue,\n                        curValues: newValues\n                    }\n                }],\n                values: newValues,\n                cubes: newCubes\n            }\n        }\n\n        default:\n            return state;\n    }\n}\n\n","import React, { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, PageHeader, Steps, message } from 'antd';\nimport { Text } from '@react-three/drei';\nimport Console, { Item } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport QueueCube3d from './QueueCube3d/queueCube3d'\nimport { IReducer, OpeDetailTypes } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined\n} from '@ant-design/icons';\nimport { dequeueSeq, enqueueSeq, getStartPosX, initCubes, initSeq } from './utils';\nimport { initState, IState, reducer } from './store';\nimport config from './config'\nimport { root } from '../../configs/router/config';\nimport { excuteSeq, randomArr, randomNum } from '../../utils';\n\nconst { Step } = Steps;\n\nconst Queue = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer<IState>, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n            cubes: initCubes(state.values),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: initState.values }]\n        }\n    });\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 传入数组长度，计算第一个元素的起始x坐标 */\n    const startPosX = getStartPosX(state.cubes.length);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 处理随机元素 */\n    const handleRandom = () => {\n        let sequence = initSeq(randomArr(randomNum(config.geoNumRange), config.geoValueRange));\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 处理入队 */\n    const handleEnqueue = (value: number) => {\n        if (state.values.length < config.geoNumRange[1] + 5) {\n            const sequence = enqueueSeq(value, state.values.length);\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n\n        } else {\n            message.warning(`入队失败，队列最大容量为${config.geoNumRange[1] + 5}`)\n        }\n    }\n\n    /** 处理出队 */\n    const handleDequeue = () => {\n        if (state.values.length > 0) {\n            const sequence = dequeueSeq();\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n\n        } else {\n            message.warning('出队失败，当前队列为空')\n        }\n\n    }\n    return (\n        <div className='queue-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace(root)\n                    window.location.reload();\n                }}\n                title='队列'\n            />\n\n            <div className='main'>\n                <Scene3d\n                    onLoaded={handleSceneLoaded}\n                    cameraPosZ={config.cameraPosZ}\n                >\n                    {state.cubes.map((item, i, arr) => (\n                        <React.Fragment key={item.key}>\n                            <QueueCube3d\n                                value={item.value}\n                                position={[startPosX + (i * config.geoBaseDistance), config.geoBasePosY, 0]}\n                                isActive={item.isActive}\n                                disappear={item.disappear}\n                            />\n                            {i === 0 || i === arr.length - 1 ?\n                                <Text\n                                    fillOpacity={!state.disappearAll ? 1 : 0}\n                                    color='black'\n                                    fontSize={0.5}\n                                    position={[startPosX + (i * config.geoBaseDistance), config.geoBasePosY - 1, 0]}\n                                >\n                                    {i === 0 ? 'head' : 'tail'}\n                                </Text> : <></>\n                            }\n                        </React.Fragment>\n                    ))}\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'flex' : 'none' }}\n                    showSilider={false}\n                    onAdd={handleEnqueue}\n                    onDelete={handleDequeue}\n                    addText='入队'\n                    deleteText='出队'\n                    isAddIndex={false}\n                    isDeleteIndex={false}\n                    spinning={state.loading}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.Enqueue:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`入队: v=${payload.enqueueValue}`}\n                                                description={`当前队列: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Dequeue:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`出队: v=${payload.dequeueValue}`}\n                                                description={`当前队列: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    default:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`当前队列: [${payload.toString()}]`}\n                                            />\n                                        )\n                                }\n                            })}\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                </Console>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Queue;","import React from 'react'\nimport Cube3d, { ICube3dProps } from '../../../components/Cube3d/cube3d';\n\ninterface IStackCube3dProps extends ICube3dProps {\n}\n\nconst StackCube3d: React.FC<IStackCube3dProps> = (props) => {\n    return (\n        <Cube3d \n            args={[2.5, .5, 2.5]}\n            {...props}\n        />\n    )\n}\n\nexport default React.memo(StackCube3d);","import { IPageConfig } from \"../../types\";\n\nlet config: IPageConfig = {\n    geoBaseDistance: 0.8,\n    geoNumRange: [2, 6],\n    geoValueRange: [0, 90],\n    geoBasePosY: 2,\n    cameraPosZ: 16,\n    animationSpeed: 400,\n}\n\n\nexport default config;","import { ActionTypes } from \"../../types\";\nimport { IStackCube } from \"./store\";\nimport config from './config'\n\nexport function initCubes(values: number[]): IStackCube[] {\n    return values.map((value) => ({\n        value,\n        isActive: false,\n        isLock: false\n    }))\n}\n\n/** 返回初始化数组的细节 */\nexport function initSeq(values: number[]) {\n    const seq = [];\n    seq.push([{ type: ActionTypes.Disappear }])\n    seq.push([\n        { type: ActionTypes.Generate, payload: values },\n        { type: ActionTypes.Appear }])\n    return seq;\n}\n\n/** input输入的value解析为数组，如果输入的不合法则返回 undefined */\nexport function parseValue(value: string) {\n    // 去掉前后括，然后按照逗号划分，再转换成数字数组\n    let parseRes = value.substring(1, value.length - 1).split(/[,，]/g).map(item => +item);\n    // console.log(parseRes);\n\n    // 1. 格式不正确：不是类似 [x,xx,x] 这样的格式\n    // 2. 元素取值不能是小数 [1.2,3.2,3]\n    // 3. 元素不能为空 []\n\n    return parseRes;\n}\n\n/** 返回压栈细节 */\nexport function pushSeq(value: number) {\n    let seq = [];\n    seq.push([{ type: ActionTypes.Push, payload: value }])\n    seq.push([{ type: ActionTypes.Deactive }]);\n    return seq;\n}\n/** 返回弹栈细节 */\nexport function popSeq() {\n    let seq = [];\n    seq.push([{ type: ActionTypes.Active }]);\n    seq.push([{ type: ActionTypes.Pop }])\n    seq.push([{ type: ActionTypes.PopDone }])\n    return seq;\n}\n\n/** 根据数组长度，计算出第一个 cube 的 position 的 y 坐标 */\nexport function getStartYPos(arrLen: number): number {\n    return -(arrLen - 1) * config.geoBaseDistance / 2;\n}","import { ActionTypes, IGeometryProps, IReducer, OpeDetailTypes } from \"../../types\";\nimport { randomArr, randomNum } from \"../../utils\";\nimport { initCubes } from \"./utils\";\nimport config from './config'\n\nexport interface IStackCube extends IGeometryProps { }\n\n\nexport interface IState {\n    cubes: IStackCube[];\n    disappearAll: boolean;\n    loading: boolean;\n    opeDetails: { type: OpeDetailTypes, payload?: any }[]\n    values: number[]\n}\n\nexport const initState: IState = {\n    cubes: [],\n    disappearAll: false,\n    loading: false,\n    opeDetails: [],\n    values: randomArr(randomNum(config.geoNumRange), config.geoValueRange)\n}\n\nexport const reducer: IReducer<IState> = (state = initState, action) => {\n    const { type, payload } = action;\n\n    switch (type) {\n\n        case ActionTypes.Loading:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case ActionTypes.CancelLoading:\n            return {\n                ...state,\n                loading: false\n            }\n\n        case ActionTypes.Generate: {\n            return {\n                ...state,\n                values: payload,\n                cubes: initCubes(payload),\n                opeDetails: [{ type: OpeDetailTypes.Default, payload }]\n            }\n        }\n\n        case ActionTypes.Appear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, disappear: false })),\n                    disappearAll: false,\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Disappear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    cubes: state.cubes.map((item) => ({ ...item, disappear: true })),\n                    disappearAll: true,\n                    opeDetails: []\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Active:\n            {\n                const newCubes: IStackCube[] = state.cubes.map((item, i, arr) => ({\n                    ...item,\n                    isActive: i === arr.length - 1\n                }))\n\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n        case ActionTypes.Deactive:\n            {\n                const newCubes: IStackCube[] = state.cubes.map((item, i, arr) => ({\n                    ...item,\n                    isActive: (i === arr.length - 1) ? false : item.isActive\n                }))\n\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n\n        case ActionTypes.Pop:\n            {\n                const newCubes: IStackCube[] = state.cubes.map((item, i, arr) => ({\n                    ...item,\n                    disappear: i === arr.length - 1\n                }));\n\n                const newValues = [...state.values];\n                const popValue = newValues.pop();\n\n                return {\n                    ...state,\n                    cubes: newCubes,\n                    opeDetails: [...state.opeDetails, {\n                        type: OpeDetailTypes.Pop,\n                        payload: {\n                            popValue,\n                            curValues: newValues\n                        }\n                    }],\n                    values: newValues\n                }\n            }\n\n        case ActionTypes.PopDone:\n            {\n                const newCubes: IStackCube[] = [...state.cubes];\n                newCubes.pop();\n                return {\n                    ...state,\n                    cubes: newCubes\n                }\n            }\n\n        case ActionTypes.Push:\n            {\n                const newCubes = [...state.cubes]\n                const newCube: IStackCube = {\n                    value: payload,\n                    isActive: true\n                };\n                const newValues = [...state.values]\n                newCubes.push(newCube);\n                newValues.push(payload);\n\n                return {\n                    ...state,\n                    cubes: newCubes,\n                    values: newValues,\n                    opeDetails: [...state.opeDetails, {\n                        type: OpeDetailTypes.Push,\n                        payload: {\n                            pushValue: payload,\n                            curValues: newValues\n                        }\n                    }]\n                }\n            }\n\n\n\n        default:\n            return state;\n    }\n}","import React, { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, PageHeader, Steps, message } from 'antd';\nimport { BarChartOutlined, DotChartOutlined } from '@ant-design/icons';\nimport Scene3d from '../../components/Scene3d/scene3d'\nimport StackCube3d from './StackCube3d/stackCube3d';\nimport { Text } from '@react-three/drei';\nimport { IReducer, OpeDetailTypes } from '../../types';\nimport { getStartYPos, initCubes, initSeq, parseValue, popSeq, pushSeq } from './utils';\nimport Console, { Item } from '../../components/Console/console';\nimport { IState, initState, reducer } from './store'\nimport config from './config'\nimport { root } from '../../configs/router/config';\nimport { excuteSeq, randomArr, randomNum } from '../../utils';\n\n\nconst { Step } = Steps;\n\nconst Stack = () => {\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer<IState>, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n            cubes: initCubes(state.values),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: initState.values }]\n        }\n    });\n\n    /** stackCube的起始坐标 */\n    const startPosY = getStartYPos(state.cubes.length);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 渲染器生成数组 */\n    const handleRender = (value: string) => {\n        const parseRes = parseValue(value);\n        if (Array.isArray(parseRes)) {\n            let sequence = initSeq(parseRes);\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n        } else {\n            message.warning(parseRes)\n        }\n    }\n\n    /** 处理弹栈 */\n    const handlePop = () => {\n        if (state.values.length > 0) {\n            const sequence = popSeq();\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n        } else {\n            message.warning('弹栈失败，当前栈为空')\n        }\n\n    }\n\n    /** 处理压栈 */\n    const handlePush = (value: number) => {\n        if (state.values.length < config.geoNumRange[1] + 4) {\n            const sequence = pushSeq(value);\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n        } else {\n            message.warning(`压栈失败，栈最大容量为${config.geoNumRange[1] + 4}`)\n        }\n\n    }\n\n    /** 处理随机元素 */\n    const handleRandom = () => {\n        let sequence = initSeq(randomArr(randomNum(config.geoNumRange), config.geoValueRange));\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    return (\n        <div className='stack-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace(root)\n                    window.location.reload();\n                }}\n                title='栈'\n            />\n            <div className='main'>\n                <Scene3d\n                    onLoaded={handleSceneLoaded}\n                    cameraPosZ={config.cameraPosZ}\n                >\n                    {state.cubes.map((item, i) => (\n                        <React.Fragment key={i + '!'}>\n                            <StackCube3d\n                                value={item.value}\n                                position={[0, startPosY + (i * config.geoBaseDistance) + config.geoBasePosY, 0]}\n                                isActive={item.isActive}\n                                disappear={item.disappear}\n\n                            />\n                            {(i === state.cubes.length - 1 && !state.disappearAll) ?\n                                <Text\n                                    fontSize={0.5}\n                                    color='black'\n                                    position={[-2.5, startPosY + (i * config.geoBaseDistance) + config.geoBasePosY, 0]}\n                                >\n                                    {'Top ——>'}\n                                </Text> : <></>}\n                        </React.Fragment>\n                    ))}\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'flex' : 'none' }}\n                    showSilider={false}\n                    onAdd={handlePush}\n                    onDelete={handlePop}\n                    valueRange={[0, 90]}\n                    onRender={handleRender}\n                    addText='压栈'\n                    deleteText='弹栈'\n                    isAddIndex={false}\n                    isDeleteIndex={false}\n                    spinning={state.loading}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.Pop:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`弹栈: v=${payload.popValue}`}\n                                                description={`当前栈: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Push:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`压栈: v=${payload.pushValue}`}\n                                                description={`当前栈: [${payload.curValues.toString()}]`}\n                                            />\n                                        )\n\n                                    default:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`当前栈: [${payload.toString()}]`}\n                                            />\n                                        )\n                                }\n                            })}\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                </Console>\n            </div>\n        </div>\n    )\n}\n\nexport default Stack;","import { ISpherePageConfig } from \"../../types\";\nimport { Points } from \"../../types\";\n\nlet config: ISpherePageConfig = {\n    geoBaseDistance: 2,\n    geoNumRange: [5, 15],\n    geoValueRange: [10, 70],\n    geoBasePosY: 3,\n    cameraPosZ: 21,\n    animationSpeed: 400,\n    maxDeepth: 3\n}\n\n/** 满二叉树的各点坐标 */\nexport const cdnOfNodes: Points = [\n    // 第一排\n    [0, 5 + config.geoBasePosY, 0],\n    // 第二排\n    [-4, 2 + config.geoBasePosY, 0], [4, 2 + config.geoBasePosY, 0],\n    // 第三排\n    [-6, -1 + config.geoBasePosY, 0], [-2, -1 + config.geoBasePosY, 0], [2, -1 + config.geoBasePosY, 0], [6, -1 + config.geoBasePosY, 0],\n    // 第四排\n    [-7, -4 + config.geoBasePosY, 0], [-5, -4 + config.geoBasePosY, 0], [-3, -4 + config.geoBasePosY, 0], [-1, -4 + config.geoBasePosY, 0], [1, -4 + config.geoBasePosY, 0], [3, -4 + config.geoBasePosY, 0], [5, -4 + config.geoBasePosY, 0], [7, -4 + config.geoBasePosY, 0]\n]\n\nexport default config;","import { ActionTypes, IBaseState, IReducer, OpeDetailTypes } from \"../../types\";\nimport { formatBinaryTree, formatSpheres, getChildrenIndexes, getFatherIndex, initSpheres, judgeNode, treeToString } from \"../../utils/binaryTree\";\nimport { IBSTSphere3dProps } from \"./BSTSphere3d/bstSphere3d\";\nimport config, { cdnOfNodes } from \"./config\";\nimport { randomBST } from \"./utils\";\n\nexport interface IBSTSphere3d extends IBSTSphere3dProps { }\n\nexport interface IState extends IBaseState {\n    // 表示二叉树当前真实的结构\n    binaryTree: (number | null)[];\n    // 用来表示每个 sphere 的属性，其元素位置无意义，其中 sortIndex 才是对应的 values 的下标\n    spheres: IBSTSphere3d[];\n}\n\nexport const initState: IState = {\n    binaryTree: randomBST(config.geoNumRange, config.geoValueRange, config.maxDeepth),\n    spheres: [],\n    opeDetails: [],\n    loading: false,\n    disappearAll: false\n}\n\nexport const reducer: IReducer<IState> = (state = initState, action) => {\n    const { type, payload } = action;\n    switch (type) {\n        case ActionTypes.Loading:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case ActionTypes.CancelLoading:\n            return {\n                ...state,\n                loading: false\n            }\n\n        case ActionTypes.Generate: {\n            return {\n                ...state,\n                binaryTree: payload,\n                spheres: initSpheres(payload),\n                opeDetails: [{ type: OpeDetailTypes.Default, payload: treeToString(payload) }]\n            }\n        }\n\n        case ActionTypes.Appear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    spheres: state.spheres.map((item) => ({ ...item, disappear: false })),\n                    disappearAll: false,\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Disappear: {\n            if (!payload && payload !== 0) {\n                return {\n                    ...state,\n                    spheres: state.spheres.map((item) => ({ ...item, disappear: true })),\n                    disappearAll: true\n                }\n            } else {\n                // 判断删除的结点类型\n                const deleteType = judgeNode(state.binaryTree, payload);\n                let newSpheres = [...state.spheres];\n                let newBst = [...state.binaryTree];\n\n                if (deleteType === 0) {\n                    // 让该结点消失\n                    newSpheres = newSpheres.map((sphere) => (sphere.sortIndex === payload ? { ...sphere, disappear: true } : sphere));\n                    // 让其父节点与之的连线也消失\n                    let fatherIndex = getFatherIndex(payload);\n                    // 判断是父结点左连线还是右连线(这里因为是二叉搜索树所以可以直接通过数值大小来判断)\n                    let isLeft = (state.binaryTree[fatherIndex] as number) >= (state.binaryTree[payload] as number)\n                    newSpheres = newSpheres.map((sphere) => {\n                        let newSphere = { ...sphere };\n                        if (sphere.sortIndex === fatherIndex) {\n                            if (isLeft) newSphere.lChildPos = null;\n                            else newSphere.rChildPos = null;\n                        }\n                        return newSphere;\n                    })\n                    newBst[payload] = null;\n\n                    return {\n                        ...state,\n                        spheres: newSpheres,\n                        opeDetails: [...state.opeDetails, {\n                            type: OpeDetailTypes.Delete, payload: {\n                                index: payload,\n                                value: state.binaryTree[payload],\n                                cur: formatBinaryTree(newBst)\n                            }\n                        }]\n                    }\n\n                } else if (deleteType === 1) {\n                    // 让该结点消失\n                    newSpheres = newSpheres.map((sphere) => (sphere.sortIndex === payload ? { ...sphere, disappear: true } : sphere));\n\n                    // 找到被删除结点的子结点\n                    let childrenIndexes = getChildrenIndexes(state.binaryTree, payload);\n                    let childIndex = childrenIndexes[0] || childrenIndexes[1]\n\n                    let fatherIndex = getFatherIndex(payload);\n                    // 判断是父结点左连线还是右连线(这里因为是二叉搜索树所以可以直接通过数值大小来判断)\n                    let isLeft = (state.binaryTree[fatherIndex] as number) >= (state.binaryTree[payload] as number)\n\n                    // 把被删除的结点的子结点的 sortIndexes 中 push 被删除结点的 sortIndex，并且让其父节点与之的连线也消失\n                    newSpheres = newSpheres.map((sphere) => {\n                        let newSphere = { ...sphere };\n                        if (sphere.sortIndex === fatherIndex) {\n                            if (isLeft) newSphere.lChildPos = null;\n                            else newSphere.rChildPos = null;\n                        } else if (sphere.sortIndex === childIndex) {\n                            newSphere.sortIndexes.push(payload);\n                        }\n                        return newSphere;\n                    })\n                    // 被删除结点的子结点移动到该位置\n                    newBst[payload] = state.binaryTree[childIndex];\n\n                    // 之前子结点变为 null\n                    newBst[childIndex] = null;\n\n                    return {\n                        ...state,\n                        spheres: newSpheres,\n                        opeDetails: [...state.opeDetails, {\n                            type: OpeDetailTypes.Delete, payload: {\n                                index: payload,\n                                value: state.binaryTree[payload],\n                                cur: formatBinaryTree(newBst)\n                            }\n                        }]\n                    }\n\n                } else {\n                    return {\n                        ...state\n                    }\n                }\n            }\n        }\n\n        case ActionTypes.Move: {\n            const { oldSortIndex, targetIndex } = payload;\n            const newSperes = [...state.spheres];\n\n            // 子结点\n            const sphere = newSperes.find((sphere) => sphere.sortIndex === oldSortIndex);\n            // 子结点移动到被删除结点的位置\n            sphere?.sortIndexes.push(targetIndex)\n\n            return {\n                ...state,\n                spheres: newSperes\n            }\n        }\n\n        case ActionTypes.Delete: {\n            // 判断删除的结点类型\n            const deleteType = judgeNode(state.binaryTree, payload);\n            let newSpheres = [...state.spheres];\n            let newBst = [...state.binaryTree];\n\n            if (deleteType === 0) { // 删除的结点为叶子结点\n                newSpheres = newSpheres.map((sphere) => {\n                    if (sphere.sortIndex === payload) return { ...sphere, value: null }\n                    return sphere;\n                })\n                newBst[payload] = null;\n\n                return {\n                    ...state,\n                    spheres: newSpheres as any,\n                    binaryTree: formatBinaryTree(newBst as any),\n                }\n\n\n                /*\n\n                [32,27,56,null,null,54,null,null,null,null,null,null,55]\n                [32,27,54,n,n,n,55]\n\n                */\n\n            } else if (deleteType === 1) { // 删除的结点有一个子结点\n                // 获取其父结点的下标\n                let fatherIndex = getFatherIndex(payload);\n                // 获取其子结点的下标\n                let childrenIndexes = getChildrenIndexes(state.binaryTree, payload);\n                let childIndex = childrenIndexes[0] && childrenIndexes[1];\n\n                // newSpheres = newSpheres.map((sphere) => {\n                //     const newSphere = { ...sphere };\n                //     // 真正意义上删除该结点\n                //     if (sphere.sortIndex === payload) newSphere.value = null;\n                //     // 将其子结点 sortIndex 设置为该被删除的结点的 sortIndex\n                //     else if (sphere.sortIndex === childIndex) newSphere.sortIndex = payload;\n                //     // 连接其父结点和被删除位置的连线\n                //     else if (sphere.sortIndex === fatherIndex) {\n                //         // 判断是父结点左连线还是右连线(这里因为是二叉搜索树所以可以直接通过数值大小来判断)\n                //         let isLeft = (state.binaryTree[fatherIndex] as number) >= (state.binaryTree[payload] as number)\n                //         if (isLeft) newSphere.lChildPos = cdnOfNodes[payload]\n                //         else newSphere.rChildPos = cdnOfNodes[payload]\n                //     }\n                //     return newSphere;\n                // })\n\n                // 被删除结点的子结点移动到该位置\n                // newBst[payload] = state.binaryTree[childIndex];\n\n                // 之前子结点变为 null\n                // newBst[childIndex] = null;\n\n                return {\n                    ...state,\n                    // spheres: newSpheres,\n                    // binaryTree: formatBinaryTree(newBst),\n                }\n            } else {\n                return {\n                    ...state\n                }\n            }\n        }\n\n        case ActionTypes.Add: {\n            const { value, index } = payload;\n            let newSpheres = [...state.spheres];\n            // 新结点\n            const newNode: IBSTSphere3d = {\n                value,\n                sortIndex: index,\n                sortIndexes: [index]\n            };\n            // 添加新结点\n            newSpheres[index] = newNode;\n            // 格式化\n            newSpheres = formatSpheres(newSpheres);\n\n            let newBst = [...state.binaryTree];\n            // 添加新值\n            newBst[index] = value\n            // 格式化\n            newBst = formatBinaryTree(newBst);\n\n            return {\n                ...state,\n                binaryTree: newBst,\n                spheres: newSpheres,\n                opeDetails: [...state.opeDetails, {\n                    type: OpeDetailTypes.Add, payload: {\n                        index: payload.index,\n                        value: payload.value,\n                        cur: newBst\n                    }\n                }]\n            }\n        }\n\n        case ActionTypes.StartPreorder:\n            return {\n                ...state,\n                spheres: state.spheres.map(\n                    (item) => ({ ...item, isLock: false })\n                ),\n                opeDetails: [...state.opeDetails, { type: OpeDetailTypes.PreOrderDetails, payload }]\n            }\n\n        case ActionTypes.StartInOrder:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isLock: false,\n                    activeLeft: false,\n                    activeRight: false\n                })),\n                opeDetails: [...state.opeDetails, { type: OpeDetailTypes.InOrderDetails, payload }]\n            }\n\n        case ActionTypes.StartPostOrder:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isLock: false,\n                    activeLeft: false,\n                    activeRight: false\n                })),\n                opeDetails: [...state.opeDetails, { type: OpeDetailTypes.PostOrderDetails, payload }]\n            }\n\n        case ActionTypes.Active:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isActive: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.ActiveLeft:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    activeLeft: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.ActiveRight:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    activeRight: payload === item.sortIndex\n                }))\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n                spheres: state.spheres.map((item) => ({\n                    ...item,\n                    isActive: payload === item.sortIndex ? false : item.isActive\n                }))\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n                spheres: state.spheres.map(\n                    (item) => payload === item.sortIndex ? { ...item, isLock: true } : { ...item }\n                )\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n                spheres: state.spheres.map(\n                    (item) => (!payload && payload !== 0) ? { ...item, isLock: false } : (payload === item.sortIndex) ? { ...item, isLock: false } : { ...item }\n                )\n            }\n\n        default:\n            return state\n    }\n}","import React, { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport Line3d from \"../../../components/Line3d/line3d\";\nimport Sphere3d, { ISphere3dProps } from \"../../../components/Sphere3d/sphere3d\";\nimport config, { cdnOfNodes } from '../config'\n\nexport interface IBSTSphere3dProps extends ISphere3dProps { }\n\nconst BSTSphere3d: React.FC<IBSTSphere3dProps> = (props) => {\n\n    const {\n        lChildPos,\n        rChildPos,\n        position,\n        activeLeft,\n        activeRight,\n        disappear,\n        sortIndex,\n        sortIndexes,\n        // position,\n        // value,\n        // isActive,\n        // isLock,\n        // colorConfig,\n        // lChildPos,\n        // rChildPos,\n        // disappear,\n        // sortIndex\n    } = props;\n\n    const meshRef = useRef<THREE.Mesh>(null!)\n\n    const oldPosX = cdnOfNodes[sortIndex][0];\n    const oldPosY = cdnOfNodes[sortIndex][1];\n\n    const targetPosX = cdnOfNodes[sortIndexes[sortIndexes.length - 1]][0];\n    const targetPosY = cdnOfNodes[sortIndexes[sortIndexes.length - 1]][1];\n\n    useFrame(() => {\n        const deltaX = Math.abs(oldPosX - targetPosX) / (config.animationSpeed / 20);\n        const deltaY = Math.abs(oldPosY - targetPosY) / (config.animationSpeed / 20);\n\n        // 如果当前sphere需要水平移动\n        if (deltaX) {\n\n            // sphere 需要往右移\n            if (oldPosX - targetPosX < 0 && meshRef.current.position.x < targetPosX) {\n                meshRef.current.translateX(deltaX);\n                if (meshRef.current.position.x >= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n\n            // sphere 需要往左移\n            else if (oldPosX - targetPosX > 0 && meshRef.current.position.x > targetPosX) {\n                meshRef.current.translateX(-deltaX);\n                if (meshRef.current.position.x <= targetPosX) {\n                    meshRef.current.position.x = targetPosX;\n                }\n            }\n        }\n\n        // 如果当前sphere需要竖直移动\n        if (deltaY) {\n\n            // sphere 需要往上移\n            if (oldPosY - targetPosY < 0 && meshRef.current.position.y < targetPosY) {\n                meshRef.current.translateY(deltaY);\n                if (meshRef.current.position.y >= targetPosY) {\n                    meshRef.current.position.y = targetPosY;\n                }\n            }\n\n            // sphere 需要往下移\n            else if (oldPosY - targetPosY > 0 && meshRef.current.position.y > targetPosY) {\n                meshRef.current.translateY(-deltaY);\n                if (meshRef.current.position.y <= targetPosY) {\n                    meshRef.current.position.y = targetPosY;\n                }\n            }\n        }\n    })\n\n    return (\n        <>\n            <Sphere3d\n                ref={meshRef as any}\n                {...props}\n            />\n            {\n                lChildPos &&\n                <Line3d\n                    hidden={disappear as boolean}\n                    points={[position, lChildPos]}\n                    isActive={activeLeft}\n                />\n            }\n            {\n                rChildPos &&\n                <Line3d\n                    hidden={disappear as boolean}\n                    points={[position, rChildPos]}\n                    isActive={activeRight}\n                />\n            }\n        </>\n    )\n}\n\nexport default BSTSphere3d;","import React, { useReducer, useState } from 'react'\nimport { useHistory } from 'react-router'\nimport { Text } from '@react-three/drei'\nimport { Button, PageHeader, Steps, message } from 'antd'\nimport { BarChartOutlined, DotChartOutlined } from '@ant-design/icons'\nimport Console, { Item, SubMenu } from '../../components/Console/console'\nimport Scene3d from '../../components/Scene3d/scene3d'\nimport { ActionTypes, IAction, IReducer, OpeDetailTypes, SeqType } from '../../types'\nimport { cdnOfNodes } from './config'\nimport { initState, IState, reducer } from './store'\nimport BSTSphere3d from './BSTSphere3d/bstSphere3d'\nimport { root } from '../../configs/router/config'\nimport { addNodeSeq, deleteNodeSeq, randomBST, searchSeq } from './utils'\nimport { getDeepthByNodeIndex, getLChildValue, getRChildValue, initSeq, initSpheres, inOrderSeq, parseValue, postOrderSeq, preOrderSeq, treeToString } from '../../utils/binaryTree'\nimport config from './config'\nimport { excuteSeq } from '../../utils'\n\nconst { Step } = Steps;\n\nconst BinarySearchTree = () => {\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer<IState>, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n            spheres: initSpheres(initState.binaryTree),\n            opeDetails: [{ type: OpeDetailTypes.Default, payload: treeToString(initState.binaryTree) }]\n        }\n    });\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 渲染input输入的数据 */\n    const handleRender = (value: string) => {\n        const parseRes = parseValue(value);\n        console.log(parseRes);\n        if (parseRes) {\n            let sequence = initSeq(parseRes);\n            excuteSeq(sequence, config.animationSpeed, dispatch);\n        } else {\n            message.warning('输入的数据格式有误，请按照 \"[1,3,8,2]\" 类似格式输入')\n        }\n    }\n\n    // [32,27,56,n,n,54,n,n,n,n,n,n,55]\n    /** 添加元素 */\n    const handleAddEle = (value: number, _: unknown) => {\n        dispatch({ type: ActionTypes.UnLock })\n        let sequence: any[] = [];\n        addNodeSeq(state.binaryTree, 0, value, sequence);\n        sequence.forEach((event, i) => {\n            setTimeout(() => {\n                if (event.type !== ActionTypes.Add) {\n                    dispatch(event)\n                } else {\n                    // 判断一下最后要添加的元素的下标对应的层数是不是小于等于配置项的最大层数\n                    if (getDeepthByNodeIndex(event.payload.index) <= config.maxDeepth) {\n                        dispatch(event)\n                    } else {\n                        message.warning(`添加失败，二叉树最大层数为${config.maxDeepth + 1}`)\n                    }\n                }\n            }, i * config.animationSpeed)\n        })\n    }\n\n    /** 删除元素 */\n    const handleDeleteEle = (index: number) => {\n        dispatch({ type: ActionTypes.UnLock })\n\n        // 验证一下输入的序号\n        if (!state.binaryTree[index]) {\n            return message.warning('删除失败，输入的结点序号不存在')\n        }\n\n        let sequence: any[] = [];\n        deleteNodeSeq(state.binaryTree, index, 0, sequence);\n        console.log(sequence);\n        sequence.forEach((event, i) => {\n            setTimeout(() => {\n                dispatch(event)\n            }, i * config.animationSpeed)\n        })\n\n    }\n\n    /** 搜索元素 */\n    const handleSearch = (value: number) => {\n        dispatch({ type: ActionTypes.UnLock })\n\n        let sequence: SeqType = [];\n        searchSeq(state.binaryTree, value, 0, sequence);\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n\n        // 如果最后一个操作的下标对应的值不等于value，则说明没有查找到目标元素\n        if (state.binaryTree[([...sequence].pop() as IAction[])[0].payload] !== value) {\n            setTimeout(() => {\n                message.warning(`没有查找到取值为 ${value} 的元素`);\n            }, (sequence.length) * config.animationSpeed)\n        }\n    }\n\n    /** 处理随机元素 */\n    const handleRandom = () => {\n        let sequence = initSeq(randomBST(config.geoNumRange, config.geoValueRange, config.maxDeepth));\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    /** 前序遍历 */\n    const handlePreorder = () => {\n\n        let sequence: SeqType = [];\n        preOrderSeq(state.binaryTree, 0, sequence);\n\n        // 获取遍历的结果\n        const preOrderRes: number[] = [];\n        sequence.forEach((event) => {\n            if (event[0].type === ActionTypes.Active) preOrderRes.push(state.binaryTree[event[0].payload] as number)\n        })\n\n        dispatch({ type: ActionTypes.StartPreorder, payload: preOrderRes });\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n\n    }\n\n    /** 中序遍历 */\n    const handleInorder = () => {\n        let sequence: SeqType = [];\n        inOrderSeq(state.binaryTree, 0, sequence);\n\n        // 获取遍历的结果\n        const inOrderRes: number[] = [];\n        sequence.forEach((events) => {\n            if (events[0].type === ActionTypes.Active) inOrderRes.push(state.binaryTree[events[0].payload] as number)\n        })\n\n        dispatch({ type: ActionTypes.StartInOrder, payload: inOrderRes });\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n\n    }\n\n    /** 后序遍历 */\n    const handlePostorder = () => {\n        let sequence: SeqType = [];\n        postOrderSeq(state.binaryTree, 0, sequence);\n        const postOrderRes: number[] = [];\n        sequence.forEach((events) => {\n            if (events[0].type === ActionTypes.Active) postOrderRes.push(state.binaryTree[events[0].payload] as number)\n        })\n        dispatch({ type: ActionTypes.StartPostOrder, payload: postOrderRes });\n        excuteSeq(sequence, config.animationSpeed, dispatch);\n    }\n\n    return (\n        <div className='binarySearchTree-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.replace(root)\n                    window.location.reload();\n                }}\n                title='二叉搜索树'\n            />\n            <div className='main'>\n                <Scene3d\n                    onLoaded={handleSceneLoaded}\n                    cameraPosZ={config.cameraPosZ}\n                >\n                    {state.spheres.map((sphere, i) => {\n                        // 判断当前结点是否有左孩子\n                        const hasLChild = getLChildValue(state.spheres, sphere.sortIndex)?.value;\n\n                        // 获取左结点的位置(加上前面的这个判断是为了在删除元素时，会设置与之连接的父结点的那条线为null)\n                        const lChildPos = sphere.lChildPos !== null && getLChildValue(cdnOfNodes, sphere.sortIndex);\n\n                        // 判断当前结点是否有右孩子\n                        const hasRChild = sphere.rChildPos !== null && getRChildValue(state.spheres, sphere.sortIndex)?.value;\n\n                        // 获取右结点的位置\n                        const rChildPos = getRChildValue(cdnOfNodes, sphere.sortIndex);\n\n                        return (\n                            sphere.value && (\n                                <React.Fragment key={'sphere' + i}>\n                                    <BSTSphere3d\n                                        value={sphere.value}\n                                        sortIndex={sphere.sortIndex}\n                                        sortIndexes={sphere.sortIndexes}\n                                        position={cdnOfNodes[sphere.sortIndex]}\n                                        isActive={sphere.isActive}\n                                        activeLeft={sphere.activeLeft}\n                                        activeRight={sphere.activeRight}\n                                        isLock={sphere.isLock}\n                                        disappear={sphere.disappear}\n                                        lChildPos={hasLChild && lChildPos}\n                                        rChildPos={hasRChild && rChildPos}\n                                    />\n                                    <Text\n                                        position={[cdnOfNodes[i][0], cdnOfNodes[i][1] - 1.2, cdnOfNodes[i][2]]}\n                                        fontSize={0.4}\n                                        fillOpacity={!sphere.disappear && !state.disappearAll ? 1 : 0}\n                                        color='black'\n                                    >\n                                        {i}\n                                    </Text>\n                                </React.Fragment>\n\n                            )\n                        )\n                    })}\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'flex' : 'none' }}\n                    // onSliderChange={handleSliderChange}\n                    isAddIndex={false}\n                    isSearch={true}\n                    onAdd={handleAddEle}\n                    onDelete={handleDeleteEle}\n                    onSearch={handleSearch}\n                    onRender={handleRender}\n                    spinning={state.loading}\n                    operation={\n                        <div className='btn-group'>\n                            <div className='row'>\n                                <Button icon={<BarChartOutlined />} onClick={handleRandom}>随机生成</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handlePreorder}>前序遍历</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handleInorder}>中序遍历</Button>\n                                <Button icon={<BarChartOutlined />} onClick={handlePostorder}>后序遍历</Button>\n                            </div>\n                        </div>\n                    }\n\n                    displayer={\n                        <Steps direction=\"vertical\" size=\"small\" current={state.opeDetails.length - 1}>\n                            {state.opeDetails.map((item, i) => {\n                                const { type, payload } = item;\n                                switch (type) {\n                                    case OpeDetailTypes.InOrderDetails:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`中序遍历: [${payload}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.PreOrderDetails:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`前序遍历: [${payload}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.PostOrderDetails:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`后序遍历: [${payload}]`}\n                                            />\n                                        )\n\n                                    case OpeDetailTypes.Add: {\n                                        const { index, value, cur } = payload;\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`新增结点: i=${index}, v=${value}`}\n                                                description={`当前二叉树: ${treeToString(cur)}`}\n                                            />\n                                        )\n                                    }\n\n                                    case OpeDetailTypes.Delete: {\n                                        const { index, value, cur } = payload;\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`删除结点: i=${index}, v=${value}`}\n                                                description={`当前二叉树: ${treeToString(cur)}`}\n                                            />\n                                        )\n                                    }\n\n                                    default:\n                                        return (\n                                            <Step\n                                                key={'step' + i}\n                                                title={`当前二叉树: ${payload}`}\n                                            />\n                                        )\n                                }\n                            })}\n                        </Steps>\n                    }\n                >\n                    <Item\n                        key='item1'\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='item2'\n                        icon={<BarChartOutlined />}\n                        title='遍历'\n                    >\n                        <Item onClick={handlePreorder}>前序遍历</Item>\n                        <Item onClick={handleInorder}>中序遍历</Item>\n                        <Item onClick={handlePostorder}>后序遍历</Item>\n                    </SubMenu>\n                </Console>\n\n            </div>\n        </div>\n    )\n}\n\nexport default BinarySearchTree;","import { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Drawer, Input, PageHeader } from 'antd';\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { randomArr, randomNum } from '../../utils/index'\nimport { ActionTypes, IGeometryProps } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined,\n    MinusSquareOutlined,\n    PlusSquareOutlined,\n} from '@ant-design/icons';\nimport './hashTable.scss'\n\nexport interface IHashTableCube extends IGeometryProps {\n\n}\ntype IReducer = (state: IState, action: IAction) => IState;\n\ninterface IState {\n    // 是否随机化完毕\n    randomDone: boolean;\n}\n\ninterface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nconst initState: IState = {\n    randomDone: true,\n}\n\nfunction reducer(state: IState = initState, action: IAction): IState {\n\n    const { type, payload } = action;\n\n\n    switch (type) {\n        case ActionTypes.Active:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n            }\n\n\n        // case ActionTypes.Add:\n\n        // case ActionTypes.Delete:\n\n        case ActionTypes.RandomDone:\n            {\n                return {\n                    ...state,\n                    randomDone: true\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            };\n\n        // case ActionTypes.Search:\n\n        default:\n            return state;\n    }\n}\n\nconst HashTable = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n        }\n    })\n\n    /** 控制抽屉是否展开 */\n    const [isUnfold, setIsUnfold] = useState(false);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 传入数组长度，计算第一个元素的起始x坐标 */\n    // const startPosX = getStartXPos(state.cubes.length);\n\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n    return (\n        <div className='hashTable-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.goBack();\n                    window.location.reload();\n                }}\n                title='哈希表'\n            />\n\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'flex' : 'none' }}\n                >\n                    <Item\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='2'\n                        icon={<BarChartOutlined />}\n                        title='排序'\n                    >\n                        <Item>冒泡排序</Item>\n                        <Item>选择排序</Item>\n                        <Item>插入排序</Item>\n                        <Item>快速排序</Item>\n                        <Item>归并排序</Item>\n                    </SubMenu>\n\n                    <SubMenu\n                        icon={<PlusSquareOutlined />}\n                    >\n                        <Item>\n                            <Input />\n                            <Button>添加</Button>\n                        </Item>\n                    </SubMenu>\n\n                    <Item icon={<MinusSquareOutlined />}>删除</Item>\n\n                </Console>\n            </div>\n\n        </div>\n    )\n}\n\nexport default HashTable;\n\n\n","import { useReducer, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Drawer, Input, PageHeader } from 'antd';\nimport { Text } from '@react-three/drei';\nimport Console, { Item, SubMenu } from '../../components/Console/console';\nimport Scene3d from '../../components/Scene3d/scene3d';\nimport { randomArr, randomNum } from '../../utils/index'\nimport { ActionTypes, IGeometryProps } from '../../types';\nimport {\n    BarChartOutlined,\n    DotChartOutlined,\n    MinusSquareOutlined,\n    PlusSquareOutlined,\n} from '@ant-design/icons';\nimport './graph.scss'\n\nexport interface IBinaryHeapCube extends IGeometryProps {\n\n}\ntype IReducer = (state: IState, action: IAction) => IState;\n\ninterface IState {\n    // 是否随机化完毕\n    randomDone: boolean;\n}\n\ninterface IAction {\n    type: ActionTypes;\n    payload?: any;\n}\n\nconst initState: IState = {\n    randomDone: true,\n}\n\nfunction reducer(state: IState = initState, action: IAction): IState {\n\n    const { type, payload } = action;\n\n\n    switch (type) {\n        case ActionTypes.Active:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Deactive:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.Lock:\n            return {\n                ...state,\n            }\n\n        case ActionTypes.UnLock:\n            return {\n                ...state,\n            }\n\n\n        // case ActionTypes.Add:\n\n        // case ActionTypes.Delete:\n\n        case ActionTypes.RandomDone:\n            {\n                return {\n                    ...state,\n                    randomDone: true\n                }\n            }\n\n        case ActionTypes.Random:\n            return {\n                ...state,\n                randomDone: false\n            };\n\n        // case ActionTypes.Search:\n\n        default:\n            return state;\n    }\n}\n\nconst Graph = () => {\n\n    const history = useHistory();\n    const [state, dispatch] = useReducer<IReducer, IState>(reducer, initState, (state): IState => {\n        return {\n            ...state,\n        }\n    })\n\n    /** 控制抽屉是否展开 */\n    const [isUnfold, setIsUnfold] = useState(false);\n\n    /** 场景是否加载完毕 */\n    const [isSceneLoaded, setIsSceneLoaded] = useState(false);\n\n    /** 传入数组长度，计算第一个元素的起始x坐标 */\n    // const startPosX = getStartXPos(state.cubes.length);\n\n\n    /** 处理场景加载完毕回调 */\n    const handleSceneLoaded = () => {\n        setIsSceneLoaded(true);\n    }\n\n    /** 随机生成数据 */\n    const handleRandom = () => {\n        dispatch({ type: ActionTypes.Random });\n        setTimeout(() => {\n            dispatch({ type: ActionTypes.RandomDone })\n        }, 400);\n    }\n    return (\n        <div className='graph-warp'>\n            <PageHeader\n                onBack={() => {\n                    history.goBack();\n                    window.location.reload();\n                }}\n                title='图'\n            />\n\n            <div className='main'>\n                <Scene3d onLoaded={handleSceneLoaded}>\n\n                </Scene3d>\n                <Console\n                    style={{ display: isSceneLoaded ? 'flex' : 'none' }}\n                >\n                    <Item\n                        icon={<DotChartOutlined />}\n                        onClick={handleRandom}\n                    >\n                        随机生成\n                    </Item>\n\n                    <SubMenu\n                        key='2'\n                        icon={<BarChartOutlined />}\n                        title='排序'\n                    >\n                        <Item>冒泡排序</Item>\n                        <Item>选择排序</Item>\n                        <Item>插入排序</Item>\n                        <Item>快速排序</Item>\n                        <Item>归并排序</Item>\n                    </SubMenu>\n\n                    <SubMenu\n                        icon={<PlusSquareOutlined />}\n                    >\n                        <Item>\n                            <Input />\n                            <Button>添加</Button>\n                        </Item>\n                    </SubMenu>\n\n                    <Item icon={<MinusSquareOutlined />}>删除</Item>\n\n                </Console>\n \n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Graph;\n\n\n","import Home from '../../pages/Home/home'\nimport Sort from '../../pages/Sort/sort'\n// import AVLTree from '../../pages/AVLTree/avlTree'\n// import Graph from '../../pages/Graph/graph'\nimport BinaryHeap from '../../pages/BinaryHeap/binaryHeap'\n// import BTree from '../../pages/BTree/bTree'\nimport Queue from '../../pages/Queue/queue'\nimport Stack from '../../pages/Stack/stack'\n// import HashTable from '../../pages/HashTable/hashTable'\n// import LinkedList from '../../pages/LinkedList/linkedList'\n// import RedBlackTree from '../../pages/RedBlackTree/redBlackTree'\n// import BPlusTree from '../../pages/BPlusTree/bPlusTree'\nimport BinarySearchTree from '../../pages/BinarySearchTree/binarySearchTree'\nimport HashTable from '../../pages/HashTable/hashTable'\nimport Graph from '../../pages/Graph/graph'\n\n\nexport const root = '/data-structure-visualization';\n\nconst routers = [\n    {\n        path: root + \"/home\",\n        page: Home\n    },\n    {\n        path: root + \"/sort\",\n        page: Sort\n    },\n    {\n        path: root + \"/graph\",\n        page: Graph\n    },\n    {\n        path: root + \"/queue\",\n        page: Queue\n    },\n    {\n        path: root + \"/stack\",\n        page: Stack\n    },\n    {\n        path: root + \"/binarySearchTree\",\n        page: BinarySearchTree\n    },\n    {\n        path: root + \"/binaryHeap\",\n        page: BinaryHeap\n    },\n    {\n        path: root + \"/hashTable\",\n        page: HashTable\n    },\n    // {\n    //     path: root + \"/avlTree\",\n    //     page: AVLTree\n    // },\n    // {\n    //     path: root + \"/redBlackTree\",\n    //     page: RedBlackTree\n    // },\n    // {\n    //     path: root + \"/bTree\",\n    //     page: BTree\n    // },\n\n    // {\n    //     path: root + \"/bPlusTree\",\n    //     page: BPlusTree\n    // },\n\n];\n\n\nexport default routers\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport routers, { root } from \"./config\";\n\n\nconst RouterView = () => {\n  return (\n\n    <Router>\n      <Switch>\n        {routers.map((item, index) => {\n          if (index === 0) {\n            return <Route key={index} path={item.path} component={item.page} />\n          } \n          return <Route key={index} path={item.path + ''} component={item.page} />\n        })}\n        {/* {\n          routers.map((item, index) => {\n            console.log(item);\n          })\n        } */}\n      </Switch>\n      <Redirect to={root + \"/home\"} />\n\n    </Router>\n\n  );\n};\n\nexport default RouterView;\n","import { Layout } from 'antd';\nimport RouterView from './configs/router';\nimport './App.scss';\nimport { root } from './configs/router/config';\nconst { Header, Content, Footer } = Layout;\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout className='layout'>\n        <Header className='header'>\n          <a href={root}>Data Structure Visualization</a>\n        </Header>\n        <Content className='content'>\n          <RouterView />\n        </Content>\n        <Footer className='footer'>\n          DSV ©2021 Created by Dora and Conan\n        </Footer>\n      </Layout>\n    </div>\n  );\n}\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  // <React.StrictMode>\n      <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}